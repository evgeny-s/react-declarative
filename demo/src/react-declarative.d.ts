// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../dayjs
//   ../../react
//   ../../@mui/material
//   ../../history
//   ../../@mui/material/Box
//   ../../@mui/system
//   ../../@mui/material/Button
//   ../../@mui/material/IconButton
//   ../../@mui/material/Fab
//   ../../@mui/material/Stack
//   ../../@mui/material/styles
//   ../../@mui/material/Tabs
//   ../../@mui/material/TextField
//   ../../@mui/material/Chip

declare module 'react-declarative' {
    import "./polyfills";
    import { TypedField as TypedFieldInternal } from 'react-declarative/model/TypedField';
    import { IField as IFieldInternal } from 'react-declarative/model/IField';
    import { IEntity as IEntityInternal } from 'react-declarative/model/IEntity';
    import { IManaged as IManagedInternal } from 'react-declarative/model/IManaged';
    import { IColumn as IColumnInternal } from 'react-declarative/model/IColumn';
    import { ITab as ITabInternal } from 'react-declarative/model/ITab';
    import { IApiPaginatorParams as IApiPaginatorParamsInternal } from 'react-declarative/components/List/api/useApiPaginator';
    import { IArrayPaginatorParams as IArrayPaginatorParamsInternal } from 'react-declarative/components/List/api/useArrayPaginator';
    import { IApiHandlerParams as IApiHandlerParamsInternal } from 'react-declarative/components/One/api/useApiHandler';
    export type IListApiPaginatorParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = IApiPaginatorParamsInternal<FilterData, RowData>;
    export type ILastArrayPaginatorParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = IArrayPaginatorParamsInternal<FilterData, RowData>;
    export type IOneApiHandlerParams<Data = any> = IApiHandlerParamsInternal<Data>;
    import { FieldType as FieldTypeInternal } from 'react-declarative/model/FieldType';
    import { ColumnType as ColumnTypeInternal } from 'react-declarative/model/ColumnType';
    import { ActionType as ActionTypeInternal } from 'react-declarative/model/ActionType';
    import { SelectionMode as SelectionModeInternal } from 'react-declarative/model/SelectionMode';
    import { IListApi as IListApiInternal } from 'react-declarative/model/IListApi';
    import { IOneApi as IOneApiInternal } from 'react-declarative/model/IOneApi';
    import { IListOperation as IListOperationInternal } from 'react-declarative/model/IListOperation';
    import { IListRowAction as IListRowActionInternal } from 'react-declarative/model/IListRowAction';
    import { IListAction as IListActionInternal } from 'react-declarative/model/IListProps';
    import { IListChip as IListChipInternal } from 'react-declarative/model/IListProps';
    import { IOption as IOptionInternal } from 'react-declarative/model/IOption';
    import { IBreadcrumbsOption as IBreadcrumbsOptionInternal } from 'react-declarative/model/IBreadcrumbsOption';
    export { createServiceManager } from 'react-declarative/helpers/serviceManager';
    export { serviceManager } from 'react-declarative/helpers/serviceManager';
    import { IService as IServiceInternal } from 'react-declarative/helpers/serviceManager';
    export type IService = IServiceInternal;
    export { createRouteItemManager } from 'react-declarative/helpers/routeManager';
    export { createRouteParamsManager } from 'react-declarative/helpers/routeManager';
    export { useRouteItem } from 'react-declarative/hooks/useRouteItem';
    export { useRouteParams } from 'react-declarative/hooks/useRouteParams';
    export { RouteManager } from 'react-declarative/helpers/routeManager';
    export { toRouteUrl } from 'react-declarative/utils/toRouteUrl';
    export { prefetch } from 'react-declarative/helpers/serviceManager';
    export { unload } from 'react-declarative/helpers/serviceManager';
    export { provide } from 'react-declarative/helpers/serviceManager';
    export { inject } from 'react-declarative/helpers/serviceManager';
    import { IMenuGroup as IMenuGroupInternal, IMenuOption as IMenuOptionInternal } from 'react-declarative/model/IMenuGroup';
    import { ListHandlerPagination as ListHandlerPaginationInternal } from 'react-declarative/model/IListProps';
    import { ListHandlerSortModel as ListHandlerSortModelInternal } from 'react-declarative/model/IListProps';
    import { ListHandlerChips as ListHandlerChipsInternal } from 'react-declarative/model/IListProps';
    import { ListHandlerResult as ListHandlerResultInternal } from 'react-declarative/model/IListProps';
    import { ListHandler as ListHandlerInternal } from 'react-declarative/model/IListProps';
    import { OneHandler as OneHandlerInternal } from 'react-declarative/model/IOneProps';
    import { useActualCallback } from 'react-declarative/hooks/useActualCallback';
    import { useActualValue } from 'react-declarative/hooks/useActualValue';
    import { useActualState } from 'react-declarative/hooks/useActualState';
    import { useRenderWaiter } from 'react-declarative/hooks/useRenderWaiter';
    import { useOneArray, oneArrayIncludes, isOneArray, toOneArray } from 'react-declarative/hooks/useOneArray';
    import { useAsyncAction } from 'react-declarative/hooks/useAsyncAction';
    import { useMediaContext } from 'react-declarative/hooks/useMediaContext';
    import { useAudioPlayer } from 'react-declarative/hooks/useAudioPlayer';
    import { useChangeSubject } from 'react-declarative/hooks/useChangeSubject';
    import { useReloadTrigger } from 'react-declarative/hooks/useReloadTrigger';
    import { useSingleton } from 'react-declarative/hooks/useSingleton';
    import { useBehaviorSubject } from 'react-declarative/hooks/useBehaviorSubject';
    import { useSubscription } from 'react-declarative/hooks/useSubscription';
    import { useSubjectValue } from 'react-declarative/hooks/useSubjectValue';
    import { useElementSize } from 'react-declarative/hooks/useElementSize';
    import { useSubject } from 'react-declarative/hooks/useSubject';
    import { useChange } from 'react-declarative/hooks/useChange';
    import { useModel } from 'react-declarative/hooks/useModel';
    import { useEntity } from 'react-declarative/hooks/useEntity';
    import { useListEditor } from 'react-declarative/hooks/useListEditor';
    import { useMediaStreamBuilder } from 'react-declarative/hooks/useMediaStreamBuilder';
    import { useCollection } from 'react-declarative/hooks/useCollection';
    import { useRequestSnackbar } from 'react-declarative/hooks/useRequestSnackbar';
    import { useModal } from 'react-declarative/components/ModalProvider';
    import { useSnack } from 'react-declarative/components/SnackProvider';
    import { useSize } from 'react-declarative/components/SizeProvider';
    import { useList } from 'react-declarative/hooks/useList';
    import { useFile } from 'react-declarative/hooks/useFile';
    import { useConfirm } from 'react-declarative/hooks/useConfirm';
    import { usePrompt } from 'react-declarative/hooks/usePrompt';
    import { useDate } from 'react-declarative/hooks/useDate';
    import { useTime } from 'react-declarative/hooks/useTime';
    import { useOne } from 'react-declarative/hooks/useOne';
    import { useOneTyped } from 'react-declarative/hooks/useOne';
    import { useSearchParams } from 'react-declarative/hooks/useSearchParams';
    import { useSearchState } from 'react-declarative/hooks/useSearchState';
    export { useSearchParams };
    export { useSearchState };
    export { useElementSize };
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData, { RowId } from 'react-declarative/model/IRowData';
    export type { IRowData, RowId };
    import { ISwitchItem as ISwitchItemInternal } from 'react-declarative/components';
    import { IActionFilter as IActionFilterInternal } from 'react-declarative/components';
    import { IActionTrigger as IActionTriggerInternal } from 'react-declarative/components';
    import { IScaffoldOption as IScaffoldOptionInternal } from 'react-declarative/components';
    export type ISwitchItem = ISwitchItemInternal;
    export type IActionFilter = IActionFilterInternal;
    export type IActionTrigger<Data extends any = any> = IActionTriggerInternal<Data>;
    export const FieldType: typeof FieldTypeInternal;
    export const ColumnType: typeof ColumnTypeInternal;
    export const ActionType: typeof ActionTypeInternal;
    export const SelectionMode: typeof SelectionModeInternal;
    export type TypedField<Data = IAnything, Payload = IAnything> = TypedFieldInternal<Data, Payload>;
    export type IField<Data = IAnything, Payload = IAnything> = IFieldInternal<Data, Payload>;
    export type IFieldEntity<Data = IAnything, Payload = IAnything> = IEntityInternal<Data, Payload>;
    export type IFieldManaged<Data = IAnything, Value = IAnything> = IManagedInternal<Data, Value>;
    export type ITab<T extends unknown = any> = ITabInternal<T>;
    export type ListHandler<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = ListHandlerInternal<FilterData, RowData>;
    export type ListHandlerResult<RowData extends IRowData = IAnything> = ListHandlerResultInternal<RowData>;
    export type OneHandler<Data = IAnything> = OneHandlerInternal<Data>;
    export type ListHandlerPagination = ListHandlerPaginationInternal;
    export type ListHandlerSortModel<RowData extends IRowData = IAnything> = ListHandlerSortModelInternal<RowData>;
    export type ListHandlerChips<RowData extends IRowData = IAnything> = ListHandlerChipsInternal<RowData>;
    export type IListRowAction<RowData extends IRowData = IAnything> = IListRowActionInternal<RowData>;
    export type IListChip<RowData extends IRowData = IAnything> = IListChipInternal<RowData>;
    export type IListOperation<Data extends IRowData = any> = IListOperationInternal<Data>;
    export type IListAction<Data extends IRowData = any> = IListActionInternal<Data>;
    export type IListApi<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = IListApiInternal<FilterData, RowData>;
    export type IOneApi<Data = IAnything> = IOneApiInternal<Data>;
    export type IMenuOption<Data = any> = IMenuOptionInternal<Data>;
    export type IMenuGroup<Data = any> = IMenuGroupInternal<Data>;
    export type IOption = IOptionInternal;
    export type IColumn<FilterData extends {} = IAnything, RowData extends IRowData = any, Payload = any> = IColumnInternal<FilterData, RowData, Payload>;
    import { TGridSort as TGridSortInternal, IGridColumn as IGridColumnInternal, IGridAction as IGridActionInternal } from 'react-declarative/components';
    export type TGridSort<RowData extends IRowData = any> = TGridSortInternal<RowData>;
    export type IGridColumn<RowData extends IRowData = any> = IGridColumnInternal<RowData>;
    export type IGridAction<RowData extends IRowData = any> = IGridActionInternal<RowData>;
    export type IBreadcrumbsOption<Data = any> = IBreadcrumbsOptionInternal<Data>;
    export type IScaffoldOption<Data = any> = IScaffoldOptionInternal<Data>;
    export type pickOneTypedFn = ReturnType<typeof useOneTyped>;
    export type pickOneFn = ReturnType<typeof useOne>;
    export type pickDateFn = ReturnType<typeof useDate>;
    export type pickTimeFn = ReturnType<typeof useTime>;
    export type pickListFn = ReturnType<typeof useList>;
    export type pickConfirmFn = ReturnType<typeof useConfirm>;
    export type pickPromptFn = ReturnType<typeof usePrompt>;
    export { default as dayjs } from 'dayjs';
    export { DocumentView } from 'react-declarative/components';
    export { ScrollTopView } from 'react-declarative/components';
    export { OutletView } from 'react-declarative/components';
    export { AlertView } from 'react-declarative/components';
    export { ImageView } from 'react-declarative/components';
    export { ConstraintView } from 'react-declarative/components';
    export { DragDropView } from 'react-declarative/components';
    export { FilesView } from 'react-declarative/components';
    export { ScrollView } from 'react-declarative/components';
    export { ScaleView } from 'react-declarative/components';
    export { FetchView } from 'react-declarative/components';
    export { FadeView } from 'react-declarative/components';
    export { TabsView } from 'react-declarative/components';
    export { WaitView } from 'react-declarative/components';
    export { PingView } from 'react-declarative/components';
    export { OfflineView } from 'react-declarative/components';
    export { RevealView } from 'react-declarative/components';
    export { SecretView } from 'react-declarative/components';
    export { PortalView } from 'react-declarative/components';
    export { ReloadView } from 'react-declarative/components';
    export { RecordView } from 'react-declarative/components';
    export { CardView } from 'react-declarative/components';
    export { HtmlView } from 'react-declarative/components';
    export { ErrorView } from 'react-declarative/components';
    export { AuthView } from 'react-declarative/components';
    export { LoaderView } from 'react-declarative/components';
    export { FeatureView } from 'react-declarative/components';
    export { InfiniteView } from 'react-declarative/components';
    export { VirtualView, VIRTUAL_VIEW_ROOT, VIRTUAL_VIEW_CHILD } from 'react-declarative/components';
    import { TreeView, ITreeViewNode as ITreeViewNodeInternal } from 'react-declarative/components';
    export type ITreeViewNode = ITreeViewNodeInternal;
    export { TreeView };
    import { ICardViewItemData } from 'react-declarative/components/CardView';
    import { ICardViewAction as ICardViewActionInternal } from 'react-declarative/components/CardView';
    import { ICardViewOperation as ICardViewOperationInternal } from 'react-declarative/components/CardView';
    export type ICardViewAction<Data extends ICardViewItemData = any> = ICardViewActionInternal<Data>;
    export type ICardViewOperation<Data extends ICardViewItemData = any> = ICardViewOperationInternal<Data>;
    import { IFeatureGroup as IFeatureGroupInternal } from 'react-declarative/components/FeatureView';
    import { IFeature as IFeatureInternal } from 'react-declarative/components/FeatureView';
    export type IFeatureGroup<Data = IAnything, Payload = IAnything> = IFeatureGroupInternal<Data, Payload>;
    export type IFeature<Data = IAnything, Payload = IAnything> = IFeatureInternal<Data, Payload>;
    import { recordToExcelExport } from 'react-declarative/components/RecordView';
    export { recordToExcelExport };
    export { ErrorBoundary } from 'react-declarative/components';
    export { AutoSizer } from 'react-declarative/components';
    export { ActionStopIcon } from 'react-declarative/components';
    export { ActionTrigger } from 'react-declarative/components';
    export { ActionFilter } from 'react-declarative/components';
    export { ActionButton } from 'react-declarative/components';
    export { ActionToggle } from 'react-declarative/components';
    export { ActionMenu } from 'react-declarative/components';
    export { ActionIcon } from 'react-declarative/components';
    export { ActionFab } from 'react-declarative/components';
    export { ActionModal, useActionModal, useActionModalTyped } from 'react-declarative/components';
    export { SearchModal, useSearchModal, useSearchModalTyped } from 'react-declarative/components';
    import { IMasterDetailOption as IMasterDetailOptionInternal } from 'react-declarative/components';
    import { MasterDetailMode as MasterDetailModeInternal } from 'react-declarative/components';
    export type IMasterDetailOption<Payload = any> = IMasterDetailOptionInternal<Payload>;
    export const MasterDetailMode: typeof MasterDetailModeInternal;
    import { IOutlet as IOutletInternal, IOutletProps as IOutletPropsInternal } from 'react-declarative/components';
    export type IOutlet<Data = any, Payload = any, Params = any> = IOutletInternal<Data, Payload, Params>;
    export type IOutletProps<Data = any, Payload = any, Params = any> = IOutletPropsInternal<Data, Payload, Params>;
    export { MasterDetail, MASTER_DETAIL_HEADER, MASTER_DETAIL_ROOT } from 'react-declarative/components';
    export { Async } from 'react-declarative/components';
    export { If } from 'react-declarative/components';
    export { List, ListTyped } from 'react-declarative/components';
    export { One, OneTyped, OneConfig } from 'react-declarative/components';
    import { Translate } from 'react-declarative/components';
    export { Translate };
    export const registerTr: (locale?: {
        [x: string]: string;
    } | undefined, transform?: ((str: string) => string) | undefined) => Translate;
    export { ModalProvider } from 'react-declarative/components';
    export { SizeProvider } from 'react-declarative/components';
    export { SnackProvider } from 'react-declarative/components';
    import { IScaffold2Option as IScaffold2OptionInternal } from 'react-declarative/components/Scaffold2';
    import { IScaffold2Action as IScaffold2ActionInternal } from 'react-declarative/components/Scaffold2';
    import { IScaffold2Group as IScaffold2GroupInternal } from 'react-declarative/components/Scaffold2';
    import { IScaffold2Tab as IScaffold2TabInternal } from 'react-declarative/components/Scaffold2';
    export type IScaffold2Action<T = any> = IScaffold2ActionInternal<T>;
    export type IScaffold2Group<T = any> = IScaffold2GroupInternal<T>;
    export type IScaffold2Option<T = any> = IScaffold2OptionInternal<T>;
    export type IScaffold2Tab<T = any> = IScaffold2TabInternal<T>;
    import { Breadcrumbs2Type as Breadcrumbs2TypeInternal } from 'react-declarative/components/Breadcrumbs2';
    import { IBreadcrumbs2Action as IBreadcrumbs2ActionInternal } from 'react-declarative/components/Breadcrumbs2';
    import { IBreadcrumbs2Option as IBreadcrumbs2OptionInternal } from 'react-declarative/components/Breadcrumbs2';
    export const Breadcrumbs2Type: typeof Breadcrumbs2TypeInternal;
    export type IBreadcrumbs2Action<Data = any> = IBreadcrumbs2ActionInternal<Data>;
    export type IBreadcrumbs2Option<Data = any> = IBreadcrumbs2OptionInternal<Data>;
    export { Scaffold } from 'react-declarative/components';
    export { Scaffold2 } from 'react-declarative/components';
    export { Countdown } from 'react-declarative/components';
    export { Spinner } from 'react-declarative/components';
    export { Search } from 'react-declarative/components';
    export { Grid } from 'react-declarative/components';
    export { Copy } from 'react-declarative/components';
    export { Chip } from 'react-declarative/components';
    export { OneSlotFactory, OneDefaultSlots } from 'react-declarative/components';
    export { ListSlotFactory, ListDefaultSlots } from 'react-declarative/components';
    export { Breadcrumbs } from 'react-declarative/components';
    export { Breadcrumbs2 } from 'react-declarative/components';
    export { Switch } from 'react-declarative/components';
    export { Center } from 'react-declarative/components';
    export { Square } from 'react-declarative/components';
    export { Dot } from 'react-declarative/components';
    export { ScrollAdjust } from 'react-declarative/components';
    export { NoSsr } from 'react-declarative/components';
    export { OtherComboSlot } from 'react-declarative/components';
    export { OtherItemsSlot } from 'react-declarative/components';
    export { useCachedPaginator } from 'react-declarative/components';
    export { useArrayPaginator } from 'react-declarative/components';
    export { useApiPaginator } from 'react-declarative/components';
    export { useLastPagination } from 'react-declarative/components';
    export { useQueryPagination } from 'react-declarative/components';
    export { usePreventNavigate } from 'react-declarative/components';
    export { useStaticHandler } from 'react-declarative/components';
    export { usePreventLeave } from 'react-declarative/components';
    export { useLocalHandler } from 'react-declarative/components';
    export { useApiHandler } from 'react-declarative/components';
    export { useFilesView } from 'react-declarative/components';
    export { useTabsHashstate } from 'react-declarative/components';
    export { createField, makeField } from 'react-declarative/components';
    export { createLayout, makeLayout } from 'react-declarative/components';
    export { useListProps, useListCachedRows, useListPayload, useListChips } from 'react-declarative/components';
    export { useOneProps, useOneState, useOnePayload } from 'react-declarative/components';
    export { useActualCallback };
    export { useActualValue };
    export { useActualState };
    export { useRenderWaiter };
    export { useOneArray };
    export { oneArrayIncludes };
    export { isOneArray };
    export { toOneArray };
    export { useChangeSubject };
    export { useReloadTrigger };
    export { useAsyncAction };
    export { useMediaContext };
    export { useAudioPlayer };
    export { useBehaviorSubject };
    export { useSubjectValue };
    export { useSubscription };
    export { useSingleton };
    export { useSubject };
    export { useChange };
    export { useModel };
    export { useEntity };
    export { useListEditor };
    export { useCollection };
    export { useMediaStreamBuilder };
    export { useRequestSnackbar };
    export { useOne, useOneTyped };
    export { useDate, useTime };
    export { useConfirm };
    export { usePrompt };
    export { useSnack };
    export { useModal };
    export { useSize };
    export { useList };
    export { useFile };
    import { IOnePublicProps as IOnePublicPropsInternal } from 'react-declarative/model/IOnePublicProps';
    export type IOnePublicProps<Data = IAnything, Field extends IField<Data> = IField<Data>> = IOnePublicPropsInternal<Data, Field>;
    import { ICheckBoxSlot as ICheckBoxSlotInternal } from 'react-declarative/components';
    import { IComboSlot as IComboSlotInternal } from 'react-declarative/components';
    import { IItemsSlot as IItemsSlotInternal } from 'react-declarative/components';
    import { ILineSlot as ILineSlotInternal } from 'react-declarative/components';
    import { IProgressSlot as IProgressSlotInternal } from 'react-declarative/components';
    import { IRadioSlot as IRadioSlotInternal } from 'react-declarative/components';
    import { IDateSlot as IDateSlotInternal } from 'react-declarative/components';
    import { ITimeSlot as ITimeSlotInternal } from 'react-declarative/components';
    import { IFileSlot as IFileSlotInternal } from 'react-declarative/components';
    import { IChooseSlot as IChooseSlotIntetnal } from 'react-declarative/components';
    import { IRatingSlot as IRatingSlotInternal } from 'react-declarative/components';
    import { ISliderSlot as ISliderSlotInternal } from 'react-declarative/components';
    import { ISwitchSlot as ISwitchSlotInternal } from 'react-declarative/components';
    import { ITextSlot as ITextSlotInternal } from 'react-declarative/components';
    import { ICompleteSlot as ICompleteSlotInternal } from 'react-declarative/components';
    import { ITypographySlot as ITypographySlotInternal } from 'react-declarative/components';
    import { IActionAddSlot as IActionAddSlotInternal } from 'react-declarative/components';
    import { IActionFabSlot as IActionFabSlotInternal } from 'react-declarative/components';
    import { IActionMenuSlot as IActionMenuSlotInternal } from 'react-declarative/components';
    import { IBodyRowSlot as IBodyRowSlotInternal } from 'react-declarative/components';
    import { ICheckboxCellSlot as ICheckboxCellSlotInternal } from 'react-declarative/components';
    import { ICommonCellSlot as ICommonCellSlotInternal } from 'react-declarative/components';
    import { IHeadRowSlot as IHeadRowSlotInternal } from 'react-declarative/components';
    import { IActionListSlot as IActionListSlotInternal } from 'react-declarative/components';
    import { IChipListSlot as IChipListSlotInternal } from 'react-declarative/components';
    import { IFilterListSlot as IFilterListSlotInternal } from 'react-declarative/components';
    import { ISearchSlot as ISearchSlotInternal } from 'react-declarative/components';
    import { IOperationListSlot as IOperationListSlotInternal } from 'react-declarative/components';
    import { IPositionActionListSlot as IPositionActionListSlotInternal } from 'react-declarative/model/IListProps';
    export type ICheckBoxSlot = ICheckBoxSlotInternal;
    export type IComboSlot = IComboSlotInternal;
    export type IItemsSlot = IItemsSlotInternal;
    export type ILineSlot = ILineSlotInternal;
    export type IProgressSlot = IProgressSlotInternal;
    export type IRadioSlot = IRadioSlotInternal;
    export type IRatingSlot = IRatingSlotInternal;
    export type ISliderSlot = ISliderSlotInternal;
    export type ISwitchSlot = ISwitchSlotInternal;
    export type ITextSlot = ITextSlotInternal;
    export type IDateSlot = IDateSlotInternal;
    export type ITimeSlot = ITimeSlotInternal;
    export type IFileSlot = IFileSlotInternal;
    export type IChooseSlot = IChooseSlotIntetnal;
    export type ITypographySlot = ITypographySlotInternal;
    export type ICompleteSlot = ICompleteSlotInternal;
    export type IActionAddSlot = IActionAddSlotInternal;
    export type IActionFabSlot = IActionFabSlotInternal;
    export type IActionMenuSlot = IActionMenuSlotInternal;
    export type IBodyRowSlot = IBodyRowSlotInternal;
    export type ICheckboxCellSlot = ICheckboxCellSlotInternal;
    export type ICommonCellSlot = ICommonCellSlotInternal;
    export type IHeadRowSlot = IHeadRowSlotInternal;
    export type IActionListSlot = IActionListSlotInternal;
    export type IChipListSlot = IChipListSlotInternal;
    export type IFilterListSlot = IFilterListSlotInternal;
    export type ISearchSlot = ISearchSlotInternal;
    export type IOperationListSlot = IOperationListSlotInternal;
    export type IPositionActionListSlot = IPositionActionListSlotInternal;
    export { VirtualListBox } from 'react-declarative/components/One/components/common/VirtualListBox';
    export { openBlank } from 'react-declarative/utils/openBlank';
    export { chooseFile } from 'react-declarative/utils/chooseFile';
    export { loadScript } from 'react-declarative/utils/loadScript';
    export { reloadPage } from 'react-declarative/utils/reloadPage';
    export { chooseMultipleFiles } from 'react-declarative/utils/chooseMultipleFiles';
    export { getRouteParams } from 'react-declarative/utils/getRouteParams';
    export { getRouteItem } from 'react-declarative/utils/getRouteItem';
    export { getElementFromXPath } from 'react-declarative/utils/getElementFromXPath';
    export { getXPathFromElement } from 'react-declarative/utils/getXPathFromElement';
    export { arrays } from 'react-declarative/utils/arrays';
    export { objects } from 'react-declarative/utils/objects';
    export { compareArray } from 'react-declarative/utils/compareArray';
    export { isObject } from 'react-declarative/utils/isObject';
    export { FetchError, fetchApi } from 'react-declarative/utils/fetchApi';
    export { createValueProvider } from 'react-declarative/utils/createValueProvider';
    export { createStateProvider } from 'react-declarative/utils/createStateProvider';
    export { formatText } from 'react-declarative/utils/formatText';
    export { roundTicks } from 'react-declarative/utils/roundTicks';
    export { wordForm } from 'react-declarative/utils/wordForm';
    export { singleshot } from 'react-declarative/utils/hof/singleshot';
    export { afterinit } from 'react-declarative/utils/hof/afterinit';
    export { singlerun, Task } from 'react-declarative/utils/hof/singlerun';
    export { cancelable, CANCELED_SYMBOL as CANCELED_PROMISE_SYMBOL } from 'react-declarative/utils/hof/cancelable';
    export { debounce } from 'react-declarative/utils/hof/debounce';
    export { queued } from 'react-declarative/utils/hof/queued';
    export { cached } from 'react-declarative/utils/hof/cached';
    export { sleep } from 'react-declarative/utils/sleep';
    export { BehaviorSubject } from 'react-declarative/utils/rx/BehaviorSubject';
    export { EventEmitter } from 'react-declarative/utils/rx/EventEmitter';
    export { Observer } from 'react-declarative/utils/rx/Observer';
    export { Operator } from 'react-declarative/utils/rx/Operator';
    export { Subject } from 'react-declarative/utils/rx/Subject';
    export { Source } from 'react-declarative/utils/rx/Source';
    export { and } from 'react-declarative/utils/math/and';
    export { or } from 'react-declarative/utils/math/or';
    import TSubjectInternal from 'react-declarative/model/TSubject';
    import TBehaviorSubjectInternal from 'react-declarative/model/TBehaviorSubject';
    import TObserverInternal, { TObservable as TObservableInternal } from 'react-declarative/model/TObserver';
    export type TSubject<Data = void> = TSubjectInternal<Data>;
    export type TObserver<Data = void> = TObserverInternal<Data>;
    export type TObservable<Data = void> = TObservableInternal<Data>;
    export type TBehaviorSubject<Data = unknown> = TBehaviorSubjectInternal<Data>;
    export { getErrorMessage } from 'react-declarative/utils/getErrorMessage';
    import { IEntityAdapter as IEntityAdapterInternal, IEntity as IMvvmEntity } from 'react-declarative/utils/mvvm/Entity';
    import { ICollectionAdapter as ICollectionAdapterInternal } from 'react-declarative/utils/mvvm/Collection';
    import { IModelAdapter as IModelAdapterInternal } from 'react-declarative/utils/mvvm/Model';
    export type ICollectionAdapter<T extends IMvvmEntity = any> = ICollectionAdapterInternal<T>;
    export type IEntityAdapter<T extends IMvvmEntity = any> = IEntityAdapterInternal<T>;
    export type IModelAdapter<T extends {} = any> = IModelAdapterInternal<T>;
    export { Collection, EntityNotFoundError } from 'react-declarative/utils/mvvm/Collection';
    export { Entity } from 'react-declarative/utils/mvvm/Entity';
    export { Model } from 'react-declarative/utils/mvvm/Model';
    export { formatAmount } from 'react-declarative/utils/formatAmount';
    export { createWindowHistory } from 'react-declarative/utils/createWindowHistory';
    export { createLsManager } from 'react-declarative/utils/createLsManager';
    export { createSsManager } from 'react-declarative/utils/createSsManager';
    export { createCustomTag } from 'react-declarative/utils/createCustomTag';
    export { createWebComponent } from 'react-declarative/utils/createWebComponent';
    export { mainColor } from 'react-declarative/utils/mainColor';
    export { cacheSrc } from 'react-declarative/utils/cacheSrc';
    export { parseBase64Json, stringifyBase64Json } from 'react-declarative/utils/base64Json';
    export { parseAsciiParams, serializeAsciiParams } from 'react-declarative/utils/asciiParams';
    export { fromBytes32, toBytes32 } from 'react-declarative/utils/asciiParams';
    import * as datetimeInternal from 'react-declarative/utils/datetime';
    export const typo: {
        thinsp: " ";
        nbsp: " ";
        emdash: "—";
        endash: "–";
        terminator: "\0";
    };
    export const datetime: {
        DATE_PLACEHOLDER: "DD/MM/YYYY";
        TIME_PLACEHOLDER: "HH:MM";
        DATE_EXPR: RegExp;
        TIME_EXPR: RegExp;
        Time: typeof datetimeInternal.Time;
        Date: typeof datetimeInternal.Date;
        parseDate: (date: string) => datetimeInternal.Date | null;
        serializeDate: (date: datetimeInternal.Date) => string | null;
        parseTime: (time: string) => datetimeInternal.Time | null;
        serializeTime: (time: datetimeInternal.Time) => string | null;
        currentDate: () => string | null;
        currentTime: () => string | null;
        timeStamp: (str: string) => number;
        dateStamp: (str: string) => number;
    };
    export { compose } from 'react-declarative/utils/compose';
}

declare module 'react-declarative/model/TypedField' {
    import IManaged, { IManagedShallow } from 'react-declarative/model/IManaged';
    import IEntity from 'react-declarative/model/IEntity';
    import FieldType from 'react-declarative/model/FieldType';
    import IAnything from 'react-declarative/model/IAnything';
    /**
        * Компоновки
        */
    import { IFragmentLayoutProps } from 'react-declarative/components/One/layouts/FragmentLayout';
    import { IDivLayoutProps } from 'react-declarative/components/One/layouts/DivLayout';
    import { IBoxLayoutProps } from 'react-declarative/components/One/layouts/BoxLayout';
    import { ITabsLayoutProps } from 'react-declarative/components/One/layouts/TabsLayout';
    import { ICenterLayoutProps } from 'react-declarative/components/One/layouts/CenterLayout';
    import { IStretchLayoutProps } from 'react-declarative/components/One/layouts/StretchLayout';
    import { IGroupLayoutProps } from 'react-declarative/components/One/layouts/GroupLayout';
    import { IOutlineLayoutProps } from 'react-declarative/components/One/layouts/OutlineLayout';
    import { IPaperLayoutProps } from 'react-declarative/components/One/layouts/PaperLayout';
    import { IExpansionLayoutProps } from 'react-declarative/components/One/layouts/ExpansionLayout';
    import { IHeroLayoutProps } from 'react-declarative/components/One/layouts/HeroLayout';
    import { IConditionLayoutProps } from 'react-declarative/components/One/layouts/ConditionLayout';
    import { ICustomLayoutProps } from 'react-declarative/components/One/layouts/CustomLayout';
    /**
        * Поля ввода
        */
    import { ICheckboxFieldProps } from 'react-declarative/components/One/fields/CheckboxField';
    import { IFileFieldProps } from 'react-declarative/components/One/fields/FileField';
    import { IComboFieldProps } from 'react-declarative/components/One/fields/ComboField';
    import { IComponentFieldProps } from 'react-declarative/components/One/fields/ComponentField';
    import { IItemsFieldProps } from 'react-declarative/components/One/fields/ItemsField';
    import { ILineFieldProps } from 'react-declarative/components/One/fields/LineField';
    import { IProgressFieldProps } from 'react-declarative/components/One/fields/ProgressField';
    import { IRadioFieldProps } from 'react-declarative/components/One/fields/RadioField';
    import { IRatingFieldProps } from 'react-declarative/components/One/fields/RatingField';
    import { ISliderFieldProps } from 'react-declarative/components/One/fields/SliderField';
    import { ISwitchFieldProps } from 'react-declarative/components/One/fields/SwitchField';
    import { ITextFieldProps } from 'react-declarative/components/One/fields/TextField';
    import { IDateFieldProps } from 'react-declarative/components/One/fields/DateField';
    import { ITimeFieldProps } from 'react-declarative/components/One/fields/TimeField';
    import { ICompleteFieldProps } from 'react-declarative/components/One/fields/CompleteField';
    import { ITypographyFieldProps } from 'react-declarative/components/One/fields/TypographyField';
    import { IChooseFieldProps } from 'react-declarative/components/One/fields/ChooseField';
    import { IInitFieldProps } from 'react-declarative/components/One/fields/InitField';
    type Exclude<Data = IAnything, Payload = IAnything> = Omit<IManaged<Data, Payload>, keyof IEntity<Data, Payload>>;
    type TypedFieldFactory<Type extends FieldType, Fields extends {}, Data = IAnything, Payload = IAnything> = {
            [Prop in keyof Omit<Fields, keyof Exclude<Data, Payload>>]?: Fields[Prop];
    } & {
            type: Type;
    };
    type TypedFieldFactoryShallow<Type extends FieldType, Fields extends {}, Data = IAnything, Payload = IAnything> = IManagedShallow<Data, Payload> & TypedFieldFactory<Type, Fields, Data, Payload>;
    type Group<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Group, IGroupLayoutProps<Data, Payload>, Data, Payload>;
    type Custom<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Layout, ICustomLayoutProps<Data, Payload>, Data, Payload>;
    type Paper<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Paper, IPaperLayoutProps<Data, Payload>, Data, Payload>;
    type Outline<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Outline, IOutlineLayoutProps<Data, Payload>, Data, Payload>;
    type Expansion<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Expansion, IExpansionLayoutProps<Data, Payload>, Data, Payload>;
    type Fragment<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Fragment, IFragmentLayoutProps<Data, Payload>, Data, Payload>;
    type Div<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Div, IDivLayoutProps<Data, Payload>, Data, Payload>;
    type Box<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Box, IBoxLayoutProps<Data, Payload>, Data, Payload>;
    type Tabs<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Tabs, ITabsLayoutProps<Data, Payload>, Data, Payload>;
    type Hero<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Hero, IHeroLayoutProps<Data, Payload>, Data, Payload>;
    type Center<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Center, ICenterLayoutProps<Data, Payload>, Data, Payload>;
    type Stretch<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Stretch, IStretchLayoutProps<Data, Payload>, Data, Payload>;
    type Condition<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Condition, IConditionLayoutProps<Data, Payload>, Data, Payload>;
    type Line<Data = IAnything, Payload = IAnything> = TypedFieldFactory<FieldType.Line, ILineFieldProps<Data, Payload>, Data, Payload>;
    type Checkbox<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Checkbox, ICheckboxFieldProps<Data, Payload>, Data, Payload>;
    type Combo<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Combo, IComboFieldProps<Data, Payload>, Data, Payload>;
    type Component<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Component, IComponentFieldProps<Data, Payload>, Data, Payload>;
    type Items<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Items, IItemsFieldProps<Data, Payload>, Data, Payload>;
    type Progress<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Progress, IProgressFieldProps<Data, Payload>, Data, Payload>;
    type Radio<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Radio, IRadioFieldProps<Data, Payload>, Data, Payload>;
    type Rating<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Rating, IRatingFieldProps<Data, Payload>, Data, Payload>;
    type Slider<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Slider, ISliderFieldProps<Data, Payload>, Data, Payload>;
    type Switch<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Switch, ISwitchFieldProps<Data, Payload>, Data, Payload>;
    type Text<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Text, ITextFieldProps<Data, Payload>, Data, Payload>;
    type File<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.File, IFileFieldProps<Data, Payload>, Data, Payload>;
    type Choose<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Choose, IChooseFieldProps<Data, Payload>, Data, Payload>;
    type Init<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Init, IInitFieldProps, Data, Payload>;
    type Date<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Date, IDateFieldProps<Data, Payload>, Data, Payload>;
    type Time<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Time, ITimeFieldProps<Data, Payload>, Data, Payload>;
    type Complete<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Complete, ICompleteFieldProps<Data, Payload>, Data, Payload>;
    type Typography<Data = IAnything, Payload = IAnything> = TypedFieldFactoryShallow<FieldType.Typography, ITypographyFieldProps<Data, Payload>, Data, Payload>;
    /**
        * Логическое ветвление компонентов
        * Typescript type-guard
        */
    export type TypedFieldRegistry<Data = IAnything, Payload = IAnything, Target = any> = Target extends Expansion<Data, Payload> ? Expansion<Data, Payload> : Target extends Group<Data, Payload> ? Group<Data, Payload> : Target extends Paper<Data, Payload> ? Paper<Data, Payload> : Target extends Outline<Data, Payload> ? Outline<Data, Payload> : Target extends Checkbox<Data, Payload> ? Checkbox<Data, Payload> : Target extends Combo<Data, Payload> ? Combo<Data, Payload> : Target extends Component<Data, Payload> ? Component<Data, Payload> : Target extends Items<Data, Payload> ? Items<Data, Payload> : Target extends Line<Data, Payload> ? Line<Data, Payload> : Target extends Progress<Data, Payload> ? Progress<Data, Payload> : Target extends Radio<Data, Payload> ? Radio<Data, Payload> : Target extends Rating<Data, Payload> ? Rating<Data, Payload> : Target extends Slider<Data, Payload> ? Slider<Data, Payload> : Target extends Switch<Data, Payload> ? Switch<Data, Payload> : Target extends Text<Data, Payload> ? Text<Data, Payload> : Target extends File<Data, Payload> ? File<Data, Payload> : Target extends Choose<Data, Payload> ? Choose<Data, Payload> : Target extends Date<Data, Payload> ? Date<Data, Payload> : Target extends Time<Data, Payload> ? Time<Data, Payload> : Target extends Complete<Data, Payload> ? Complete<Data, Payload> : Target extends Typography<Data, Payload> ? Typography<Data, Payload> : Target extends Fragment<Data, Payload> ? Fragment<Data, Payload> : Target extends Div<Data, Payload> ? Div<Data, Payload> : Target extends Custom<Data, Payload> ? Custom<Data, Payload> : Target extends Box<Data, Payload> ? Box<Data, Payload> : Target extends Tabs<Data, Payload> ? Tabs<Data, Payload> : Target extends Center<Data, Payload> ? Center<Data, Payload> : Target extends Stretch<Data, Payload> ? Stretch<Data, Payload> : Target extends Hero<Data, Payload> ? Hero<Data, Payload> : Target extends Condition<Data, Payload> ? Condition<Data, Payload> : Target extends Init<Data, Payload> ? Init<Data, Payload> : never;
    /**
        * IOneProps - генерик, для прикладного программиста мы можем подменить IField
        * на TypedField.  Это  позволит  автоматически  выбрать  интерфейс  props для
        * IntelliSense после указания *type* или методом исключения
        */
    export type TypedField<Data = IAnything, Payload = IAnything> = TypedFieldRegistry<Data, Payload> & {
            name?: string;
            fields?: TypedField<Data, Payload>[];
            child?: TypedField<Data, Payload>;
    };
    export default TypedField;
}

declare module 'react-declarative/model/IField' {
    import * as React from 'react';
    import { ISizeCallback } from 'react-declarative/model/ISize';
    import FieldType from 'react-declarative/model/FieldType';
    import IAnything from 'react-declarative/model/IAnything';
    import { SxProps } from '@mui/material';
    export type Value = string | string[] | number | boolean | null;
    /**
        * Объект поля для прикладного программиста
        */
    export interface IField<Data = IAnything, Payload = IAnything> {
            /**
                * Общие поля. Поле name позволяет задать забор
                * поля из целевого объекта, не нужен для group,
                * expansion и line.
                */
            name?: string;
            /**
                * Флаг, убирающий поле из древа отрисовки. Следует использовать для
                * создания динамических значений полей компонента
                */
            hidden?: boolean;
            /**
                * Исключает группу из DOM древа на телефоне
                */
            phoneHidden?: boolean;
            /**
                * Исключает группу из DOM древа на планшете
                */
            tabletHidden?: boolean;
            /**
                * Исключает группу из DOM древа на компьютере
                */
            desktopHidden?: boolean;
            /**
                * Список бизнес-функций, необходимых для отображения поля
                */
            features?: string[];
            /**
                * Отключает нижний baseline для текущей компоновки
                */
            noBaseline?: boolean;
            /**
                * Флаг, удерживающий подпись текстового поля при пустом
                * значении
                */
            labelShrink?: boolean;
            /**
                * Коллбеки, вызываемый при фокусировке и потере фокуса.
                * Подразумевается изменение формы со стороны прикладного
                * программиста, а не работа с полем ввода
                * (например, обновление ссылки на изображение)
                */
            focus?: (name: string, payload: Payload) => void;
            blur?: (name: string, payload: Payload) => void;
            /**
                * Флаг только на чтение и "круглой окаймовки"
                */
            readonly?: boolean;
            outlined?: boolean;
            /**
                * Передает ссылку при перерисовках
                */
            groupRef?: (element?: HTMLDivElement | null) => void;
            inputRef?: (element?: HTMLInputElement | null) => void;
            /**
                * Автофокус и постоянное отключение поля
                */
            autoFocus?: boolean;
            disabled?: boolean;
            /**
                * Поле, специфичное для RadioField и позволяющее
                * задать значение при выборе элемента кликом
                */
            radioValue?: string;
            /**
                * Поле type для MatTextField
                */
            inputType?: keyof {
                    'text': never;
                    'color': never;
                    'date': never;
                    'email': never;
                    'month': never;
                    'number': never;
                    'password': never;
                    'search': never;
                    'tel': never;
                    'time': never;
                    'url': never;
                    'week': never;
            };
            /**
                * Паттерн для MatTextField
                * (inputmode: 'decimal' и pattern: '[0-9.,]+' добавят запятую на iOS клавиатуре)
                */
            inputPattern?: string;
            /**
                * Поле inputmode для MatTextField
                */
            inputMode?: keyof {
                    'none': never;
                    'text': never;
                    'tel': never;
                    'url': never;
                    'email': never;
                    'numeric': never;
                    'decimal': never;
                    'search': never;
            };
            /**
                * Форматтер, преобразующий пользовательский
                * ввод к нужному шаблону
                */
            inputFormatter?: (input: string) => string;
            /**
                * Шаблонов для форматтера
                */
            inputFormatterTemplate?: string;
            /**
                * Разделитель шаблона форматтера,
                * по дефолту 0
                */
            inputFormatterSymbol?: string;
            /**
                * Разрешенные к вводу символы
                */
            inputFormatterAllowed?: RegExp | ((char: string, idx: number) => boolean);
            /**
                * Замена символов для форматерра, например
                * запятую на точку в числе
                */
            inputFormatterReplace?: (char: string) => string | null;
            inputAutocomplete?: keyof {
                    'new-password': never;
                    'on': never;
                    'off': never;
                    'false': never;
            };
            /**
                * Список вкладок для TabLayout
                */
            tabList?: string[];
            /**
                * Номер активной вкладки по-умолчанию
                */
            tabIndex?: number;
            /**
                * Вариант вывода вкладок для TabLayout
                */
            tabVariant?: "fullWidth" | "standard" | "scrollable";
            /**
                * Цвет вкладок для TabLayout
                */
            tabColor?: "primary" | "secondary";
            /**
                * Позволяет содержимому растягивать высоту блока
                * у TabLayout
                */
            tabKeepFlow?: boolean;
            /**
                * Событие изменения вкладки
                */
            tabChange?: (idx: number) => void;
            /**
                * Отделяет табы отчерком у TabLayout
                */
            tabLine?: boolean;
            /**
                * Закрашивает фон TabLayout в темный цвет
                */
            tabBackground?: boolean;
            /**
                * Делает TextField многострочным, если
                * inputRows больше единицы
                */
            inputRows?: number;
            /**
                * Иконки для MatTextField
                */
            leadingIcon?: React.ComponentType<any>;
            trailingIcon?: React.ComponentType<any>;
            /**
                * При клике на иконку мы можем запросить данные из модального
                * окна, расположенного в коде прикладного программиста. Коллбек
                * получает на вход текущее значение поля и функцию onChange...
                */
            leadingIconClick?: (value: any, payload: Payload, onChange: (v: any) => void) => void;
            trailingIconClick?: (value: any, payload: Payload, onChange: (v: any) => void) => void;
            /**
                * Максимальное число для высчитывания процента
                * (минимальное число всегда ноль)
                */
            maxPercent?: number;
            /**
                * Отключает отчерк у линии
                */
            lineTransparent?: boolean;
            /**
                * Показывает процент числом слева
                */
            showPercentLabel?: boolean;
            /**
                * Внутренние отступы для Paper
                */
            innerPadding?: string;
            /**
                * Превращает FieldType.Paper в FieldType.Outline
                */
            outlinePaper?: boolean;
            /**
                * - Коллбеки, позволяющий перекрасить SliderField.
                * Работают только если заданы все вместе
                * - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            sliderThumbColor?: (v: number) => string;
            sliderTrackColor?: (v: number) => string;
            sliderRailColor?: (v: number) => string;
            /**
                *  - Коллбеки, позволяющие перекрасить ProgressField.
                * Работают только если заданы все вместе
                *  - ВНИМАНИЕ! Потенциально возможна просадка производительности,
                * так как осуществляет рекомпиляцию стилей material-ui
                */
            progressColor?: (v: number) => string;
            progressBarColor?: (v: number) => string;
            /**
                * Поля, специфичные для SliderField
                */
            minSlider?: number;
            maxSlider?: number;
            stepSlider?: number;
            labelFormatSlider?: (v: number) => string | number;
            /**
                * Подсказки для CompleteField
                */
            tip?: string[] | ((value: string, data: Data, payload: Payload) => (string[] | Promise<string[]>));
            /**
                * Поле, позволяющее передавать собственные значения в FieldType.Items и FieldType.Combo
                */
            freeSolo?: boolean;
            /**
                * Позволяет включить виртуализацию для FieldType.List и FieldType.Combo
                */
            virtualListBox?: boolean;
            /**
                * Варианты выбора для ComboField и ItemsField
                */
            itemList?: string[] | ((data: Data, payload: Payload) => string[]) | ((data: Data, payload: Payload) => Promise<string[]>);
            /**
                * Отключает возможность сброса выбора значения для Items и Combo
                */
            noDeselect?: boolean;
            /**
                * Позволяет указать условия перезагрузки списка
                * элементов
                */
            shouldUpdateItemList?: (prevData: Data | null, nextData: Data, payload: Payload) => boolean;
            /**
                * Позволяет перевести значения у ComboField и ItemsField
                * из поле itemList на человеческий, если
                * используются константы
                */
            tr?: ((s: string, data: Data, payload: Payload) => string) | ((s: string, data: Data, payload: Payload) => Promise<string>);
            /**
                * Отключает fulltext фильтр для FieldType.Complete
                */
            keepRaw?: boolean;
            /**
                * Тип поля для логического ветвления при рендеринге
                */
            type: FieldType;
            /**
                * Наименование класса для корневого элемента поля (опционально)
                */
            className?: string;
            /**
                * Стиль корневого элемента для поля (опционально)
                */
            style?: React.CSSProperties;
            /**
                * Заголовок и описание, если возможен вывод у поля
                */
            title?: string;
            description?: string;
            /**
                * placeholder для TextField, ComboField, ItemsField
                */
            placeholder?: string;
            /**
                * Колонки для One. Не используются в List (кроме фильтров).
                * Если указано поле columns, то остальные приравниваются к
                * его значению
                */
            columns?: string;
            phoneColumns?: string;
            tabletColumns?: string;
            desktopColumns?: string;
            /**
                * Специальное поле только для MUI
                */
            sx?: SxProps<any>;
            /**
                * Произвольное количество колонок в строке
                */
            columnsOverride?: string;
            /**
                * Дочерние поля для групп
                */
            fields?: IField<Data>[];
            child?: IField<Data>;
            /**
                * Функция, позволяющая организовать валидацию. Если
                * возвращаемое значение не равно null, считается за
                * ошибкую
                */
            isInvalid?: (v: Data, payload: Payload) => null | string;
            /**
                * Функция, позволяющая скрыть поле, исходя из целевого
                * объекта
                */
            isVisible?: (v: Data, payload: Payload) => boolean;
            /**
                * Функция, позволяющая отключить поле, исходя из целевого
                * объекта
                */
            isDisabled?: (v: Data, payload: Payload) => boolean;
            /**
                * Функция, позволяющая отключить ввод данных в поле, исходя из целевого
                * объекта
                */
            isReadonly?: (v: Data, payload: Payload) => boolean;
            /**
                * Функция, применяемая если значение поля вычисляется динамически.
                * Включает readonly.
                */
            compute?: (v: Data, payload: Payload) => (Promise<Value> | Value);
            /**
                * Инъекция JSX для ComponentField
                */
            element?: React.ComponentType<Data & {
                    onChange: (data: Partial<Data>) => void;
                    _fieldData: Data;
                    _fieldParams: IField;
                    _payload: Payload;
            }>;
            /**
                * Коллбек, вызываемый у поля при не прохождении
                * валидации
                */
            invalidity?: (name: string, e: string, payload: Payload) => void;
            /**
                * Коллбек для 2Way биндингов. Вызывается если поле валидно
                * перед применением нового целевого объекта при исходящем изменении
                */
            map?: (data: Data, payload: Payload) => Data;
            /**
                * Значение по-умолчанию для поля
                */
            defaultValue?: Value;
            /**
                * Позволяет выключить отступ. Можно использовать по аналогии
                * с исключением последней запятой при склеивании массива
                * руками, если раздражает
                */
            fieldRightMargin?: string;
            fieldBottomMargin?: string;
            /**
                * Шрифт для поля Typography
                */
            typoVariant?: keyof {
                    h2: 'h2';
                    h3: 'h3';
                    h4: 'h4';
                    h5: 'h5';
                    h6: 'h6';
                    subtitle1: 'subtitle1';
                    subtitle2: 'subtitle2';
                    body1: 'body1';
                    body2: 'body2';
            };
            /**
                * Поле для ExpansionLayout
                */
            expansionOpened?: boolean;
            /**
                * Коллбек, позволяющий применить собственную компоновку
                */
            customLayout?: (props: React.PropsWithChildren<Data & {
                    onChange: (data: Partial<Data>) => void;
                    _fieldData: Data;
                    _fieldParams: IField;
                    _payload: Payload;
            }>) => React.ReactElement;
            /**
                * Предикат для компоновки Condition
                */
            condition?: ((data: Data, payload: Payload) => boolean) | ((data: Data, payload: Payload) => Promise<boolean>);
            /**
                * mime тип выбираемого файла
                */
            fileAccept?: string;
            /**
                * Функция для загрузки файла на сервер
                */
            upload?: (file: File, data: Data, payload: Payload) => (Promise<string> | string);
            view?: (file: string, data: Data, payload: Payload) => (Promise<void> | void);
            /**
                * Функция для выбора документа из справочника
                * для useSearchModal
                */
            choose?: (data: Data, payload: Payload) => (Promise<string | null> | string | null);
            /**
                * Свойства для компоновки Hero - инструмента настройки отступов
                */
            top?: string | ISizeCallback<Data>;
            phoneTop?: string | ISizeCallback<Data>;
            tabletTop?: string | ISizeCallback<Data>;
            desktopTop?: string | ISizeCallback<Data>;
            left?: string | ISizeCallback<Data>;
            phoneLeft?: string | ISizeCallback<Data>;
            tabletLeft?: string | ISizeCallback<Data>;
            desktopLeft?: string | ISizeCallback<Data>;
            right?: string | ISizeCallback<Data>;
            phoneRight?: string | ISizeCallback<Data>;
            tabletRight?: string | ISizeCallback<Data>;
            desktopRight?: string | ISizeCallback<Data>;
            bottom?: string | ISizeCallback<Data>;
            phoneBottom?: string | ISizeCallback<Data>;
            tabletBottom?: string | ISizeCallback<Data>;
            desktopBottom?: string | ISizeCallback<Data>;
            height?: string | ISizeCallback<Data>;
            phoneHeight?: string | ISizeCallback<Data>;
            tabletHeight?: string | ISizeCallback<Data>;
            desktopHeight?: string | ISizeCallback<Data>;
            minHeight?: string | ISizeCallback<Data>;
            phoneMinHeight?: string | ISizeCallback<Data>;
            tabletMinHeight?: string | ISizeCallback<Data>;
            desktopMinHeight?: string | ISizeCallback<Data>;
            maxHeight?: string | ISizeCallback<Data>;
            phoneMaxHeight?: string | ISizeCallback<Data>;
            tabletMaxHeight?: string | ISizeCallback<Data>;
            desktopMaxHeight?: string | ISizeCallback<Data>;
            width?: string | ISizeCallback<Data>;
            phoneWidth?: string | ISizeCallback<Data>;
            tabletWidth?: string | ISizeCallback<Data>;
            desktopWidth?: string | ISizeCallback<Data>;
            minWidth?: string | ISizeCallback<Data>;
            phoneMinWidth?: string | ISizeCallback<Data>;
            tabletMinWidth?: string | ISizeCallback<Data>;
            desktopMinWidth?: string | ISizeCallback<Data>;
            maxWidth?: string | ISizeCallback<Data>;
            phoneMaxWidth?: string | ISizeCallback<Data>;
            tabletMaxWidth?: string | ISizeCallback<Data>;
            desktopMaxWidth?: string | ISizeCallback<Data>;
            heroOuterStyle?: React.CSSProperties;
            heroOuterPhoneStyle?: React.CSSProperties;
            heroOuterTabletStyle?: React.CSSProperties;
            heroOuterDesktopStyle?: React.CSSProperties;
            heroInnerStyle?: React.CSSProperties;
            heroInnerPhoneStyle?: React.CSSProperties;
            heroInnerTabletStyle?: React.CSSProperties;
            heroInnerDesktopStyle?: React.CSSProperties;
    }
    export default IField;
}

declare module 'react-declarative/model/IEntity' {
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    type exclude = 'defaultValue';
    /**
      * Объект сущность представляет собой поле прикладного
      * программииста, расширенное входным параметром и
      * коллбеком изменения для внутренней организации
      * работы. ВАЖНО - изменение поля влечет изменение
      * всего целевого объекта, следуя паттерну immutable
      */
    export interface IEntity<Data = IAnything, Payload = IAnything> extends Omit<IField<Data, Payload>, exclude> {
        change?: (object: Data, invalidMap: Record<string, boolean>) => void;
        invalidity: (name: string, msg: string, payload: Payload) => void;
        fallback: (e: Error) => void;
        isBaselineAlign: boolean;
        dirty?: boolean;
        prefix: string;
        ready: () => void;
        object: Data;
    }
    export default IEntity;
}

declare module 'react-declarative/model/IManaged' {
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    export type PickProp<T extends {}, P extends keyof T> = T[P];
    export type DeepPartial<T> = {
            [P in keyof T]?: DeepPartial<T[P]>;
    };
    export interface IWrappedLayout<Data = IAnything, Payload = IAnything> {
            isVisible?: PickProp<IField<Data, Payload>, 'isVisible'>;
            isDisabled?: PickProp<IField<Data, Payload>, 'isDisabled'>;
            isReadonly?: PickProp<IField<Data, Payload>, 'isReadonly'>;
            features?: PickProp<IField<Data, Payload>, 'features'>;
            disabled?: PickProp<IField<Data, Payload>, 'disabled'>;
            phoneHidden?: PickProp<IField<Data, Payload>, 'phoneHidden'>;
            tabletHidden?: PickProp<IField<Data, Payload>, 'tabletHidden'>;
            desktopHidden?: PickProp<IField<Data, Payload>, 'desktopHidden'>;
            hidden?: PickProp<IField<Data, Payload>, 'hidden'>;
            noBaseline?: PickProp<IField<Data, Payload>, 'noBaseline'>;
    }
    /**
        * Типизацию компоновки следует вынести отдельно
        */
    export interface IManagedLayout<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data, Payload> {
            columnsOverride?: PickProp<IField<Data, Payload>, 'columnsOverride'>;
            sx?: PickProp<IField<Data, Payload>, 'sx'>;
            columns?: PickProp<IField<Data, Payload>, 'columns'>;
            phoneColumns?: PickProp<IField<Data, Payload>, 'phoneColumns'>;
            tabletColumns?: PickProp<IField<Data, Payload>, 'tabletColumns'>;
            desktopColumns?: PickProp<IField<Data, Payload>, 'desktopColumns'>;
            fieldRightMargin?: PickProp<IField<Data, Payload>, 'fieldRightMargin'>;
            fieldBottomMargin?: PickProp<IField<Data, Payload>, 'fieldBottomMargin'>;
    }
    /**
        * Компонент высшего порядка makeField
        * перехватывает управление над свойствами
        * поля
        */
    export interface IManagedShallow<Data = IAnything, Payload = IAnything> extends IManagedLayout<Data> {
            isDisabled?: PickProp<IField<Data, Payload>, 'isDisabled'>;
            isVisible?: PickProp<IField<Data, Payload>, 'isVisible'>;
            isReadonly?: PickProp<IField<Data, Payload>, 'isReadonly'>;
            isInvalid?: PickProp<IField<Data, Payload>, 'isInvalid'>;
            invalidity?: PickProp<IField<Data, Payload>, 'invalidity'>;
            compute?: PickProp<IField<Data, Payload>, 'compute'>;
            focus?: PickProp<IField<Data, Payload>, 'focus'>;
            blur?: PickProp<IField<Data, Payload>, 'blur'>;
            map?: PickProp<IField<Data, Payload>, 'map'>;
            defaultValue?: PickProp<IField<Data, Payload>, 'defaultValue'>;
            hidden?: PickProp<IField<Data, Payload>, 'hidden'>;
            features?: PickProp<IField<Data, Payload>, 'features'>;
    }
    /**
        * Свойства, не доступные управляемому полю
        */
    type Exclude<Data = IAnything> = {
            object: never;
            type: never;
            focus: never;
            blur: never;
            ready: never;
            check: never;
            change: never;
            name: never;
    } & IManagedShallow<Data>;
    /**
        * Свойства сущности, обернутой в компонент высшего порядка
        * Предоставляется удобная абстракция
        */
    export interface IManaged<Data = IAnything, Value = any> extends Omit<IEntity<Data>, keyof Exclude<Data>> {
            name: string;
            value: Value;
            dirty: boolean;
            disabled: boolean;
            loading: boolean;
            readonly: boolean;
            invalid: string | null;
            object: Data;
            onChange: (v: Value, config?: {
                    skipReadonly?: boolean;
            }) => void;
    }
    export default IManaged;
}

declare module 'react-declarative/model/IColumn' {
    import ColumnType from "react-declarative/model/ColumnType";
    import { IListActionOption, ListHandlerChips, ListHandlerPagination, ListHandlerSortModel } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import { Value } from "react-declarative/model/IField";
    export interface IColumn<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload = IAnything> {
        type: ColumnType;
        field?: string;
        primary?: boolean;
        secondary?: boolean;
        headerName?: string;
        width: string | ((width: number) => string | number);
        minHeight?: string | number;
        phoneOrder?: number;
        phoneHidden?: boolean;
        tabletOrder?: number;
        tabletHidden?: boolean;
        desktopOrder?: number;
        desktopHidden?: boolean;
        columnMenu?: IListActionOption[];
        isVisible?: (params: {
            filterData: FilterData;
            pagination: ListHandlerPagination;
            sortModel: ListHandlerSortModel<RowData>;
            chips: ListHandlerChips<RowData>;
            search: string;
            payload: Payload;
        }) => boolean;
        compute?: (row: RowData, payload: Payload) => Promise<Value> | Value;
        element?: React.ComponentType<RowData>;
        sortable?: boolean;
    }
    export default IColumn;
}

declare module 'react-declarative/model/ITab' {
    import IOption from "react-declarative/model/IOption";
    export interface ITab<T extends any = any> extends Omit<IOption, keyof {
        action: never;
        isVisible: never;
        isDisabled: never;
    }> {
        value: string;
        isVisible?: (payload: T) => Promise<boolean> | boolean;
        isDisabled?: (payload: T) => Promise<boolean> | boolean;
    }
    export default ITab;
}

declare module 'react-declarative/components/List/api/useApiPaginator' {
    import { ListHandler, ListHandlerChips, ListHandlerResult, ListHandlerSortModel, ListHandlerPagination } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    export interface IApiPaginatorParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        origin?: string;
        fetch?: typeof window.fetch;
        requestMap?: (url: URL) => URL;
        removeEmptyFilters?: (data: FilterData) => Partial<FilterData>;
        filterHandler?: (url: URL, filterData: FilterData) => URL;
        chipsHandler?: (url: URL, chips: ListHandlerChips<RowData>) => URL;
        sortHandler?: (url: URL, sort: ListHandlerSortModel<RowData>) => URL;
        searchHandler?: (url: URL, search: string) => URL;
        paginationHandler?: (url: URL, pagination: ListHandlerPagination) => URL;
        onLoadBegin?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        withAbortSignal?: boolean;
        withPagination?: boolean;
        withFilters?: boolean;
        withChips?: boolean;
        withSearch?: boolean;
        withSort?: boolean;
        fetchParams?: () => RequestInit;
        fallback?: (e: Error) => void;
        abortSignal?: AbortSignal;
        responseMap?: <T extends IRowData>(json: RowData[]) => (ListHandlerResult<T> | Promise<ListHandlerResult<T>>);
    }
    export const useApiPaginator: <FilterData extends {} = any, RowData extends IRowData = any>(path: string, { fetch, origin, abortSignal: signal, removeEmptyFilters, fetchParams, fallback, onLoadBegin, onLoadEnd, requestMap, responseMap, filterHandler, chipsHandler, sortHandler, searchHandler, paginationHandler, withAbortSignal, withPagination, withFilters, withSearch, withChips, withSort, }?: IApiPaginatorParams<FilterData, RowData>) => ListHandler<FilterData, RowData, any>;
    export default useApiPaginator;
}

declare module 'react-declarative/components/List/api/useArrayPaginator' {
    import { ListHandler, ListHandlerChips, ListHandlerSortModel, ListHandlerPagination } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import { IState as ILastPaginationState } from 'react-declarative/components/List/api/useLastPagination';
    export interface IArrayPaginatorParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        filterHandler?: (rows: RowData[], filterData: FilterData) => RowData[];
        chipsHandler?: (rows: RowData[], chips: ListHandlerChips<RowData>) => RowData[];
        sortHandler?: (rows: RowData[], sort: ListHandlerSortModel<RowData>) => RowData[];
        paginationHandler?: (rows: RowData[], pagination: ListHandlerPagination) => RowData[];
        responseMap?: (json: RowData[]) => (Record<string, any>[] | Promise<Record<string, any>[]>);
        searchHandler?: (rows: RowData[], search: string) => RowData[];
        compareFn?: (a: RowData, b: RowData, field: keyof RowData) => number;
        removeEmptyFilters?: (data: FilterData) => Partial<FilterData>;
        withPagination?: boolean;
        withFilters?: boolean;
        withChips?: boolean;
        withSort?: boolean;
        withTotal?: boolean;
        withSearch?: boolean;
        searchEntries?: string[];
        searchFilterChars?: string[];
        fallback?: (e: Error) => void;
        onData?: (rows: RowData[], state: ILastPaginationState<FilterData, RowData>) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
    }
    export const useArrayPaginator: <FilterData extends {} = any, RowData extends IRowData = any>(rowsHandler: ListHandler<FilterData, RowData, any>, { searchEntries, searchFilterChars, responseMap, removeEmptyFilters, compareFn, filterHandler, chipsHandler, sortHandler, searchHandler, paginationHandler, withPagination, withFilters, withChips, withSort, withTotal, withSearch, fallback, onLoadStart, onLoadEnd, onData, }?: IArrayPaginatorParams<FilterData, RowData>) => ListHandler<FilterData, RowData, any>;
    export default useArrayPaginator;
}

declare module 'react-declarative/components/One/api/useApiHandler' {
    import { OneHandler } from "react-declarative/model/IOneProps";
    import IAnything from "react-declarative/model/IAnything";
    export interface IApiHandlerParams<Data extends IAnything = IAnything> {
        origin?: string;
        requestMap?: (url: URL) => URL;
        responseMap?: (json: Data) => (Record<string, any> | Promise<Record<string, any>>);
        onLoadBegin?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        withAbortSignal?: boolean;
        fetchParams?: () => RequestInit;
        fallback?: (e: Error) => void;
        abortSignal?: AbortSignal;
        fetch?: typeof window.fetch;
    }
    export const useApiHandler: <Data extends unknown = any>(path: string, { fetch, origin, abortSignal: signal, requestMap, responseMap, onLoadBegin, onLoadEnd, withAbortSignal, fetchParams, fallback, }?: IApiHandlerParams<Data>) => OneHandler<Data, any>;
    export default useApiHandler;
}

declare module 'react-declarative/model/FieldType' {
    export enum FieldType {
        Layout = "custom-layout",
        Switch = "switch-field",
        Line = "line-field",
        File = "file-field",
        Group = "group-layout",
        Paper = "paper-layout",
        Outline = "outline-layout",
        Expansion = "expansion-layout",
        Radio = "radio-field",
        Checkbox = "checkbox-field",
        Text = "text-field",
        Date = "date-field",
        Time = "time-field",
        Progress = "progress-field",
        Component = "component-field",
        Slider = "slider-field",
        Combo = "combo-field",
        Choose = "choose-field",
        Init = "init-field",
        Complete = "complete-field",
        Items = "items-field",
        Rating = "rating-field",
        Typography = "typography-field",
        Fragment = "fragment-layout",
        Div = "div-layout",
        Box = "box-layout",
        Tabs = "tabs-layout",
        Hero = "hero-layout",
        Center = "center-layout",
        Stretch = "stretch-layout",
        Condition = "condition-layout"
    }
    export default FieldType;
}

declare module 'react-declarative/model/ColumnType' {
    export enum ColumnType {
        Text = "text-cell",
        Action = "action-cell",
        CheckBox = "checkbox-cell",
        Compute = "compute-cell",
        Component = "component-cell"
    }
    export default ColumnType;
}

declare module 'react-declarative/model/ActionType' {
    export enum ActionType {
        Add = "add-action",
        Fab = "fab-action",
        Menu = "menu-action"
    }
    export default ActionType;
}

declare module 'react-declarative/model/SelectionMode' {
    export enum SelectionMode {
        Single = "single-selection",
        Multiple = "multiple-selection",
        None = "none-selection"
    }
    export default SelectionMode;
}

declare module 'react-declarative/model/IListApi' {
    import { IListState } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    export interface IListApi<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        reload: (keepPagination?: boolean) => Promise<void>;
        rerender: () => void;
        setLimit: (limit: number) => void;
        setPage: (page: number) => void;
        setRows: (rows: RowData[]) => void;
        setFilterData: (filterData: FilterData) => void;
        getState: () => IListState<FilterData, RowData>;
    }
    export default IListApi;
}

declare module 'react-declarative/model/IOneApi' {
    import IAnything from "react-declarative/model/IAnything";
    export interface IOneApi<Data = IAnything> {
        reload: () => Promise<void>;
        change: (data: Data, initial?: boolean) => void;
        getData: () => Data;
    }
    export default IOneApi;
}

declare module 'react-declarative/model/IListOperation' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import IOption from "react-declarative/model/IOption";
    export interface IListOperation<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isAvailable?: ((rowIds: RowData[], isAll: boolean, payload: Payload) => boolean | Promise<boolean>) | boolean;
    }
    export default IListOperation;
}

declare module 'react-declarative/model/IListRowAction' {
    import IOption from "react-declarative/model/IOption";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    export interface IListRowAction<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (row: RowData, payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (row: RowData, payload: Payload) => Promise<boolean> | boolean;
        enabled?: boolean;
    }
    export default IListRowAction;
}

declare module 'react-declarative/model/IListProps' {
    import { Ref } from 'react';
    import ActionType from 'react-declarative/model/ActionType';
    import SelectionMode from 'react-declarative/model/SelectionMode';
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData, { RowId } from 'react-declarative/model/IRowData';
    import IColumn from 'react-declarative/model/IColumn';
    import IListOperation from 'react-declarative/model/IListOperation';
    import IListRowAction from 'react-declarative/model/IListRowAction';
    import IField from 'react-declarative/model/IField';
    import IListApi from 'react-declarative/model/IListApi';
    import IOption from 'react-declarative/model/IOption';
    import { TSubject } from 'react-declarative/utils/rx/Subject';
    import { ISlotFactoryContext } from 'react-declarative/components/List/components/SlotFactory';
    interface IUpdateOption<RowData extends IRowData = IAnything> extends Omit<IListActionOption<RowData>, keyof {
        label: never;
        icon: never;
    }> {
        action: 'update-now';
        label?: IOption['label'];
        icon?: IOption['icon'];
    }
    interface IResortOption<RowData extends IRowData = IAnything> extends Omit<IListActionOption<RowData>, keyof {
        label: never;
        icon: never;
    }> {
        action: 'resort-action';
        label?: IOption['label'];
        icon?: IOption['icon'];
    }
    interface IDropFiltersOption<RowData extends IRowData = IAnything> extends Omit<IListActionOption<RowData>, keyof {
        label: never;
        icon: never;
    }> {
        action: 'drop-filters';
        label?: IOption['label'];
        icon?: IOption['icon'];
    }
    interface IAddFiltersOption<RowData extends IRowData = IAnything> extends Omit<IListActionOption<RowData>, keyof {
        label: never;
        icon: never;
    }> {
        action: 'add-action';
        label?: IOption['label'];
        icon?: IOption['icon'];
    }
    export interface IListActionOption<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
    }
    export interface IListAction<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> {
        type: ActionType;
        action?: string;
        label?: string;
        isVisible?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
        icon?: React.ComponentType<any>;
        options?: (IListActionOption<RowData> | IUpdateOption<RowData> | IResortOption<RowData> | IDropFiltersOption<RowData> | IAddFiltersOption<RowData>)[];
    }
    export interface IListChip<RowData extends IRowData = IAnything> {
        name: keyof RowData;
        label: string;
        color?: string;
        enabled?: boolean;
    }
    export type ListHandlerResult<RowData extends IRowData = IAnything> = RowData[] | {
        rows: RowData[];
        total: number | null;
    };
    export type ListAvatar = {
        src?: string;
        alt?: string;
    };
    export type ListHandlerPagination = {
        limit: number;
        offset: number;
    };
    export type ListHandlerChips<RowData extends IRowData = IAnything> = Partial<Record<keyof RowData, boolean>>;
    export type ListHandlerSortModel<RowData extends IRowData = IAnything> = IListSortItem<RowData>[];
    export type ListHandler<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload = IAnything> = RowData[] | ((data: FilterData, pagination: ListHandlerPagination, sort: ListHandlerSortModel<RowData>, chips: ListHandlerChips<RowData>, search: string, payload: Payload) => Promise<ListHandlerResult<RowData>> | ListHandlerResult<RowData>);
    export interface IListState<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        initComplete: boolean;
        payload: IAnything;
        filterData: FilterData;
        isChooser: boolean;
        rows: RowData[];
        limit: number;
        offset: number;
        total: number | null;
        loading: boolean;
        search: string;
        filtersCollapsed: boolean;
        sort: ListHandlerSortModel<RowData>;
        chips: ListHandlerChips<RowData>;
        rerender: boolean;
    }
    export interface IListCallbacks<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        handleDefault: () => Promise<void>;
        handleSortModel: (sort: ListHandlerSortModel<RowData>) => void;
        handleFilter: (data: FilterData, keepPagination?: boolean) => void;
        handlePageChange: (page: number) => void;
        handleLimitChange: (limit: number) => void;
        handleRowsChange: (rows: RowData[]) => void;
        handleFiltersCollapsed: (filtersCollapsed: boolean) => void;
        handleChips: (chips: ListHandlerChips) => void;
        handleReload: (keepPagination?: boolean) => Promise<void>;
        handleSearch: (search: string) => void;
        handleRerender: () => void;
        ready: () => void;
    }
    export interface IPositionActionListSlot<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> extends Omit<IListCallbacks<FilterData, RowData>, 'ready'> {
        filterData: Record<string, any>;
        pagination: ListHandlerPagination;
        sortModel: ListHandlerSortModel<RowData>;
        chips: Record<string | number | symbol, boolean | undefined>;
        search: string;
        payload: Payload;
    }
    export interface IListSortItem<RowData extends IRowData = IAnything> {
        field: keyof RowData;
        sort: 'asc' | 'desc';
    }
    export interface IListProps<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> {
        apiRef?: Ref<IListApi<FilterData, RowData>>;
        BeforeActionList?: React.ComponentType<IPositionActionListSlot<FilterData, RowData, Payload>>;
        AfterActionList?: React.ComponentType<IPositionActionListSlot<FilterData, RowData, Payload>>;
        fetchDebounce?: number;
        className?: string;
        style?: React.CSSProperties;
        title?: string;
        filterLabel?: string;
        actions?: IListAction<RowData, Payload>[];
        operations?: IListOperation<RowData, Payload>[];
        limit?: number;
        page?: number;
        sizeByParent?: boolean;
        selectedRows?: RowId[];
        heightRequest?: (height: number) => number;
        widthRequest?: (width: number) => number;
        onSelectedRows?: (rowIds: RowId[], initialChange: boolean) => void;
        onFilterChange?: (data: FilterData) => void;
        onChipsChange?: (data: ListHandlerChips<RowData>) => void;
        onSearchChange?: (search: string) => void;
        onSortModelChange?: (sort: ListHandlerSortModel<RowData>) => void;
        onOperation?: (action: string, selectedRows: RowData[], isAll: boolean, reload: (keepPagination?: boolean) => Promise<void>) => void;
        onRowAction?: (action: string, row: RowData, reload: (keepPagination?: boolean) => Promise<void>) => void;
        onRowClick?: (row: RowData, reload: (keepPagination?: boolean) => Promise<void>) => void;
        onPageChange?: (page: number) => void;
        onColumnAction?: (field: string, action: string, selectedRows: RowData[], reload: (keepPagination?: boolean) => Promise<void>) => void;
        onLimitChange?: (limit: number) => void;
        onLoadStart?: (source: string) => void;
        onLoadEnd?: (isOk: boolean, source: string) => void;
        onAction?: (action: string, selectedRows: RowData[], reload: (keepPagination?: boolean) => Promise<void>) => void;
        columns: IColumn<FilterData, RowData, Payload>[];
        filters?: Field[];
        handler: ListHandler<FilterData, RowData>;
        payload?: Payload | (() => Payload);
        rowMark?: ((row: RowData) => string) | ((row: RowData) => Promise<string>) | string;
        fallback?: (e: Error) => void;
        reloadSubject?: TSubject<void>;
        rerenderSubject?: TSubject<void>;
        setLimitSubject?: TSubject<number>;
        setPageSubject?: TSubject<number>;
        setRowsSubject?: TSubject<RowData[]>;
        setFilterDataSubject?: TSubject<FilterData>;
        rowActions?: IListRowAction[];
        noInitialFilters?: boolean;
        withToggledFilters?: boolean;
        withSingleSort?: boolean;
        withSearch?: boolean;
        withLoader?: boolean;
        withMobile?: boolean;
        withArrowPagination?: boolean;
        withRangePagination?: boolean;
        withInitialLoader?: boolean;
        selectionLabel?: (size: number) => string | Promise<string>;
        rowsPerPage?: Array<number | {
            value: number;
            label: string;
        }>;
        selectionMode?: SelectionMode;
        chips?: IListChip<RowData>[];
        chipData?: ListHandlerChips<RowData>;
        search?: string;
        filterData?: Partial<FilterData>;
        sortModel?: ListHandlerSortModel<RowData>;
        isChooser?: boolean;
        slots?: Partial<ISlotFactoryContext>;
    }
    export default IListProps;
}

declare module 'react-declarative/model/IOption' {
    import IAnything from "react-declarative/model/IAnything";
    export interface IOption<Payload = IAnything> {
        label: string;
        action: string;
        icon?: React.ComponentType<any>;
        isVisible?: (payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (payload: Payload) => Promise<boolean> | boolean;
    }
    export default IOption;
}

declare module 'react-declarative/model/IBreadcrumbsOption' {
    import IOption from "react-declarative/model/IOption";
    export interface IBreadcrumbsOption<T extends any = any> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (payload: T) => (Promise<boolean> | boolean);
        isDisabled?: (payload: T) => (Promise<boolean> | boolean);
    }
    export default IBreadcrumbsOption;
}

declare module 'react-declarative/helpers/serviceManager' {
    type Key = string | symbol;
    export interface IService {
        prefetch?: () => Promise<void>;
        unload?: () => Promise<void>;
    }
    class ServiceManager {
        constructor(_name?: string);
        registerInstance: <T = unknown>(key: Key, inst: T) => void;
        registerCreator: <T = unknown>(key: Key, ctor: () => T) => void;
        inject: <T = unknown>(key: Key, verbose?: boolean) => T;
        prefetch: ((verbose?: any) => Promise<void>) & import("../utils/hof/singleshot").IClearable;
        unload: ((verbose?: any) => Promise<void>) & import("../utils/hof/singleshot").IClearable;
        clear: () => void;
    }
    export const serviceManager: {
        _serviceManager: ServiceManager;
        registerInstance: <T = unknown>(key: Key, inst: T) => void;
        registerCreator: <T_1 = unknown>(key: Key, ctor: () => T_1) => void;
        inject: <T_2 = unknown>(key: Key, verbose?: boolean) => T_2;
        prefetch: (verbose?: boolean) => Promise<void>;
        unload: (verbose?: boolean) => Promise<void>;
        clear: () => void;
    };
    const provide: <T = unknown>(key: Key, ctor: () => T) => void, inject: <T = unknown>(key: Key, verbose?: boolean) => T, prefetch: (verbose?: boolean) => Promise<void>, unload: (verbose?: boolean) => Promise<void>;
    export { provide, inject, prefetch, unload, };
    export const createServiceManager: (name?: string) => {
        serviceManager: ServiceManager;
        provide: <T = unknown>(key: Key, ctor: () => T) => void;
        inject: <T_1 = unknown>(key: Key) => T_1;
        prefetch: () => Promise<void>;
        unload: () => Promise<void>;
        dispose: () => Promise<void>;
    };
    export default createServiceManager;
}

declare module 'react-declarative/helpers/routeManager' {
    import { BrowserHistory, HashHistory, MemoryHistory } from "history";
    import { ISwitchItem } from "react-declarative/utils/getRouteParams";
    import Subject from "react-declarative/utils/rx/Subject";
    export class RouteManager<T extends Record<string, any> = Record<string, any>, I extends ISwitchItem = ISwitchItem> extends Subject<void> {
        get params(): T | null;
        get item(): I | null;
        constructor(routes: I[], history: MemoryHistory | BrowserHistory | HashHistory);
        dispose: () => void;
    }
    export const createRouteParamsManager: <T extends Record<string, any> = Record<string, any>, I extends ISwitchItem = ISwitchItem>(routes: I[], history: MemoryHistory | BrowserHistory | HashHistory) => {
        (): T | null;
        clear: void;
    };
    export const createRouteItemManager: <T extends Record<string, any> = Record<string, any>, I extends ISwitchItem = ISwitchItem>(routes: I[], history: MemoryHistory | BrowserHistory | HashHistory) => {
        (): I | null;
        clear: void;
    };
    export { ISwitchItem };
    export default RouteManager;
}

declare module 'react-declarative/hooks/useRouteItem' {
    import { BrowserHistory, HashHistory, MemoryHistory } from "history";
    import { ISwitchItem } from "react-declarative/helpers/routeManager";
    export const useRouteItem: <T extends Record<string, any> = Record<string, any>, I extends ISwitchItem = ISwitchItem>(routes: I[], history: MemoryHistory | BrowserHistory | HashHistory) => I | null;
    export default useRouteItem;
}

declare module 'react-declarative/hooks/useRouteParams' {
    import { BrowserHistory, HashHistory, MemoryHistory } from "history";
    import { ISwitchItem } from "react-declarative/helpers/routeManager";
    export const useRouteParams: <T extends Record<string, any> = Record<string, any>, I extends ISwitchItem = ISwitchItem>(routes: I[], history: MemoryHistory | BrowserHistory | HashHistory) => T | null;
    export default useRouteParams;
}

declare module 'react-declarative/utils/toRouteUrl' {
    export const toRouteUrl: (template: string, params: object) => string;
    export default toRouteUrl;
}

declare module 'react-declarative/model/IMenuGroup' {
    import * as React from 'react';
    export interface IMenuOption<T extends any = any> {
        name?: string;
        label: string;
        icon?: React.ComponentType<any>;
        lifted?: boolean;
        roles?: string[];
        bold?: boolean;
        visible?: boolean;
        disabled?: boolean;
        getRoles?: ((payload: T) => string[]) | ((payload: T) => Promise<string[]>);
        isBold?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
        isDisabled?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
        isVisible?: ((payload: T) => boolean) | ((payload: T) => Promise<boolean>);
    }
    export interface IMenuGroup<T extends any = any> extends IMenuOption<T> {
        options?: IMenuGroup<T>[];
    }
    export default IMenuGroup;
}

declare module 'react-declarative/model/IOneProps' {
    import React from 'react';
    import { SxProps } from '@mui/material';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import IOneApi from 'react-declarative/model/IOneApi';
    import { TSubject } from 'react-declarative/utils/rx/Subject';
    import { ISlotFactoryContext } from 'react-declarative/components/One/components/SlotFactory';
    type DataOrNull<Data = IAnything> = Data | null;
    export type OneHandler<Data = IAnything, Payload = IAnything> = Data | ((payload: Payload) => DataOrNull<Data>) | ((payload: Payload) => Promise<DataOrNull<Data>>) | null;
    export interface IOneProps<Data = IAnything, Payload = IAnything, Field = IField<Data, Payload>> {
            /**
                * Ссылка на объект API
                */
            apiRef?: React.Ref<IOneApi>;
            /**
                * Эмиттер для запроса данных
                */
            reloadSubject?: TSubject<void>;
            /**
                * Генерирует плейсхолдеры согласно схеме полей целевого объекта
                */
            withNamedPlaceholders?: boolean;
            /**
                * Эмиттер для перезаписи данных. Вызывает change(data, true)
                */
            changeSubject?: TSubject<Data>;
            /**
                * Эмиттер для изменения данных. Вызывает change(data, false)
                */
            updateSubject?: TSubject<Data>;
            /**
                * Фабрика для создания полей пользователя
                */
            createField?: (entity: IEntity<Data>, currentPath: string) => React.ReactElement;
            /**
                * Фабрика для создания компоновок пользователя
                */
            createLayout?: (entity: IEntity<Data>, children: React.ReactNode, currentPath: string) => React.ReactElement;
            /**
                * Класс корневой группы
                */
            className?: string;
            /**
                * Если флаг включен, показываем валидацию до фокусировки по полю
                */
            dirty?: boolean;
            /**
                * Список бизнес-функций, ограничивающий отображение полей
                */
            features?: string[];
            /**
                * Стиль корневой группы
                */
            style?: React.CSSProperties;
            /**
                * SX для корневой группы
                */
            sx?: SxProps;
            /**
                * Позволяет загружать данные в компонент
                */
            handler?: OneHandler<Data, Payload>;
            /**
                * Объект, передающийся в пользовательские
                * поля через контекст
                */
            payload?: Payload | (() => Payload);
            /**
                * Вызывается при ошибке в handler
                */
            fallback?: (e: Error) => void;
            /**
                * Коллбек, вызываемый при не прохождении
                * валидации
                */
            invalidity?: (name: string, msg: string, payload: Payload) => void;
            /**
                * Вызываются при фокусировки по филду
                * в компоненте и потере фокуса
                */
            focus?: (name: string, payload: Payload) => void;
            blur?: (name: string, payload: Payload) => void;
            /**
                * Вызывается, когда все поля успели отрисоваться
                * в первый раз, после появления формы
                */
            ready?: () => void;
            /**
                * Вызывается после изменения и передает измененный
                * объект прикладному программисту
                */
            change?: (Data: Data, initial: boolean) => void;
            /**
                * Массив полей, выводимый в компоненте
                */
            fields: Field[];
            /**
                * Префикс для формирования ключей элементов
                */
            prefix?: string;
            /**
                * Коллбеки управления отображением
                * состоянием загрузки
                */
            loadStart?: (source: string) => void;
            loadEnd?: (isOk: boolean, source: string) => void;
            /**
                * Превращает FieldType.Paper в FieldType.Outline
                */
            outlinePaper?: boolean;
            /**
                * Отключает ввод данных
                */
            readonly?: boolean;
            /**
                * Слоты для полей ввода
                */
            slots?: Partial<ISlotFactoryContext>;
    }
    export default IOneProps;
}

declare module 'react-declarative/hooks/useActualCallback' {
    export const useActualCallback: <T extends (...args: any[]) => any>(run: T, deps?: any[]) => T;
    export default useActualCallback;
}

declare module 'react-declarative/hooks/useActualValue' {
    export const useActualValue: <T = undefined>(value: T) => import("react").MutableRefObject<T>;
    export default useActualValue;
}

declare module 'react-declarative/hooks/useActualState' {
    export const useActualState: <S = undefined>(initialState?: S | (() => S) | undefined) => readonly [import("react").MutableRefObject<S>, import("react").Dispatch<import("react").SetStateAction<S>>];
    export default useActualState;
}

declare module 'react-declarative/hooks/useRenderWaiter' {
    export const useRenderWaiter: (deps?: any[] | undefined, delay?: number) => () => Promise<void>;
    export default useRenderWaiter;
}

declare module 'react-declarative/hooks/useOneArray' {
    export const useOneArray: <T = any>(initialValue?: T[] | (() => T[]) | null | undefined) => readonly [T[], import("react").Dispatch<import("react").SetStateAction<T[] | null>>];
    export const oneArrayIncludes: <T = any>(data: T[] | null, ...items: T[]) => boolean;
    export const isOneArray: <T = any>(data: T[]) => boolean;
    export const toOneArray: <T = any>(data: T[]) => unknown[] | null;
    export default useOneArray;
}

declare module 'react-declarative/hooks/useAsyncAction' {
    interface IParams {
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        throwError?: boolean;
    }
    interface IResult<Data extends any = any, Payload extends any = object> {
        loading: boolean;
        error: boolean;
        execute: (p?: Payload) => (Promise<Data | null>);
    }
    export const useAsyncAction: <Data extends unknown = any, Payload extends unknown = any>(run: (p: Payload) => Data | Promise<Data>, { onLoadStart, onLoadEnd, fallback, throwError, }?: IParams) => IResult<Data, Payload>;
    export default useAsyncAction;
}

declare module 'react-declarative/hooks/useMediaContext' {
    export const useMediaContext: () => {
        isPhone: boolean;
        isTablet: boolean;
        isDesktop: boolean;
        isWide: boolean;
        isMobile: boolean;
    };
    export default useMediaContext;
}

declare module 'react-declarative/hooks/useAudioPlayer' {
    import * as React from 'react';
    interface IParams {
        src: string;
    }
    export const useAudioPlayer: ({ src, }: IParams) => {
        audioRef: React.RefObject<HTMLAudioElement>;
        render: () => JSX.Element;
        play: () => void;
    };
    export default useAudioPlayer;
}

declare module 'react-declarative/hooks/useChangeSubject' {
    import Subject from "react-declarative/utils/rx/Subject";
    export const useChangeSubject: <T = undefined>(value: T) => Subject<T>;
    export default useChangeSubject;
}

declare module 'react-declarative/hooks/useReloadTrigger' {
    export const useReloadTrigger: (autoReload?: number) => {
        reloadTrigger: string;
        doReload: () => void;
    };
    export default useReloadTrigger;
}

declare module 'react-declarative/hooks/useSingleton' {
    export const useSingleton: <T = undefined>(value: T | (() => T)) => T;
    export default useSingleton;
}

declare module 'react-declarative/hooks/useBehaviorSubject' {
    import BehaviorSubject from "react-declarative/utils/rx/BehaviorSubject";
    export const useBehaviorSubject: <Data = any>(data?: Data | null) => BehaviorSubject<Data>;
    export default useBehaviorSubject;
}

declare module 'react-declarative/hooks/useSubscription' {
    export const useSubscription: (fn: () => () => void) => void;
    export default useSubscription;
}

declare module 'react-declarative/hooks/useSubjectValue' {
    import { TSubject } from "react-declarative/utils/rx/Subject";
    export const useSubjectValue: <Data = any>(target: TSubject<Data>) => Data | null;
    export default useSubjectValue;
}

declare module 'react-declarative/hooks/useElementSize' {
    interface ISize {
        height: number;
        width: number;
    }
    interface IParams extends ISize {
        target?: HTMLElement | null;
        closest?: string;
        selector?: string;
        compute?: (size: ISize) => ISize;
    }
    export const useElementSize: <T extends HTMLElement>({ target, closest, selector, height, width, compute, }?: Partial<IParams>) => {
        elementRef: import("react").RefObject<T>;
        size: ISize;
    };
    export default useElementSize;
}

declare module 'react-declarative/hooks/useSubject' {
    import Subject, { TSubject } from "react-declarative/utils/rx/Subject";
    export const useSubject: <Data = any>(target?: TSubject<Data> | null | undefined) => Subject<Data>;
    export default useSubject;
}

declare module 'react-declarative/hooks/useChange' {
    export const useChange: (effect: React.EffectCallback, deps?: import("react").DependencyList, stopWatchByDefault?: boolean) => {
        resetWatcher: () => void;
        beginWatch: () => void;
        stopWatch: () => void;
    };
    export default useChange;
}

declare module 'react-declarative/hooks/useModel' {
    import Model, { IModelAdapter } from "react-declarative/utils/mvvm/Model";
    import Subject from 'react-declarative/utils/rx/Subject';
    export interface IParams<T extends {} = any> {
        initialValue: T | Model<T> | (() => T);
        onChange?: (item: ModelAdapter<T>) => void;
        debounce?: number;
    }
    export class ModelAdapter<T extends {} = any> implements IModelAdapter<T> {
        constructor(_model$: React.MutableRefObject<Model<T>>, _dispose: Subject<true>);
        get data(): T;
        setData: (data: Partial<T> | ((prevData: T) => Partial<T>)) => Promise<void>;
        refresh: () => Promise<void>;
        toObject: () => T;
        toModel: () => Model<T>;
    }
    export const useModel: <T extends {} = any>({ initialValue, onChange, debounce }: IParams<T>) => ModelAdapter<T>;
    export default useModel;
}

declare module 'react-declarative/hooks/useEntity' {
    import Entity, { IEntity, IEntityAdapter } from "react-declarative/utils/mvvm/Entity";
    import Subject from 'react-declarative/utils/rx/Subject';
    export interface IParams<T extends IEntity = any> {
        initialValue: T | Entity<T> | (() => T);
        onChange?: (item: EntityAdapter<T>) => void;
        debounce?: number;
    }
    export class EntityAdapter<T extends IEntity = any> implements IEntityAdapter<T> {
        constructor(_entity$: React.MutableRefObject<Entity<T>>, _dispose: Subject<true>);
        get data(): T;
        get id(): string | number;
        setData: (data: Partial<T> | ((prevData: T) => Partial<T>)) => Promise<void>;
        refresh: () => Promise<void>;
        toObject: () => T;
        toEntity: () => Entity<T>;
    }
    export const useEntity: <T extends IEntity = any>({ initialValue, onChange, debounce, }: IParams<T>) => EntityAdapter<T>;
    export default useEntity;
}

declare module 'react-declarative/hooks/useListEditor' {
    import React from "react";
    type RowId = number;
    export const useListEditor: <Data extends unknown = undefined>(renderItem: (id: RowId, item: Data) => React.ReactElement, { initialValue, onChange, }: {
        initialValue?: Data[] | undefined;
        onChange?: ((items: Data[]) => void) | undefined;
    }) => {
        onAddItem: (data: Data) => number;
        onUpdateItem: (id: RowId, data: Data) => void;
        onRemoveItem: (id: RowId) => void;
        items: Data[];
        render: () => JSX.Element;
    };
    export default useListEditor;
}

declare module 'react-declarative/hooks/useMediaStreamBuilder' {
    interface IParams {
        fallback?: (e: Error) => void;
        onChange?: (stream: MediaStream, ids: {
            audioCaptureId: string;
            cameraCaptureId: string;
            screenCaptureId: string;
        }) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        throwError?: boolean;
        compressFrame?: number;
        maxFps?: number;
        withInitialVideo?: boolean;
        withInitialAudio?: boolean;
    }
    export const useMediaStreamBuilder: ({ fallback, onLoadStart, onLoadEnd, onChange, throwError, withInitialVideo, withInitialAudio, compressFrame, maxFps, }?: IParams) => {
        mediaStream: MediaStream;
        hasAudioCapture: boolean;
        hasCameraCapture: boolean;
        hasScreenCapture: boolean;
        requestScreenCapture: () => Promise<void>;
        requestCameraCapture: () => Promise<void>;
        requestAudioCapture: () => Promise<void>;
        stopScreenCapture: () => void;
        stopCameraCapture: () => void;
        stopAudioCapture: () => void;
    };
    export default useMediaStreamBuilder;
}

declare module 'react-declarative/hooks/useCollection' {
    import Subject from 'react-declarative/utils/rx/Subject';
    import Collection, { ICollectionAdapter } from "react-declarative/utils/mvvm/Collection";
    import Entity, { IEntity, IEntityAdapter } from "react-declarative/utils/mvvm/Entity";
    export interface IParams<T extends IEntity = any> {
        initialValue?: T[] | (() => T[]) | Entity<T>[] | Collection<T>;
        onChange?: (item: CollectionAdapter<T>, target: CollectionEntityAdapter<T> | null) => void;
        debounce?: number;
    }
    export class CollectionEntityAdapter<T extends IEntity = any> implements IEntityAdapter<T> {
        readonly id: IEntity['id'];
        constructor(id: IEntity['id'], _collection$: React.MutableRefObject<Collection<T>>, _dispose: Subject<true>);
        get data(): T;
        setData: (data: Partial<T> | ((prevData: T) => Partial<T>)) => Promise<void>;
        refresh: () => Promise<void>;
        toObject: () => T;
        toEntity: () => Entity<T>;
    }
    export class CollectionAdapter<T extends IEntity = any> implements ICollectionAdapter<T> {
        constructor(_collection$: React.MutableRefObject<Collection<T>>, _dispose: Subject<true>);
        get ids(): (string | number)[];
        get lastIdx(): number;
        get items(): CollectionEntityAdapter<T>[];
        get isEmpty(): boolean;
        setData: (items: T[]) => Promise<void>;
        refresh: () => Promise<void>;
        clear: () => Promise<void>;
        push: (...items: (T[] | T[][])) => Promise<void>;
        upsert: (...items: (T[] | T[][])) => Promise<void>;
        remove: (entity: IEntity) => Promise<void>;
        removeById: (id: string | number) => Promise<void>;
        removeAll: () => Promise<void>;
        findById: (id: string | number) => CollectionEntityAdapter<T>;
        some: (fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean) => boolean;
        forEach: (fn: (value: CollectionEntityAdapter<T>, idx: number) => void) => void;
        find: (fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean) => CollectionEntityAdapter<T> | undefined;
        filter: (fn: (value: CollectionEntityAdapter<T>, idx: number) => boolean) => CollectionEntityAdapter<T>[];
        map: <V extends unknown = any>(fn: (value: CollectionEntityAdapter<T>, idx: number) => V) => V[];
        toArray: () => T[];
        toCollection: () => Collection<T>;
    }
    export const useCollection: <T extends IEntity = any>({ initialValue, onChange, debounce, }?: IParams<T>) => CollectionAdapter<T>;
    export default useCollection;
}

declare module 'react-declarative/hooks/useRequestSnackbar' {
    export interface IParams {
        noSnackOnOk?: boolean;
        message?: string;
        loading: boolean | null;
        error: string | null;
        delay?: number;
        onClose?: (isOk: boolean) => void;
    }
    export const useRequestSnackbar: ({ message, noSnackOnOk, loading, error, delay, onClose, }: IParams) => {
        beginWatch: () => void;
        resetWatcher: () => void;
        stopWatch: () => void;
        render: () => JSX.Element;
    };
    export default useRequestSnackbar;
}

declare module 'react-declarative/components/ModalProvider' {
    export * from 'react-declarative/components/ModalProvider/ModalProvider';
    export { default } from 'react-declarative/components/ModalProvider/ModalProvider';
}

declare module 'react-declarative/components/SnackProvider' {
    export * from 'react-declarative/components/SnackProvider/SnackProvider';
    export { default } from 'react-declarative/components/SnackProvider/SnackProvider';
}

declare module 'react-declarative/components/SizeProvider' {
    export * from 'react-declarative/components/SizeProvider/SizeProvider';
    export { default } from 'react-declarative/components/SizeProvider/SizeProvider';
}

declare module 'react-declarative/hooks/useList' {
    import IColumn from 'react-declarative/model/IColumn';
    import IRowData from 'react-declarative/model/IRowData';
    import IAnything from 'react-declarative/model/IAnything';
    import IListProps from 'react-declarative/model/IListProps';
    import SelectionMode from 'react-declarative/model/SelectionMode';
    import { IListPickerProps } from 'react-declarative/components/common/ListPicker';
    type Fn<Data = IAnything> = (d: Data[] | null) => void;
    interface IParams<RowData extends IRowData = IAnything> extends Omit<IListPickerProps<RowData>, keyof {
        onChange: never;
        selectionMode: never;
        selectedRows: never;
        minHeight: never;
        minWidth: never;
        title: never;
        columns: never;
        open: never;
    }> {
        selectionMode?: SelectionMode.Single | SelectionMode.Multiple;
        selectedRows?: IListProps<RowData>['selectedRows'];
        columns: Omit<IColumn<RowData>, keyof {
            headerName: never;
            width: never;
        }>[];
        minHeight?: number;
        minWidth?: number;
        title?: string;
    }
    export const useList: <RowData extends IRowData = any>({ handler, columns, rowActions, selectionMode, title: titleDefault, minWidth: minWidthDefault, minHeight: minHeightDefault, selectedRows: selectedRowsDefault, }: IParams<RowData>) => ({ title, minWidth, minHeight, selectedRows, }?: Partial<IParams<RowData>>) => {
        then(onData: Fn): void;
    };
    export default useList;
}

declare module 'react-declarative/hooks/useFile' {
    interface IParams {
        accept?: string;
        onSelect?: (...files: File[]) => void;
    }
    export const useFile: ({ accept, onSelect, }: IParams) => {
        render: () => JSX.Element;
        open: () => void;
    };
    export default useFile;
}

declare module 'react-declarative/hooks/useConfirm' {
    type Fn = (result: boolean) => void;
    interface IParams {
        title?: string;
        msg?: string;
        canCancel?: boolean;
    }
    export const useConfirm: ({ title: defaultTitle, msg: defaultMsg, canCancel: defaultCanCancel, }?: IParams) => ({ canCancel, title, msg, }?: Partial<IParams>) => {
        then(onData: Fn): void;
    };
    export default useConfirm;
}

declare module 'react-declarative/hooks/usePrompt' {
    type Fn = (result: string | null) => void;
    interface IParams {
        title?: string;
        value?: string;
        placeholder?: string;
        canCancel?: boolean;
    }
    export const usePrompt: ({ title: defaultTitle, value: defaultValue, placeholder: defaultPlaceholder, canCancel: defaultCanCancel, }?: IParams) => ({ canCancel, title, placeholder, value, }?: Partial<IParams>) => {
        then(onData: Fn): void;
    };
    export default usePrompt;
}

declare module 'react-declarative/hooks/useDate' {
    import dayjs from 'dayjs';
    type Fn = (d: dayjs.Dayjs | null) => void;
    export const useDate: () => () => {
        then(onData: Fn): void;
    };
    export default useDate;
}

declare module 'react-declarative/hooks/useTime' {
    import dayjs from 'dayjs';
    type Fn = (d: dayjs.Dayjs | null) => void;
    export const useTime: () => () => {
        then(onData: Fn): void;
    };
    export default useTime;
}

declare module 'react-declarative/hooks/useOne' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import TypedField from 'react-declarative/model/TypedField';
    import IOneProps, { OneHandler } from 'react-declarative/model/IOneProps';
    type Fn<Data = IAnything> = (d: Data | null) => void;
    interface IParams<Data extends IAnything = IAnything, Payload = IAnything, Field = IField<Data, Payload>> {
        fields: Field[];
        title?: string;
        handler?: OneHandler<Data, Payload>;
        payload?: IOneProps<Data, Payload, Field>['payload'];
        waitForChangesDelay?: number;
    }
    export const useOne: <Data extends unknown = any, Payload = any, Field = IField<Data, Payload>>({ fields, title: defaultTitle, handler: defaultHandler, payload: defaultPayload, waitForChangesDelay, }: IParams<Data, Payload, Field>) => ({ handler, payload, title, }?: Partial<IParams<Data, Payload, Field>>) => {
        then(onData: Fn): void;
    };
    export const useOneTyped: <Data extends unknown = any, Payload = any>(params: IParams<Data, Payload, TypedField<Data, Payload>>) => ({ handler, payload, title, }?: Partial<IParams<Data, Payload, TypedField<Data, Payload>>>) => {
        then(onData: Fn): void;
    };
    export default useOne;
}

declare module 'react-declarative/hooks/useSearchParams' {
    export type Value = string | number | boolean | null | undefined;
    export const useSearchParams: <T = Record<string, Value>>(defaultValues?: Partial<T> | (() => Partial<T>)) => T;
    export default useSearchParams;
}

declare module 'react-declarative/hooks/useSearchState' {
    import { Value } from 'react-declarative/hooks/useSearchParams';
    export const useSearchState: <T extends Record<string, Value>>(defaultValues?: Partial<T> | (() => Partial<T>)) => readonly [T, import("react").Dispatch<import("react").SetStateAction<T>>];
    export default useSearchState;
}

declare module 'react-declarative/model/IAnything' {
    export type IAnything = any;
    export default IAnything;
}

declare module 'react-declarative/model/IRowData' {
    export interface IRowData {
        id: RowId;
    }
    export type RowId = string | number;
    export default IRowData;
}

declare module 'react-declarative/components' {
    export * from 'react-declarative/components/One';
    export * from 'react-declarative/components/Dot';
    export * from 'react-declarative/components/List';
    export * from 'react-declarative/components/NoSsr';
    export * from 'react-declarative/components/Switch';
    export * from 'react-declarative/components/Center';
    export * from 'react-declarative/components/Square';
    export * from 'react-declarative/components/Scaffold';
    export * from 'react-declarative/components/Scaffold2';
    export * from 'react-declarative/components/Translate';
    export * from 'react-declarative/components/Breadcrumbs';
    export * from 'react-declarative/components/Breadcrumbs2';
    export * from 'react-declarative/components/ErrorBoundary';
    export * from 'react-declarative/components/ActionMenu';
    export * from 'react-declarative/components/ActionButton';
    export * from 'react-declarative/components/ActionStopIcon';
    export * from 'react-declarative/components/ActionFab';
    export * from 'react-declarative/components/ActionFilter';
    export * from 'react-declarative/components/ActionTrigger';
    export * from 'react-declarative/components/ActionIcon';
    export * from 'react-declarative/components/ActionToggle';
    export * from 'react-declarative/components/ActionModal';
    export * from 'react-declarative/components/SearchModal';
    export * from 'react-declarative/components/SizeProvider';
    export * from 'react-declarative/components/ModalProvider';
    export * from 'react-declarative/components/SnackProvider';
    export * from 'react-declarative/components/ConstraintView';
    export * from 'react-declarative/components/ScrollTopView';
    export * from 'react-declarative/components/OutletView';
    export * from 'react-declarative/components/AlertView';
    export * from 'react-declarative/components/DragDropView';
    export * from 'react-declarative/components/FilesView';
    export * from 'react-declarative/components/ScrollView';
    export * from 'react-declarative/components/ScaleView';
    export * from 'react-declarative/components/AutoSizer';
    export * from 'react-declarative/components/FadeView';
    export * from 'react-declarative/components/TabsView';
    export * from 'react-declarative/components/FetchView';
    export * from 'react-declarative/components/WaitView';
    export * from 'react-declarative/components/PingView';
    export * from 'react-declarative/components/HtmlView';
    export * from 'react-declarative/components/OfflineView';
    export * from 'react-declarative/components/RevealView';
    export * from 'react-declarative/components/SecretView';
    export * from 'react-declarative/components/PortalView';
    export * from 'react-declarative/components/RecordView';
    export * from 'react-declarative/components/ErrorView';
    export * from 'react-declarative/components/AuthView';
    export * from 'react-declarative/components/CardView';
    export * from 'react-declarative/components/ReloadView';
    export * from 'react-declarative/components/InfiniteView';
    export * from 'react-declarative/components/VirtualView';
    export * from 'react-declarative/components/LoaderView';
    export * from 'react-declarative/components/FeatureView';
    export * from 'react-declarative/components/DocumentView';
    export * from 'react-declarative/components/ImageView';
    export * from 'react-declarative/components/TreeView';
    export * from 'react-declarative/components/Grid';
    export * from 'react-declarative/components/Search';
    export * from 'react-declarative/components/Spinner';
    export * from 'react-declarative/components/Async';
    export * from 'react-declarative/components/Copy';
    export * from 'react-declarative/components/If';
    export * from 'react-declarative/components/Countdown';
    export * from 'react-declarative/components/Chip';
    export * from 'react-declarative/components/ScrollAdjust';
    export * from 'react-declarative/components/MasterDetail';
}

declare module 'react-declarative/components/CardView' {
    export * from 'react-declarative/components/CardView/CardView';
    export * from 'react-declarative/components/CardView/model/ICardViewAction';
    export * from 'react-declarative/components/CardView/model/ICardViewOperation';
    export { IItemData as ICardViewItemData } from 'react-declarative/components/CardView/model/IItemData';
    export { default } from 'react-declarative/components/CardView/CardView';
}

declare module 'react-declarative/components/FeatureView' {
    export * from 'react-declarative/components/FeatureView/FeatureView';
    export * from 'react-declarative/components/FeatureView/model/IFeature';
    export * from 'react-declarative/components/FeatureView/model/IFeatureGroup';
    export { default } from 'react-declarative/components/FeatureView/FeatureView';
}

declare module 'react-declarative/components/RecordView' {
    export * from 'react-declarative/components/RecordView/RecordView';
    export { excelExport as recordToExcelExport } from 'react-declarative/components/RecordView/helpers/excelExport';
    export { default } from 'react-declarative/components/RecordView/RecordView';
}

declare module 'react-declarative/components/Scaffold2' {
    export * from 'react-declarative/components/Scaffold2/Scaffold2';
    export * from 'react-declarative/components/Scaffold2/model/IScaffold2Action';
    export * from 'react-declarative/components/Scaffold2/model/IScaffold2Group';
    export * from 'react-declarative/components/Scaffold2/model/IScaffold2Option';
    export * from 'react-declarative/components/Scaffold2/model/IScaffold2Tab';
    export { default } from 'react-declarative/components/Scaffold2/Scaffold2';
}

declare module 'react-declarative/components/Breadcrumbs2' {
    export * from 'react-declarative/components/Breadcrumbs2/Breadcrumbs2';
    export * from 'react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type';
    export * from 'react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action';
    export * from 'react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option';
    export { default } from 'react-declarative/components/Breadcrumbs2/Breadcrumbs2';
}

declare module 'react-declarative/model/IOnePublicProps' {
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    import IOneProps from "react-declarative/model/IOneProps";
    export interface IOnePublicProps<Data = IAnything, Payload = IAnything, Field = IField<Data>> extends Omit<IOneProps<Data, Payload, Field>, keyof {
        features: never;
    }> {
        onFocus?: IOneProps<Data, Field>['focus'];
        onBlur?: IOneProps<Data, Field>['blur'];
        onReady?: IOneProps<Data, Field>['ready'];
        onChange?: IOneProps<Data, Field>['change'];
        onInvalid?: IOneProps<Data, Field>['invalidity'];
        onLoadStart?: IOneProps<Data, Field>['loadStart'];
        onLoadEnd?: IOneProps<Data, Field>['loadEnd'];
        features?: string[] | (() => Record<string, boolean>);
    }
    export default IOnePublicProps;
}

declare module 'react-declarative/components/One/components/common/VirtualListBox' {
    import * as React from 'react';
    interface IVirtualListBoxProps extends React.HTMLAttributes<HTMLElement> {
        children?: React.ReactNode;
    }
    export const VirtualListBox: React.ForwardRefExoticComponent<IVirtualListBoxProps & React.RefAttributes<HTMLDivElement>>;
    export default VirtualListBox;
}

declare module 'react-declarative/utils/openBlank' {
    export const openBlank: (url: string) => void;
    export default openBlank;
}

declare module 'react-declarative/utils/chooseFile' {
    export const chooseFile: (accept?: string | undefined) => Promise<File | null>;
    export default chooseFile;
}

declare module 'react-declarative/utils/loadScript' {
    export const loadScript: (src: string, async?: boolean) => Promise<void>;
    export default loadScript;
}

declare module 'react-declarative/utils/reloadPage' {
    export const reloadPage: () => void;
    export default reloadPage;
}

declare module 'react-declarative/utils/chooseMultipleFiles' {
    export const chooseMultipleFiles: (accept?: string | undefined) => Promise<File[] | null>;
    export default chooseMultipleFiles;
}

declare module 'react-declarative/utils/getRouteParams' {
    export interface ISwitchItem {
        path: string;
    }
    export const getRouteParams: <T = Record<string, any>>(routes: ISwitchItem[], pathname: string) => T | null;
    export default getRouteParams;
}

declare module 'react-declarative/utils/getRouteItem' {
    import { ISwitchItem } from 'react-declarative/utils/getRouteParams';
    export const getRouteItem: <T extends ISwitchItem = ISwitchItem>(routes: T[], pathname: string) => T | null;
    export default getRouteItem;
}

declare module 'react-declarative/utils/getElementFromXPath' {
    export const getElementFromXPath: (xpath: string) => Node | null;
    export default getElementFromXPath;
}

declare module 'react-declarative/utils/getXPathFromElement' {
    export const getXPathFromElement: (element: HTMLElement) => string | null;
    export default getXPathFromElement;
}

declare module 'react-declarative/utils/arrays' {
    export const arrays: (root: any, forceArray?: boolean) => any;
    export default arrays;
}

declare module 'react-declarative/utils/objects' {
    export const objects: (root: any) => any;
    export default objects;
}

declare module 'react-declarative/utils/compareArray' {
    export const compareArray: (a_arr: any, b_arr: any) => boolean;
    export default compareArray;
}

declare module 'react-declarative/utils/isObject' {
    export const isObject: (obj: any) => boolean;
    export default isObject;
}

declare module 'react-declarative/utils/fetchApi' {
    export class FetchError extends Error {
        readonly originalError: any;
        readonly request: RequestInfo;
        readonly response: Response | undefined;
        constructor(originalError: any, request: RequestInfo, response: Response | undefined);
    }
    export const fetchApi: <T = any>(input: RequestInfo | URL, init?: RequestInit | undefined) => Promise<T>;
    export default fetchApi;
}

declare module 'react-declarative/utils/createValueProvider' {
    import React from 'react';
    export const createValueProvider: <P extends unknown = object>() => readonly [({ children, payload, }: {
        children: React.ReactNode;
        payload: P;
    }) => JSX.Element, () => P];
    export default createValueProvider;
}

declare module 'react-declarative/utils/createStateProvider' {
    import * as React from 'react';
    export const createStateProvider: <S extends unknown>() => readonly [({ children, initialState, }: {
        children: React.ReactNode;
        initialState: S | (() => S);
    }) => JSX.Element, () => readonly [S, (state: S | ((prevState: S) => S)) => void]];
}

declare module 'react-declarative/utils/formatText' {
    interface IParams {
        symbol?: string;
        allowed?: RegExp | ((char: string, idx: number) => boolean);
        replace?: (char: string) => string | null;
    }
    export const formatText: (raw: string, template: string, { symbol, allowed, replace, }?: IParams) => string;
    export default formatText;
}

declare module 'react-declarative/utils/roundTicks' {
    export const roundTicks: (price: number, tickSize?: number) => string;
    export default roundTicks;
}

declare module 'react-declarative/utils/wordForm' {
    interface IWordForm {
        one: string;
        two?: string;
        many: string;
    }
    export const wordForm: (value: number, { one, many, two, }: IWordForm) => string;
    export default wordForm;
}

declare module 'react-declarative/utils/hof/singleshot' {
    export interface IClearable {
        clear: () => void;
    }
    export const singleshot: <T extends (...args: any[]) => any>(run: T) => T & IClearable;
    export default singleshot;
}

declare module 'react-declarative/utils/hof/afterinit' {
    export interface IWrappedFn<T extends any = any, P extends any[] = any> {
        (...args: P): Promise<T>;
        clear(): void;
    }
    export const afterinit: <T extends unknown = any, P extends any[] = any[]>(run: (...args: P) => Promise<T>) => IWrappedFn<T, P>;
    export default afterinit;
}

declare module 'react-declarative/utils/hof/singlerun' {
    export interface IClearable {
        clear: () => void;
    }
    export class Task {
        readonly target: Promise<any>;
        get status(): "pending" | "fulfilled" | "rejected";
        constructor(target: Promise<any>);
    }
    export const singlerun: <T extends (...args: any[]) => any>(run: T) => T & IClearable;
    export default singlerun;
}

declare module 'react-declarative/utils/hof/cancelable' {
    export interface IWrappedFn<T extends any = any, P extends any[] = any> {
        (...args: P): Promise<T | typeof CANCELED_SYMBOL>;
        cancel(): void;
    }
    export const CANCELED_SYMBOL: unique symbol;
    export const cancelable: <T extends unknown = any, P extends any[] = any[]>(promise: (...args: P) => Promise<T>) => IWrappedFn<T, P>;
    export default cancelable;
}

declare module 'react-declarative/utils/hof/debounce' {
    export interface IClearable {
        clear: () => void;
    }
    export const debounce: <T extends (...args: any[]) => any>(run: T, delay?: number) => T & IClearable;
    export default debounce;
}

declare module 'react-declarative/utils/hof/queued' {
    export interface IWrappedFn<T extends any = any, P extends any[] = any> {
        (...args: P): Promise<T>;
        clear(): void;
    }
    export const queued: <T extends unknown = any, P extends any[] = any[]>(promise: (...args: P) => Promise<T>) => IWrappedFn<T, P>;
    export default queued;
}

declare module 'react-declarative/utils/hof/cached' {
    import { IClearable } from 'react-declarative/utils/hof/singleshot';
    export const cached: <T extends (...args: any[]) => any>(run: T) => T & IClearable;
    export default cached;
}

declare module 'react-declarative/utils/sleep' {
    export const sleep: (timeout?: number) => Promise<void>;
    export default sleep;
}

declare module 'react-declarative/utils/rx/BehaviorSubject' {
    import Subject from "react-declarative/utils/rx/Subject";
    import TBehaviorSubject from "react-declarative/model/TBehaviorSubject";
    import TObserver, { TObservable } from "react-declarative/model/TObserver";
    export class BehaviorSubject<Data = any> extends Subject<Data> implements TBehaviorSubject<Data>, TObservable<Data> {
        constructor(_data?: Data | null);
        get data(): Data | null;
        next: (data: Data) => Promise<void>;
        toObserver: () => TObserver<Data>;
    }
    export { TBehaviorSubject };
    export default BehaviorSubject;
}

declare module 'react-declarative/utils/rx/EventEmitter' {
    type EventKey = string | symbol;
    type Function = (...args: any[]) => void;
    export class EventEmitter {
        get hasListeners(): boolean;
        getListeners: (key: EventKey) => Function[];
        subscribe: (eventName: EventKey, callback: Function) => void;
        unsubscribe: (eventName: EventKey, callback: Function) => void;
        unsubscribeAll: () => void;
        once: (eventName: EventKey, callback: Function) => () => void;
        emit: (eventName: EventKey, ...args: any[]) => Promise<void>;
    }
    export default EventEmitter;
}

declare module 'react-declarative/utils/rx/Observer' {
    import TObserver from "react-declarative/model/TObserver";
    export const LISTEN_CONNECT: unique symbol;
    export const LISTEN_DISCONNECT: unique symbol;
    type Fn = (...args: any[]) => void;
    export class Observer<Data = any> implements TObserver<Data> {
        get isShared(): boolean;
        get hasListeners(): boolean;
        constructor(dispose: Fn);
        [LISTEN_CONNECT](fn: () => void): void;
        [LISTEN_DISCONNECT](fn: () => void): void;
        map: <T = any>(callbackfn: (value: Data) => T) => Observer<T>;
        flatMap: <T = any>(callbackfn: (value: Data) => T[]) => Observer<T>;
        operator: <T = any>(callbackfn: (target: TObserver<Data>) => TObserver<T>) => TObserver<T>;
        reduce: <T = any>(callbackfn: (acm: T, cur: Data) => T, begin: T) => Observer<T>;
        split: () => Observer<ReadonlyArray<FlatArray<Data[], 20>>>;
        mapAsync: <T = any>(callbackfn: (value: Data) => Promise<T>, fallbackfn?: ((e: Error) => void) | undefined) => Observer<T>;
        filter: (callbackfn: (value: Data) => boolean) => Observer<Data>;
        tap: (callbackfn: (value: Data) => void) => Observer<Data>;
        debounce: (delay?: number | undefined) => Observer<Data>;
        emit: (data: Data) => void;
        connect: (callbackfn: (value: Data) => void) => (...args: any[]) => any;
        once: (callbackfn: (value: Data) => void) => Fn;
        share: () => this;
        repeat: (interval?: number) => Observer<Data>;
        merge: <T = any>(observer: TObserver<T>) => Observer<Data | T>;
        unsubscribe: () => void;
        toPromise: () => Promise<Data>;
    }
    export { TObserver };
    export default Observer;
}

declare module 'react-declarative/utils/rx/Operator' {
    export class Operator {
        static take: <T = any>(count: number) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<T>;
        static skip: <T = any>(the: number) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<T>;
        static pair: <T = any>(by?: number) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<[T, T]>;
        static group: <T = any>(by: number) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<T[]>;
        static strideTricks: <T = any>(strideSize: number, step?: number) => (target: import("./Observer").TObserver<T[]>) => import("./Observer").TObserver<T[][]>;
        static distinct: <T = any, V = any>(getCompareValue?: (value: T) => V) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<T>;
        static liveness: <T = any>(fallbackfn: () => void, waitFor?: number) => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<T>;
        static count: <T = any>() => (target: import("./Observer").TObserver<T>) => import("./Observer").TObserver<import("./lib/count").ICounted<T>>;
    }
    export default Operator;
}

declare module 'react-declarative/utils/rx/Subject' {
    import Observer from "react-declarative/utils/rx/Observer";
    import TSubject from "react-declarative/model/TSubject";
    import TObserver, { TObservable } from "react-declarative/model/TObserver";
    export const SUBJECT_EVENT: unique symbol;
    type Function = (...args: any[]) => void;
    export class Subject<Data = any> implements TSubject<Data>, TObservable<Data> {
        constructor();
        map: <T = any>(callbackfn: (value: Data) => T) => TObserver<T>;
        flatMap: <T = any>(callbackfn: (value: Data) => T[]) => TObserver<T>;
        reduce: <T = any>(callbackfn: (acm: T, cur: Data) => T, begin: T) => TObserver<T>;
        mapAsync: <T = any>(callbackfn: (value: Data) => Promise<T>, fallbackfn?: ((e: Error) => void) | undefined) => TObserver<T>;
        filter: (callbackfn: (value: Data) => boolean) => TObserver<Data>;
        tap: (callbackfn: (value: Data) => void) => TObserver<Data>;
        operator: <T = any>(callbackfn: (value: TObserver<Data>) => TObserver<T>) => TObserver<T>;
        split: () => Observer<ReadonlyArray<FlatArray<Data[], 20>>>;
        debounce: (delay?: number | undefined) => TObserver<Data>;
        repeat: (interval?: number | undefined) => TObserver<Data>;
        merge: <T = any>(observer: TObserver<T>) => TObserver<Data | T>;
        subscribe: (callback: Function) => () => void;
        unsubscribeAll: () => void;
        once: (callback: Function) => () => void;
        next(data: Data): Promise<void>;
        toObserver(): TObserver<Data>;
        toPromise: () => Promise<Data>;
    }
    export { TSubject };
    export default Subject;
}

declare module 'react-declarative/utils/rx/Source' {
    import Observer from "react-declarative/utils/rx/Observer";
    import TObserver from "react-declarative/model/TObserver";
    import { TSubject } from "react-declarative/utils/rx/Subject";
    import { TBehaviorSubject } from "react-declarative/utils/rx/BehaviorSubject";
    export class Source {
        static merge: <A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never>(observers: [TObserver<A>, (TObserver<B> | undefined)?, (TObserver<C> | undefined)?, (TObserver<D> | undefined)?, (TObserver<E> | undefined)?, (TObserver<F> | undefined)?, (TObserver<G> | undefined)?, (TObserver<H> | undefined)?, (TObserver<I> | undefined)?, (TObserver<J> | undefined)?]) => TObserver<A | B | C | D | E | F | G | H | I | J>;
        static join: <A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never>(observers: [TObserver<A>, (TObserver<B> | undefined)?, (TObserver<C> | undefined)?, (TObserver<D> | undefined)?, (TObserver<E> | undefined)?, (TObserver<F> | undefined)?, (TObserver<G> | undefined)?, (TObserver<H> | undefined)?, (TObserver<I> | undefined)?, (TObserver<J> | undefined)?], { race, buffer, }?: {
            buffer?: [A, (B | undefined)?, (C | undefined)?, (D | undefined)?, (E | undefined)?, (F | undefined)?, (G | undefined)?, (H | undefined)?, (I | undefined)?, (J | undefined)?] | undefined;
            race?: boolean | undefined;
        }) => TObserver<[A, B, C, D, E, F, G, H, I, J]>;
        static unicast: <Data = any>(factory: () => TObserver<Data>) => TObserver<Data> & {
            isUnicasted: true;
        };
        static multicast: <Data = any>(factory: () => TObserver<Data>) => TObserver<Data> & {
            isMulticasted: true;
            getRef: any;
        };
        static createHot: <Data = any>(emitter: (next: (data: Data) => void) => ((() => void) | void)) => Observer<Data>;
        static createCold: <Data = any>(emitter: (next: (data: Data) => void) => ((() => void) | void)) => Observer<Data>;
        static create: <Data = any>(emitter: (next: (data: Data) => void) => ((() => void) | void)) => Observer<Data>;
        static pipe: <Data = any, Output = any>(target: TObserver<Data>, emitter: (subject: TSubject<Data>, next: (output: Output) => void) => ((() => void) | void)) => Observer<Output>;
        static fromInterval: (delay: number) => TObserver<number>;
        static fromPromise: <Data = any>(callbackfn: () => Promise<Data>, fallbackfn?: ((e: Error) => void) | undefined) => TObserver<Data>;
        static fromDelay: (delay: number) => TObserver<void>;
        static fromArray: <Data = any>(data: Data) => TObserver<readonly (Data extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? InnerArr extends readonly (infer InnerArr)[] ? any : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : InnerArr : Data)[]>;
        static fromValue: <Data = any>(data: Data | (() => Data)) => TObserver<Data>;
        static fromSubject: <Data = any>(subject: TSubject<Data>) => Observer<Data>;
        static fromBehaviorSubject: <Data = any>(subject: TBehaviorSubject<Data>) => Observer<Data>;
    }
    export default Source;
}

declare module 'react-declarative/utils/math/and' {
    type Value = number | boolean;
    export const and: <T = Promise<Value>>(...args: T[]) => T;
    export default and;
}

declare module 'react-declarative/utils/math/or' {
    type Value = number | boolean;
    export const or: <T = Promise<Value>>(...args: T[]) => T;
    export default or;
}

declare module 'react-declarative/model/TSubject' {
    export interface TSubject<Data = unknown> {
        subscribe: (callback: (data: Data) => void) => () => void;
        once: (callback: (data: Data) => void) => () => void;
        next: (data: Data) => void;
    }
    export default TSubject;
}

declare module 'react-declarative/model/TBehaviorSubject' {
    import TSubject from "react-declarative/model/TSubject";
    export interface TBehaviorSubject<Data = unknown> extends TSubject<Data> {
        data: Data | null;
    }
    export default TBehaviorSubject;
}

declare module 'react-declarative/model/TObserver' {
    export interface TObserver<Data = unknown> {
        unsubscribe: () => void;
        map: <T = unknown>(callbackfn: (value: Data) => T) => TObserver<T>;
        flatMap: <T = any>(callbackfn: (value: Data) => T[]) => TObserver<T>;
        reduce: <T = any>(callbackfn: (acm: T, cur: Data) => T, begin: T) => TObserver<T>;
        mapAsync: <T = unknown>(callbackfn: (value: Data) => Promise<T>, fallbackfn?: (e: Error) => void) => TObserver<T>;
        operator: <T = any>(callbackfn: (target: TObserver<Data>) => TObserver<T>) => TObserver<T>;
        filter: (callbackfn: (value: Data) => boolean) => TObserver<Data>;
        merge: <T = unknown>(observer: TObserver<T>) => TObserver<Data | T>;
        tap: (callbackfn: (value: Data) => void) => TObserver<Data>;
        split: () => TObserver<ReadonlyArray<FlatArray<Data[], 20>>>;
        debounce: (delay?: number) => TObserver<Data>;
        repeat: (interval?: number) => TObserver<Data>;
        connect: (callbackfn: (value: Data) => void) => () => void;
        once: (callbackfn: (value: Data) => void) => () => void;
        share: () => TObserver<Data>;
        toPromise: () => Promise<Data>;
    }
    export type TObservable<Data = unknown> = Omit<TObserver<Data>, keyof {
        unsubscribe: never;
        connect: never;
        once: never;
        share: never;
    }>;
    export default TObserver;
}

declare module 'react-declarative/utils/getErrorMessage' {
    export const getErrorMessage: (error: any) => string;
    export default getErrorMessage;
}

declare module 'react-declarative/utils/mvvm/Entity' {
    import Model from "react-declarative/utils/mvvm/Model";
    export { CHANGE_DEBOUNCE, CHANGE_SYMBOL, REFRESH_SYMBOL } from 'react-declarative/utils/mvvm/Model';
    export interface IEntity {
        id: string | number;
    }
    export interface IEntityAdapter<T extends IEntity = any> {
        id: IEntity['id'];
        setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
        data: T;
        refresh(): void;
        toObject(): T;
    }
    /**
      * @description MVVM Object wrapper. Emmits change after setData
      */
    export class Entity<T extends IEntity = any> extends Model<T> implements IEntityAdapter<T> {
        get id(): string | number;
        constructor(_data: T | Entity<T> | (() => T), _debounce?: number, _prevData?: () => T);
        setData: (data: Partial<T> | ((prevData: T) => Partial<T>)) => void;
        handleChange: (change: (item: Entity<T>) => void) => () => void;
    }
    export default Entity;
}

declare module 'react-declarative/utils/mvvm/Collection' {
    import EventEmitter from 'react-declarative/utils/rx/EventEmitter';
    import Entity, { IEntity, IEntityAdapter } from 'react-declarative/utils/mvvm/Entity';
    export const REORDER_SYMBOL: unique symbol;
    export interface ICollectionAdapter<T extends IEntity = any> {
        items: IEntityAdapter<T>[];
        lastIdx: number;
        ids: IEntity['id'][];
        isEmpty: boolean;
        setData(items: T[]): void;
        map<V = any>(callbackfn: (value: IEntityAdapter<T>, idx: number) => V): V[];
        filter(predicate: (value: IEntityAdapter<T>, idx: number) => boolean): IEntityAdapter<T>[];
        find(predicate: (value: IEntityAdapter<T>, idx: number) => boolean): IEntityAdapter<T> | undefined;
        some(predicate: (value: IEntityAdapter<T>, idx: number) => boolean): boolean;
        forEach(callbackfn: (value: IEntityAdapter<T>, idx: number) => void): void;
        push(...items: (T[] | T[][])): void;
        upsert(...items: (T[] | T[][])): void;
        remove(item: IEntity): void;
        removeById(id: IEntity['id']): void;
        removeAll(): void;
        findById(id: IEntity['id']): IEntityAdapter<T>;
        clear(): void;
        refresh(): void;
        toArray(): T[];
    }
    export class EntityNotFoundError extends Error {
    }
    /**
      * @description MVVM Array wrapper. Emmits `change` after push/pop/change of element
      */
    export class Collection<T extends IEntity = any> extends EventEmitter implements ICollectionAdapter<T> {
        protected _debounce: number;
        protected _prevData: () => Entity<T>[];
        get items(): Entity<T>[];
        get lastIdx(): number;
        get ids(): (string | number)[];
        constructor(entities?: T[] | (() => T[]) | Entity<T>[] | Collection<T>, _debounce?: number, _prevData?: () => Entity<T>[]);
        get isEmpty(): boolean;
        setData: (items: T[]) => void;
        clear: () => void;
        map: <V = any>(callbackfn: (value: Entity<T>, idx: number) => V) => V[];
        filter: (predicate: (value: Entity<T>, idx: number) => boolean) => Entity<T>[];
        find: (predicate: (value: Entity<T>, idx: number) => boolean) => Entity<T> | undefined;
        some: (predicate: (value: Entity<T>, idx: number) => boolean) => boolean;
        forEach: (callbackfn: (value: Entity<T>, idx: number) => void) => void;
        push: (...items: (T[] | T[][])) => void;
        upsert: (...items: T[] | T[][]) => void;
        remove: (item: IEntity) => void;
        removeById: (id: IEntity['id']) => void;
        removeAll: () => void;
        findById: (id: IEntity['id']) => Entity<T>;
        handleChange: (change: (collection: Collection<T>, target: Entity<T> | null) => void) => () => void;
        handleDropChanges: () => void;
        refresh: () => Promise<void>;
        toArray: () => T[];
    }
    export default Collection;
}

declare module 'react-declarative/utils/mvvm/Model' {
    import EventEmitter from "react-declarative/utils/rx/EventEmitter";
    import Subject from "react-declarative/utils/rx/Subject";
    export const CHANGE_SYMBOL: unique symbol;
    export const REFRESH_SYMBOL: unique symbol;
    export const CHANGE_DEBOUNCE = 1000;
    export interface IModelAdapter<T extends {} = any> {
        data: T;
        setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
        refresh(): void;
        toObject(): T;
    }
    export class Model<T extends {} = any> extends EventEmitter implements IModelAdapter<T> {
        protected _debounce: number;
        protected _prevData: () => T;
        protected _dropChanges: Subject<void>;
        protected _data: T;
        get data(): T;
        constructor(_data: T | Model<T> | (() => T), _debounce?: number, _prevData?: () => T);
        setData(data: Partial<T> | ((prevData: T) => Partial<T>)): void;
        handleChange(change: (item: Model<T>) => void): () => void;
        handleDropChanges: () => void;
        refresh: () => Promise<void>;
        toObject: () => T;
    }
    export default Model;
}

declare module 'react-declarative/utils/formatAmount' {
    export const formatAmount: (value: number | string, scale?: number, separator?: string) => string;
    export default formatAmount;
}

declare module 'react-declarative/utils/createWindowHistory' {
    import { BrowserHistory, MemoryHistory } from "history";
    export const createWindowHistory: () => MemoryHistory | BrowserHistory;
    export default createWindowHistory;
}

declare module 'react-declarative/utils/createLsManager' {
    export const createLsManager: <T = Record<string, any>>(STORAGE_KEY: string) => {
        getValue: () => T | null;
        setValue: (value: T) => void;
    };
    export default createLsManager;
}

declare module 'react-declarative/utils/createSsManager' {
    export const createSsManager: <T = Record<string, any>>(STORAGE_KEY: string) => {
        getValue: () => T | null;
        setValue: (value: T) => void;
    };
    export default createSsManager;
}

declare module 'react-declarative/utils/createCustomTag' {
    export const createCustomTag: (name?: string, style?: string) => void;
    export default createCustomTag;
}

declare module 'react-declarative/utils/createWebComponent' {
    import * as React from 'react';
    export const createWebComponent: (name: string, Root: React.ComponentType<any>) => void;
    export default createWebComponent;
}

declare module 'react-declarative/utils/mainColor' {
    export const mainColor: (color: string) => void;
    export default mainColor;
}

declare module 'react-declarative/utils/cacheSrc' {
    export const cacheSrc: (url: string) => {
        ref: (element: HTMLImageElement | null) => void;
    };
    export default cacheSrc;
}

declare module 'react-declarative/utils/base64Json' {
    export const parseBase64Json: <T = Record<string, any>>(state: string) => T | null;
    export const stringifyBase64Json: <T = Record<string, any>>(state: T) => string;
}

declare module 'react-declarative/utils/asciiParams' {
    export const parseAsciiParams: <T extends {} = Record<string, any>>(state: number[]) => T | null;
    export const serializeAsciiParams: <T extends {} = Record<string, any>>(state: T) => number[];
    export const toBytes32: (str: string) => string;
    export const fromBytes32: (hex: string) => string;
}

declare module 'react-declarative/utils/datetime' {
    export const DATE_PLACEHOLDER = "DD/MM/YYYY";
    export const TIME_PLACEHOLDER = "HH:MM";
    export const DATE_EXPR: RegExp;
    export const TIME_EXPR: RegExp;
    export class Time {
        readonly hour: number;
        readonly minute: number;
        constructor(hour: number, minute: number);
        toString: () => string | null;
        toStamp: () => number;
    }
    export class Date {
        readonly day: number;
        readonly month: number;
        readonly year: number;
        constructor(day: number, month: number, year: number);
        toString: () => string | null;
        toStamp: () => number;
    }
    export const parseDate: (date: string) => Date | null;
    export const serializeDate: (date: Date) => string | null;
    export const parseTime: (time: string) => Time | null;
    export const serializeTime: (time: Time) => string | null;
    export const currentDate: () => string | null;
    export const currentTime: () => string | null;
    export const timeStamp: (str: string) => number;
    export const dateStamp: (str: string) => number;
}

declare module 'react-declarative/utils/compose' {
    type Function = (...args: any[]) => any;
    export const compose: (...funcs: Function[][] | Function[]) => Function;
    export default compose;
}

declare module 'react-declarative/components/One/layouts/FragmentLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface IFragmentLayoutProps<Data = IAnything, Payload = IAnything> {
        isVisible?: PickProp<IField<Data, Payload>, 'isVisible'>;
    }
    interface IFragmentLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
        ready: PickProp<IEntity<Data>, 'ready'>;
    }
    /**
      * Компоновка, которую можно скрыть, используя isVisible.
      * Потомки передаются насквозь...
      */
    export const FragmentLayout: {
        <Data extends unknown = any>({ children, isVisible, ready, }: IFragmentLayoutProps<Data, any> & IFragmentLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, isVisible, ready, }: IFragmentLayoutProps<Data, any> & IFragmentLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/DivLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { IWrappedLayout, PickProp } from 'react-declarative/model/IManaged';
    export interface IDivLayoutProps<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
    }
    interface IDivLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
    }
    export const DivLayout: {
        <Data extends unknown = any>({ children, className, style, }: IDivLayoutProps<Data, any> & IDivLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, }: IDivLayoutProps<Data, any> & IDivLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/BoxLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { IWrappedLayout, PickProp } from 'react-declarative/model/IManaged';
    export interface IBoxLayoutProps<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data, Payload> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        sx?: PickProp<IField<Data, Payload>, 'sx'>;
    }
    interface IBoxLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
    }
    export const BoxLayout: {
        <Data extends unknown = any>({ children, className, style, sx, }: IBoxLayoutProps<Data, any> & IBoxLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, sx, }: IBoxLayoutProps<Data, any> & IBoxLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/TabsLayout' {
    import * as React from 'react';
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    export interface ITabsLayoutProps<Data = IAnything, Payload = IAnything> extends IGroupProps<Data, Payload> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        tabLine?: PickProp<IField<Data, Payload>, 'tabLine'>;
        tabList?: PickProp<IField<Data, Payload>, 'tabList'>;
        tabIndex?: PickProp<IField<Data, Payload>, 'tabIndex'>;
        tabColor?: PickProp<IField<Data, Payload>, 'tabColor'>;
        tabChange?: PickProp<IField<Data, Payload>, 'tabChange'>;
        tabVariant?: PickProp<IField<Data, Payload>, 'tabVariant'>;
        tabKeepFlow?: PickProp<IField<Data, Payload>, 'tabKeepFlow'>;
        tabBackground?: PickProp<IField<Data, Payload>, 'tabBackground'>;
    }
    interface ITabsLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const TabsLayout: {
        <Data extends unknown = any>({ children, className, style, tabChange, tabVariant, tabLine, tabColor, tabList, tabKeepFlow, tabBackground, tabIndex: tabIndexDefault, columns, columnsOverride, isBaselineAlign, sx, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, }: ITabsLayoutProps<Data, any> & ITabsLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, tabChange, tabVariant, tabLine, tabColor, tabList, tabKeepFlow, tabBackground, tabIndex: tabIndexDefault, columns, columnsOverride, isBaselineAlign, sx, phoneColumns, tabletColumns, desktopColumns, fieldRightMargin, fieldBottomMargin, }: ITabsLayoutProps<Data, any> & ITabsLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/CenterLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { PickProp } from 'react-declarative/model/IManaged';
    import { IGroupProps } from "react-declarative/components/common/Group";
    export interface ICenterLayoutProps<Data = IAnything, Payload = IAnything> extends IGroupProps<Data> {
        innerPadding?: PickProp<IField<Data, Payload>, 'innerPadding'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
    }
    interface ICenterLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const CenterLayout: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, columns, phoneColumns, tabletColumns, desktopColumns, columnsOverride, isBaselineAlign, sx, fieldRightMargin, fieldBottomMargin, }: ICenterLayoutProps<Data, any> & ICenterLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, columns, phoneColumns, tabletColumns, desktopColumns, columnsOverride, isBaselineAlign, sx, fieldRightMargin, fieldBottomMargin, }: ICenterLayoutProps<Data, any> & ICenterLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/StretchLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IEntity from 'react-declarative/model/IEntity';
    import IAnything from 'react-declarative/model/IAnything';
    import { IWrappedLayout, PickProp } from 'react-declarative/model/IManaged';
    export interface IStretchLayoutProps<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data> {
        innerPadding?: PickProp<IField<Data, Payload>, 'innerPadding'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
    }
    interface IStretchLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
    }
    export const StretchLayout: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, }: IStretchLayoutProps<Data, any> & IStretchLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, innerPadding: padding, }: IStretchLayoutProps<Data, any> & IStretchLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/GroupLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IAnything from "react-declarative/model/IAnything";
    export interface IGroupLayoutProps<Data = IAnything, Payload = IAnything> extends IGroupProps<Data, Payload> {
    }
    interface IGroupLayoutPrivate {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const GroupLayout: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, isBaselineAlign, fieldRightMargin, fieldBottomMargin, style, className, children, }: IGroupLayoutProps<Data, any> & IGroupLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, isBaselineAlign, fieldRightMargin, fieldBottomMargin, style, className, children, }: IGroupLayoutProps<Data, any> & IGroupLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/OutlineLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import { IOutlineProps } from 'react-declarative/components/common/Outline';
    import { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IOutlineLayoutProps<Data = IAnything, Payload = IAnything> extends IOutlineProps<Data, Payload>, IGroupProps<Data, Payload> {
        innerPadding?: PickProp<IField<Data, Payload>, 'innerPadding'>;
    }
    interface IOutlineLayoutPrivate {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const OutlineLayout: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, style, className, children, isBaselineAlign, fieldRightMargin, fieldBottomMargin, innerPadding: padding, }: IOutlineLayoutProps<Data, any> & IOutlineLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, style, className, children, isBaselineAlign, fieldRightMargin, fieldBottomMargin, innerPadding: padding, }: IOutlineLayoutProps<Data, any> & IOutlineLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/PaperLayout' {
    import * as React from "react";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import { IPaperProps } from "react-declarative/components/common/Paper";
    import { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IPaperLayoutProps<Data = IAnything, Payload = IAnything> extends IPaperProps<Data, Payload>, IGroupProps<Data, Payload> {
        innerPadding?: PickProp<IField<Data, Payload>, "innerPadding">;
        outlinePaper?: PickProp<IField<Data, Payload>, "outlinePaper">;
    }
    interface IPaperLayoutPrivate {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const PaperLayout: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, style, className, children, isBaselineAlign, fieldRightMargin, fieldBottomMargin, innerPadding: padding, outlinePaper, }: IPaperLayoutProps<Data, any> & IPaperLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, style, className, children, isBaselineAlign, fieldRightMargin, fieldBottomMargin, innerPadding: padding, outlinePaper, }: IPaperLayoutProps<Data, any> & IPaperLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/ExpansionLayout' {
    import * as React from "react";
    import { IExpansionProps } from "react-declarative/components/common/Expansion";
    import { IGroupProps } from "react-declarative/components/common/Group";
    import IAnything from "react-declarative/model/IAnything";
    export interface IExpansionLayoutProps<Data = IAnything, Payload = IAnything> extends IExpansionProps<Data, Payload>, IGroupProps<Data, Payload> {
    }
    interface IExpansionLayoutPrivate {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const ExpansionLayout: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, isBaselineAlign, fieldRightMargin, fieldBottomMargin, style, className, children, title, description, expansionOpened, }: IExpansionLayoutProps<Data, any> & IExpansionLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ columns, columnsOverride, sx, phoneColumns, tabletColumns, desktopColumns, isBaselineAlign, fieldRightMargin, fieldBottomMargin, style, className, children, title, description, expansionOpened, }: IExpansionLayoutProps<Data, any> & IExpansionLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/HeroLayout' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import { IWrappedLayout, PickProp } from 'react-declarative/model/IManaged';
    import Group, { IGroupProps } from 'react-declarative/components/common/Group';
    import IEntity from 'react-declarative/model/IEntity';
    interface IHeroTop<Data = IAnything, Payload = IAnything> {
        top?: PickProp<IField<Data, Payload>, 'top'>;
        phoneTop?: PickProp<IField<Data, Payload>, 'phoneTop'>;
        tabletTop?: PickProp<IField<Data, Payload>, 'tabletTop'>;
        desktopTop?: PickProp<IField<Data, Payload>, 'desktopTop'>;
    }
    interface IHeroLeft<Data = IAnything, Payload = IAnything> {
        left?: PickProp<IField<Data, Payload>, 'left'>;
        phoneLeft?: PickProp<IField<Data, Payload>, 'phoneLeft'>;
        tabletLeft?: PickProp<IField<Data, Payload>, 'tabletLeft'>;
        desktopLeft?: PickProp<IField<Data, Payload>, 'desktopLeft'>;
    }
    interface IHeroRight<Data = IAnything, Payload = IAnything> {
        right?: PickProp<IField<Data, Payload>, 'right'>;
        phoneRight?: PickProp<IField<Data, Payload>, 'phoneRight'>;
        tabletRight?: PickProp<IField<Data, Payload>, 'tabletRight'>;
        desktopRight?: PickProp<IField<Data, Payload>, 'desktopRight'>;
    }
    interface IHeroBottom<Data = IAnything, Payload = IAnything> {
        bottom?: PickProp<IField<Data, Payload>, 'bottom'>;
        phoneBottom?: PickProp<IField<Data, Payload>, 'phoneBottom'>;
        tabletBottom?: PickProp<IField<Data, Payload>, 'tabletBottom'>;
        desktopBottom?: PickProp<IField<Data, Payload>, 'desktopBottom'>;
    }
    interface IHeroHeight<Data = IAnything, Payload = IAnything> {
        height?: PickProp<IField<Data, Payload>, 'height'>;
        phoneHeight?: PickProp<IField<Data, Payload>, 'phoneHeight'>;
        tabletHeight?: PickProp<IField<Data, Payload>, 'tabletHeight'>;
        desktopHeight?: PickProp<IField<Data, Payload>, 'desktopHeight'>;
    }
    interface IHeroMinHeight<Data = IAnything, Payload = IAnything> {
        minHeight?: PickProp<IField<Data, Payload>, 'minHeight'>;
        phoneMinHeight?: PickProp<IField<Data, Payload>, 'phoneMinHeight'>;
        tabletMinHeight?: PickProp<IField<Data, Payload>, 'tabletMinHeight'>;
        desktopMinHeight?: PickProp<IField<Data, Payload>, 'desktopMinHeight'>;
    }
    interface IHeroMaxHeight<Data = IAnything, Payload = IAnything> {
        maxHeight?: PickProp<IField<Data, Payload>, 'maxHeight'>;
        phoneMaxHeight?: PickProp<IField<Data, Payload>, 'phoneMaxHeight'>;
        tabletMaxHeight?: PickProp<IField<Data, Payload>, 'tabletMaxHeight'>;
        desktopMaxHeight?: PickProp<IField<Data, Payload>, 'desktopMaxHeight'>;
    }
    interface IHeroWidth<Data = IAnything, Payload = IAnything> {
        width?: PickProp<IField<Data, Payload>, 'width'>;
        phoneWidth?: PickProp<IField<Data, Payload>, 'phoneWidth'>;
        tabletWidth?: PickProp<IField<Data, Payload>, 'tabletWidth'>;
        desktopWidth?: PickProp<IField<Data, Payload>, 'desktopWidth'>;
    }
    interface IHeroMinWidth<Data = IAnything, Payload = IAnything> {
        minWidth?: PickProp<IField<Data, Payload>, 'minWidth'>;
        phoneMinWidth?: PickProp<IField<Data, Payload>, 'phoneMinWidth'>;
        tabletMinWidth?: PickProp<IField<Data, Payload>, 'tabletMinWidth'>;
        desktopMinWidth?: PickProp<IField<Data, Payload>, 'desktopMinWidth'>;
    }
    interface IHeroMaxWidth<Data = IAnything, Payload = IAnything> {
        maxWidth?: PickProp<IField<Data, Payload>, 'maxWidth'>;
        phoneMaxWidth?: PickProp<IField<Data, Payload>, 'phoneMaxWidth'>;
        tabletMaxWidth?: PickProp<IField<Data, Payload>, 'tabletMaxWidth'>;
        desktopMaxWidth?: PickProp<IField<Data, Payload>, 'desktopMaxWidth'>;
    }
    interface IHeroStyle<Data = IAnything, Payload = IAnything> {
        heroOuterStyle?: PickProp<IField<Data, Payload>, 'heroOuterStyle'>;
        heroOuterPhoneStyle?: PickProp<IField<Data, Payload>, 'heroOuterPhoneStyle'>;
        heroOuterTabletStyle?: PickProp<IField<Data, Payload>, 'heroOuterTabletStyle'>;
        heroOuterDesktopStyle?: PickProp<IField<Data, Payload>, 'heroOuterDesktopStyle'>;
        heroInnerStyle?: PickProp<IField<Data, Payload>, 'heroInnerStyle'>;
        heroInnerPhoneStyle?: PickProp<IField<Data, Payload>, 'heroInnerPhoneStyle'>;
        heroInnerTabletStyle?: PickProp<IField<Data, Payload>, 'heroInnerTabletStyle'>;
        heroInnerDesktopStyle?: PickProp<IField<Data, Payload>, 'heroInnerDesktopStyle'>;
    }
    type IHeroRegistry<D = IAnything> = IHeroTop<D> & IHeroLeft<D> & IHeroRight<D> & IHeroBottom<D> & IHeroWidth<D> & IHeroMinWidth<D> & IHeroMaxWidth<D> & IHeroHeight<D> & IHeroMinHeight<D> & IHeroMaxHeight<D> & IHeroStyle<D>;
    type Group<Data = IAnything> = Omit<IGroupProps<Data>, keyof {
        fieldRightMargin: never;
        fieldBottomMargin: never;
    }>;
    export interface IHeroLayoutProps<Data = IAnything, Payload = IAnything> extends IHeroRegistry<Data>, Group<Data>, IWrappedLayout<Data> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        object: PickProp<IEntity<Data>, 'object'>;
    }
    interface IHeroLayoutPrivate {
        isBaselineAlign: boolean;
        children?: React.ReactNode;
    }
    export const HeroLayout: {
        <Data extends unknown = any>({ children, className, style, object, columns, columnsOverride, isBaselineAlign, sx, phoneColumns, tabletColumns, desktopColumns, ...otherProps }: IHeroLayoutProps<Data, any> & IHeroLayoutPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, object, columns, columnsOverride, isBaselineAlign, sx, phoneColumns, tabletColumns, desktopColumns, ...otherProps }: IHeroLayoutProps<Data, any> & IHeroLayoutPrivate): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/ConditionLayout' {
    import * as React from "react";
    import IField from "react-declarative/model/IField";
    import IEntity from "react-declarative/model/IEntity";
    import IAnything from "react-declarative/model/IAnything";
    import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
    export interface IConditionLayoutProps<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data, Payload> {
        condition?: PickProp<IField<Data, Payload>, "condition">;
    }
    interface IConditionLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
        fallback: PickProp<IEntity<Data>, "fallback">;
        ready: PickProp<IEntity<Data>, "ready">;
        object: PickProp<IEntity<Data>, "object">;
    }
    /**
      * Компоновка, которую можно скрыть, используя condition.
      * В отличие от isVisible умеет приходовать промис
      * Потомки передаются насквозь...
      */
    export const ConditionLayout: {
        <Data extends unknown = any>({ children, condition, fallback, object, }: IConditionLayoutProps<Data, any> & IConditionLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, condition, fallback, object, }: IConditionLayoutProps<Data, any> & IConditionLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/layouts/CustomLayout' {
    import * as React from "react";
    import IField from "react-declarative/model/IField";
    import IEntity from "react-declarative/model/IEntity";
    import IAnything from "react-declarative/model/IAnything";
    import { IWrappedLayout, PickProp } from "react-declarative/model/IManaged";
    export interface ICustomLayoutProps<Data = IAnything, Payload = IAnything> extends IWrappedLayout<Data, Payload> {
        className?: PickProp<IField<Data, Payload>, "className">;
        style?: PickProp<IField<Data, Payload>, "style">;
        sx?: PickProp<IField<Data, Payload>, "sx">;
        customLayout?: PickProp<IField<Data, Payload>, "customLayout">;
    }
    interface ICustomLayoutPrivate<Data = IAnything> extends IEntity<Data> {
        children?: React.ReactNode;
    }
    export const CustomLayout: {
        <Data extends unknown = any>({ children, className, style, sx, customLayout: CustomLayout, ...otherProps }: ICustomLayoutProps<Data, any> & ICustomLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ children, className, style, sx, customLayout: CustomLayout, ...otherProps }: ICustomLayoutProps<Data, any> & ICustomLayoutPrivate<Data>): JSX.Element;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/CheckboxField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ICheckboxFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, 'title'>;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
    }
    export interface ICheckboxFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
        onChange: PickProp<IManaged<Data>, 'onChange'>;
    }
    export const CheckboxField: {
        ({ disabled, value, readonly, onChange, title }: ICheckboxFieldProps & ICheckboxFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/FileField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IFileFieldProps<Data = IAnything, Payload = IAnything> {
        description?: PickProp<IField<Data, Payload>, "description">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        title?: PickProp<IField<Data, Payload>, "title">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        fileAccept?: PickProp<IField<Data, Payload>, 'fileAccept'>;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        inputRef?: PickProp<IField<Data, Payload>, 'inputRef'>;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
        upload?: PickProp<IField<Data, Payload>, 'upload'>;
        view?: PickProp<IField<Data, Payload>, 'view'>;
    }
    export interface IFileFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        loading: PickProp<IManaged<Data>, "loading">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const FileField: {
        ({ invalid, value, disabled, readonly, description, outlined, title, placeholder, upload, view, dirty, labelShrink, loading, onChange, inputRef, name, }: IFileFieldProps & IFileFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/ComboField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IComboFieldProps<Data = IAnything, Payload = IAnything> {
        description?: PickProp<IField<Data, Payload>, "description">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        itemList?: PickProp<IField<Data, Payload>, "itemList">;
        freeSolo?: PickProp<IField<Data, Payload>, "freeSolo">;
        noDeselect?: PickProp<IField<Data, Payload>, "noDeselect">;
        virtualListBox?: PickProp<IField<Data, Payload>, "virtualListBox">;
        shouldUpdateItemList?: PickProp<IField<Data, Payload>, "shouldUpdateItemList">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
        title?: PickProp<IField<Data, Payload>, "title">;
        tr?: PickProp<IField<Data, Payload>, "tr">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
    }
    export interface IComboFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, "value">;
        readonly: PickProp<IManaged<Data>, "readonly">;
        onChange: PickProp<IManaged<Data>, "onChange">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        invalid: PickProp<IManaged<Data>, "invalid">;
    }
    export const ComboField: {
        ({ value, disabled, readonly, description, placeholder, outlined, itemList, freeSolo, virtualListBox, noDeselect, labelShrink, title, dirty, invalid, tr, shouldUpdateItemList, onChange, }: IComboFieldProps & IComboFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/ComponentField' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    export interface IComponentFieldProps<Data = IAnything, Payload = IAnything> {
        element?: PickProp<IField<Data, Payload>, 'element'>;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        sx?: PickProp<IField<Data, Payload>, 'sx'>;
    }
    interface IComponentFieldPrivate<Data = IAnything> {
        object: PickProp<IManaged<Data>, 'object'>;
        disabled: PickProp<IManaged<Data>, 'disabled'>;
        readonly: PickProp<IManaged<Data>, 'readonly'>;
    }
    export const ComponentField: {
        ({ disabled, readonly, element: Element, object, ...otherProps }: IComponentFieldProps & IComponentFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/ItemsField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IItemsFieldProps<Data = IAnything, Payload = IAnything> {
        description?: PickProp<IField<Data, Payload>, "description">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        itemList?: PickProp<IField<Data, Payload>, "itemList">;
        freeSolo?: PickProp<IField<Data, Payload>, "freeSolo">;
        virtualListBox?: PickProp<IField<Data, Payload>, "virtualListBox">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        noDeselect?: PickProp<IField<Data, Payload>, "noDeselect">;
        shouldUpdateItemList?: PickProp<IField<Data, Payload>, "shouldUpdateItemList">;
        title?: PickProp<IField<Data, Payload>, "title">;
        tr?: PickProp<IField<Data, Payload>, "tr">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
    }
    export interface IItemsFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        value: PickProp<IManaged<Data>, 'value'>;
        dirty: PickProp<IManaged<Data>, "dirty">;
        invalid: PickProp<IManaged<Data>, "invalid">;
    }
    export const ItemsField: {
        ({ value, disabled, readonly, description, placeholder, outlined, itemList, freeSolo, virtualListBox, labelShrink, noDeselect, dirty, invalid, title, shouldUpdateItemList, tr, onChange, }: IItemsFieldProps & IItemsFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/LineField' {
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ILineFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, 'title'>;
        lineTransparent?: PickProp<IField<Data, Payload>, 'lineTransparent'>;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
    }
    export const LineField: {
        ({ title, lineTransparent, }: ILineFieldProps): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/ProgressField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    export interface IProgressFieldProps<Data = IAnything, Payload = IAnything> {
        maxPercent?: PickProp<IField<Data, Payload>, "maxPercent">;
        showPercentLabel?: PickProp<IField<Data, Payload>, "showPercentLabel">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
    }
    export interface IProgressFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, "value">;
    }
    export const ProgressField: {
        ({ maxPercent, showPercentLabel, value, }: IProgressFieldProps & IProgressFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/RadioField' {
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    export interface IRadioFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, "title">;
        radioValue?: PickProp<IField<Data, Payload>, "radioValue">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
    }
    export interface IRadioFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, "value">;
        onChange: PickProp<IManaged<Data>, "onChange">;
        name?: PickProp<IManaged<Data>, 'name'>;
    }
    export const RadioField: {
        ({ disabled, value, onChange, title, radioValue, name, }: IRadioFieldProps & IRadioFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/RatingField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IRatingFieldProps<Data = IAnything, Payload = IAnything> {
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
    }
    export interface IRatingFieldPrivate<Data = IAnything> {
        name?: string;
        value: PickProp<IManaged<Data>, "value">;
        readonly: PickProp<IManaged<Data>, "readonly">;
        onChange: PickProp<IManaged<Data>, "onChange">;
    }
    export const RatingField: {
        ({ value, disabled, readonly, name, onChange, }: IRatingFieldProps & IRatingFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/SliderField' {
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    export interface ISliderFieldProps<Data = IAnything, Payload = IAnything> {
        stepSlider?: PickProp<IField<Data, Payload>, 'stepSlider'>;
        maxSlider?: PickProp<IField<Data, Payload>, 'maxSlider'>;
        minSlider?: PickProp<IField<Data, Payload>, 'minSlider'>;
        labelFormatSlider?: PickProp<IField<Data, Payload>, 'labelFormatSlider'>;
        leadingIcon?: PickProp<IField<Data, Payload>, 'leadingIcon'>;
        trailingIcon?: PickProp<IField<Data, Payload>, 'trailingIcon'>;
        leadingIconClick?: PickProp<IField<Data, Payload>, 'leadingIconClick'>;
        trailingIconClick?: PickProp<IField<Data, Payload>, 'trailingIconClick'>;
        sliderThumbColor?: PickProp<IField<Data, Payload>, 'sliderThumbColor'>;
        sliderTrackColor?: PickProp<IField<Data, Payload>, 'sliderTrackColor'>;
        sliderRailColor?: PickProp<IField<Data, Payload>, 'sliderRailColor'>;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
    }
    export interface ISliderFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
        onChange: PickProp<IManaged<Data>, 'onChange'>;
    }
    export const SliderField: {
        ({ value, onChange, leadingIcon, trailingIcon, leadingIconClick, trailingIconClick, stepSlider, maxSlider, minSlider, labelFormatSlider, }: ISliderFieldProps & ISliderFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/SwitchField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ISwitchFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, 'title'>;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
    }
    export interface ISwitchFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, 'onChange'>;
        value: PickProp<IManaged<Data>, 'value'>;
    }
    export const SwitchField: {
        ({ disabled, value, readonly, onChange, title, }: ISwitchFieldProps & ISwitchFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/TextField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface ITextFieldProps<Data = IAnything, Payload = IAnything> {
        inputType?: PickProp<IField<Data, Payload>, "inputType">;
        inputMode?: PickProp<IField<Data, Payload>, "inputMode">;
        inputPattern?: PickProp<IField<Data, Payload>, "inputPattern">;
        inputAutocomplete?: PickProp<IField<Data, Payload>, "inputAutocomplete">;
        inputFormatter?: PickProp<IField<Data, Payload>, "inputFormatter">;
        inputFormatterSymbol?: PickProp<IField<Data, Payload>, "inputFormatterSymbol">;
        inputFormatterAllowed?: PickProp<IField<Data, Payload>, "inputFormatterAllowed">;
        inputFormatterTemplate?: PickProp<IField<Data, Payload>, "inputFormatterTemplate">;
        inputFormatterReplace?: PickProp<IField<Data, Payload>, "inputFormatterReplace">;
        description?: PickProp<IField<Data, Payload>, "description">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        title?: PickProp<IField<Data, Payload>, "title">;
        leadingIcon?: PickProp<IField<Data, Payload>, "leadingIcon">;
        trailingIcon?: PickProp<IField<Data, Payload>, "trailingIcon">;
        leadingIconClick?: PickProp<IField<Data, Payload>, "leadingIconClick">;
        trailingIconClick?: PickProp<IField<Data, Payload>, "trailingIconClick">;
        inputRows?: PickProp<IField<Data, Payload>, "inputRows">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        inputRef?: PickProp<IField<Data, Payload>, 'inputRef'>;
        labelShrink?: PickProp<IField<Data, Payload>, 'labelShrink'>;
    }
    export interface ITextFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        loading: PickProp<IManaged<Data>, "loading">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const TextField: {
        ({ invalid, value, disabled, readonly, inputType, description, outlined, labelShrink, title, leadingIcon, trailingIcon, leadingIconClick, trailingIconClick, inputRows, placeholder, inputAutocomplete, inputFormatter, inputFormatterSymbol, inputFormatterAllowed, inputFormatterTemplate, dirty, loading, onChange, autoFocus, inputRef, name, }: ITextFieldProps & ITextFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/DateField' {
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    export interface IDateFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, "title">;
        description?: PickProp<IField<Data, Payload>, "description">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
        autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
    }
    export interface IDateFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const DateField: {
        ({ invalid, value, disabled, readonly, description, outlined, title, placeholder, labelShrink, dirty, autoFocus, inputRef, onChange, name, }: IDateFieldPrivate & IDateFieldProps): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/TimeField' {
    import IField from "react-declarative/model/IField";
    import IAnything from "react-declarative/model/IAnything";
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    export interface ITimeFieldProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, "title">;
        description?: PickProp<IField<Data, Payload>, "description">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        inputRef?: PickProp<IField<Data, Payload>, "inputRef">;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
    }
    export interface ITimeFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const TimeField: {
        ({ invalid, value, disabled, readonly, labelShrink, description, outlined, title, placeholder, dirty, autoFocus, inputRef, onChange, name, }: ITimeFieldPrivate & ITimeFieldProps): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/CompleteField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface ICompleteFieldProps<Data = IAnything, Payload = IAnything> {
        inputType?: PickProp<IField<Data, Payload>, "inputType">;
        inputMode?: PickProp<IField<Data, Payload>, "inputMode">;
        inputPattern?: PickProp<IField<Data, Payload>, "inputPattern">;
        inputAutocomplete?: PickProp<IField<Data, Payload>, "inputAutocomplete">;
        description?: PickProp<IField<Data, Payload>, "description">;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
        keepRaw?: PickProp<IField<Data, Payload>, "keepRaw">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        title?: PickProp<IField<Data, Payload>, "title">;
        tip?: PickProp<IField<Data, Payload>, "tip">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        autoFocus?: PickProp<IField<Data, Payload>, "autoFocus">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        inputRef?: PickProp<IField<Data, Payload>, 'inputRef'>;
    }
    export interface ICompleteFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        loading: PickProp<IManaged<Data>, "loading">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const CompleteField: {
        ({ invalid, value, disabled, readonly, inputType, description, outlined, keepRaw, title, labelShrink, tip, placeholder, inputAutocomplete, dirty, loading, onChange, autoFocus, inputRef, name, }: ICompleteFieldProps & ICompleteFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/TypographyField' {
    import IManaged, { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface ITypographyFieldProps<Data = IAnything, Payload = IAnything> {
        placeholder?: PickProp<IField<Data, Payload>, 'placeholder'>;
        typoVariant?: PickProp<IField<Data, Payload>, 'typoVariant'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
    }
    export interface ITypographyFieldPrivate<Data = IAnything> {
        value: PickProp<IManaged<Data>, 'value'>;
    }
    export const TypographyField: {
        ({ value, placeholder, typoVariant, style, }: ITypographyFieldProps & ITypographyFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/ChooseField' {
    import IManaged, { PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IChooseFieldProps<Data = IAnything, Payload = IAnything> {
        description?: PickProp<IField<Data, Payload>, "description">;
        outlined?: PickProp<IField<Data, Payload>, "outlined">;
        title?: PickProp<IField<Data, Payload>, "title">;
        placeholder?: PickProp<IField<Data, Payload>, "placeholder">;
        labelShrink?: PickProp<IField<Data>, "labelShrink">;
        readonly?: PickProp<IField<Data, Payload>, "readonly">;
        disabled?: PickProp<IField<Data, Payload>, "disabled">;
        groupRef?: PickProp<IField<Data, Payload>, 'groupRef'>;
        inputRef?: PickProp<IField<Data, Payload>, 'inputRef'>;
        choose?: PickProp<IField<Data, Payload>, 'choose'>;
        tr?: PickProp<IField<Data, Payload>, 'tr'>;
    }
    export interface IChooseFieldPrivate<Data = IAnything> {
        onChange: PickProp<IManaged<Data>, "onChange">;
        invalid: PickProp<IManaged<Data>, "invalid">;
        value: PickProp<IManaged<Data>, "value">;
        loading: PickProp<IManaged<Data>, "loading">;
        disabled: PickProp<IManaged<Data>, "disabled">;
        dirty: PickProp<IManaged<Data>, "dirty">;
        name: PickProp<IManaged<Data>, "name">;
    }
    export const ChooseField: {
        ({ invalid, value, disabled, readonly, description, outlined, title, placeholder, labelShrink, choose, tr, dirty, loading, onChange, inputRef, name, }: IChooseFieldProps & IChooseFieldPrivate): JSX.Element;
        displayName: string;
    };
    const _default: {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: import("../../../model/IEntity").IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default _default;
}

declare module 'react-declarative/components/One/fields/InitField' {
    import * as React from 'react';
    export interface IInitFieldProps {
    }
    export const InitField: React.FC<IInitFieldProps>;
    export default InitField;
}

declare module 'react-declarative/model/ISize' {
    import IAnything from 'react-declarative/model/IAnything';
    export interface ISize {
        height: number;
        width: number;
    }
    export type ISizeCallback<Data = IAnything> = (data: Data, size: ISize, ref: HTMLDivElement) => string;
    export default ISize;
}

declare module 'react-declarative/components/List/api/useLastPagination' {
    import { ListHandler, ListHandlerChips, ListHandlerSortModel, ListHandlerPagination } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    interface IResult<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        data: IState<FilterData, RowData>;
        handler: ListHandler<FilterData, RowData>;
    }
    export interface IState<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        filterData: FilterData;
        pagination: ListHandlerPagination;
        sort: ListHandlerSortModel<RowData>;
        chipData: ListHandlerChips<RowData>;
        search: string;
    }
    export const useLastPagination: <FilterData extends {} = any, RowData extends IRowData = any>(upperHandler: ListHandler<FilterData, RowData, any>) => IResult;
    export default useLastPagination;
}

declare module 'react-declarative/components/List/components/SlotFactory' {
    export * from 'react-declarative/components/List/components/SlotFactory/SlotFactory';
    export * from 'react-declarative/components/List/components/SlotFactory/SlotContext';
    export * from 'react-declarative/components/List/components/SlotFactory/ISlotFactoryContext';
    export { default } from 'react-declarative/components/List/components/SlotFactory/SlotFactory';
}

declare module 'react-declarative/components/One/components/SlotFactory' {
    export * from 'react-declarative/components/One/components/SlotFactory/SlotFactory';
    export * from 'react-declarative/components/One/components/SlotFactory/SlotContext';
    export * from 'react-declarative/components/One/components/SlotFactory/ISlotFactoryContext';
    export { default } from 'react-declarative/components/One/components/SlotFactory/SlotFactory';
}

declare module 'react-declarative/components/ModalProvider/ModalProvider' {
    import * as React from 'react';
    import IAnything from 'react-declarative/model/IAnything';
    interface IModalProviderProps {
        children: React.ReactNode;
    }
    type IRenderer = React.ComponentType<IAnything>;
    interface IHook {
        (render: IRenderer, deps?: any[]): {
            showModal: Function;
            hideModal: Function;
        };
    }
    export const ModalProvider: ({ children }: IModalProviderProps) => JSX.Element;
    export const useModal: IHook;
    export default ModalProvider;
}

declare module 'react-declarative/components/SnackProvider/SnackProvider' {
    import * as React from 'react';
    interface ISnackProviderProps {
        children: React.ReactNode;
        delay?: number;
    }
    const useSnack: () => (msg: string) => void;
    export const SnackProvider: ({ children, delay, }: ISnackProviderProps) => JSX.Element;
    export { useSnack };
    export default SnackProvider;
}

declare module 'react-declarative/components/SizeProvider/SizeProvider' {
    import { BoxProps } from '@mui/material/Box';
    import ISize from 'react-declarative/model/ISize';
    interface ISizeProvider extends Omit<BoxProps, keyof {
        ref: never;
    }> {
        target?: HTMLElement;
    }
    const useSize: () => ISize;
    export const SizeProvider: ({ children, className, target, ...props }: ISizeProvider) => JSX.Element;
    export { useSize };
    export default SizeProvider;
}

declare module 'react-declarative/components/common/ListPicker' {
    export * from 'react-declarative/components/common/ListPicker/ListPicker';
    export { default } from 'react-declarative/components/common/ListPicker/ListPicker';
}

declare module 'react-declarative/components/One' {
    export * from 'react-declarative/components/One/One';
    export * from 'react-declarative/components/One/slots';
    export { OneConfig } from 'react-declarative/components/One/components/OneConfig';
    export { createField } from 'react-declarative/components/One/config/createField';
    export { makeField } from 'react-declarative/components/One/components/makeField';
    export { createLayout } from 'react-declarative/components/One/config/createLayout';
    export { makeLayout } from 'react-declarative/components/One/components/makeLayout';
    export { useOneProps } from 'react-declarative/components/One/context/PropsProvider';
    export { useOneState } from 'react-declarative/components/One/context/StateProvider';
    export { useOnePayload } from 'react-declarative/components/One/context/PayloadProvider';
    export { OtherComboSlot } from 'react-declarative/components/One/other/OtherComboSlot';
    export { OtherItemsSlot } from 'react-declarative/components/One/other/OtherItemsSlot';
    export { useApiHandler } from 'react-declarative/components/One/api/useApiHandler';
    export { useLocalHandler } from 'react-declarative/components/One/api/useLocalHandler';
    export { useStaticHandler } from 'react-declarative/components/One/api/useStaticHandler';
    export { usePreventLeave } from 'react-declarative/components/One/api/usePreventLeave';
    export { default as OneSlotFactory } from 'react-declarative/components/One/components/SlotFactory';
    export { defaultSlots as OneDefaultSlots } from 'react-declarative/components/One/components/SlotFactory';
    export { default } from 'react-declarative/components/One/One';
}

declare module 'react-declarative/components/Dot' {
    export * from 'react-declarative/components/Dot/Dot';
    export { default } from 'react-declarative/components/Dot/Dot';
}

declare module 'react-declarative/components/List' {
    export * from "react-declarative/components/List/List";
    export * from "react-declarative/components/List/slots";
    export { useProps as useListProps } from 'react-declarative/components/List/hooks/useProps';
    export { useCachedRows as useListCachedRows } from 'react-declarative/components/List/hooks/useCachedRows';
    export { useApiPaginator } from 'react-declarative/components/List/api/useApiPaginator';
    export { useLastPagination } from 'react-declarative/components/List/api/useLastPagination';
    export { useQueryPagination } from 'react-declarative/components/List/api/useQueryPagination';
    export { useCachedPaginator } from 'react-declarative/components/List/api/useCachedPaginator';
    export { useArrayPaginator } from 'react-declarative/components/List/api/useArrayPaginator';
    export { default as ListSlotFactory } from 'react-declarative/components/List/components/SlotFactory';
    export { defaultSlots as ListDefaultSlots } from 'react-declarative/components/List/components/SlotFactory';
    export { useFilterData as useListFilterData } from 'react-declarative/components/List/hooks/useFilterData';
    export { usePagination as useListPagination } from 'react-declarative/components/List/hooks/usePagination';
    export { useSortModel as useListSortModel } from 'react-declarative/components/List/hooks/useSortModel';
    export { useChips as useListChips } from 'react-declarative/components/List/hooks/useChips';
    export { useSearch as useListSearch } from 'react-declarative/components/List/hooks/useSearch';
    export { usePayload as useListPayload } from 'react-declarative/components/List/hooks/usePayload';
    export { default } from "react-declarative/components/List/List";
}

declare module 'react-declarative/components/NoSsr' {
    export * from 'react-declarative/components/NoSsr/NoSsr';
    export { default } from 'react-declarative/components/NoSsr/NoSsr';
}

declare module 'react-declarative/components/Switch' {
    export * from 'react-declarative/components/Switch/Switch';
    export { default } from 'react-declarative/components/Switch/Switch';
}

declare module 'react-declarative/components/Center' {
    export * from 'react-declarative/components/Center/Center';
    export { default } from 'react-declarative/components/Center/Center';
}

declare module 'react-declarative/components/Square' {
    export * from 'react-declarative/components/Square/Square';
    export { default } from 'react-declarative/components/Square/Square';
}

declare module 'react-declarative/components/Scaffold' {
    export * from "react-declarative/components/Scaffold/Scaffold";
    export * from "react-declarative/components/Scaffold/model/IScaffoldProps";
    export * from "react-declarative/components/Scaffold/model/IScaffoldOption";
    export { default } from "react-declarative/components/Scaffold/Scaffold";
}

declare module 'react-declarative/components/Translate' {
    export * from 'react-declarative/components/Translate/Translate';
    export { default } from 'react-declarative/components/Translate/Translate';
}

declare module 'react-declarative/components/Breadcrumbs' {
    export * from 'react-declarative/components/Breadcrumbs/Breadcrumbs';
    export { default } from 'react-declarative/components/Breadcrumbs/Breadcrumbs';
}

declare module 'react-declarative/components/ErrorBoundary' {
    export * from 'react-declarative/components/ErrorBoundary/ErrorBoundary';
    export { default } from 'react-declarative/components/ErrorBoundary/ErrorBoundary';
}

declare module 'react-declarative/components/ActionMenu' {
    export * from 'react-declarative/components/ActionMenu/ActionMenu';
    export { default } from 'react-declarative/components/ActionMenu/ActionMenu';
}

declare module 'react-declarative/components/ActionButton' {
    export * from 'react-declarative/components/ActionButton/ActionButton';
    export { default } from 'react-declarative/components/ActionButton/ActionButton';
}

declare module 'react-declarative/components/ActionStopIcon' {
    export * from 'react-declarative/components/ActionStopIcon/ActionStopIcon';
    export { default } from 'react-declarative/components/ActionStopIcon/ActionStopIcon';
}

declare module 'react-declarative/components/ActionFab' {
    export * from 'react-declarative/components/ActionFab/ActionFab';
    export { default } from 'react-declarative/components/ActionFab/ActionFab';
}

declare module 'react-declarative/components/ActionFilter' {
    export * from 'react-declarative/components/ActionFilter/ActionFilter';
    export * from 'react-declarative/components/ActionFilter/model/IActionFilter';
    export { default } from 'react-declarative/components/ActionFilter/ActionFilter';
}

declare module 'react-declarative/components/ActionTrigger' {
    export * from 'react-declarative/components/ActionTrigger/ActionTrigger';
    export * from 'react-declarative/components/ActionTrigger/model/IActionTrigger';
    export { default } from 'react-declarative/components/ActionTrigger/ActionTrigger';
}

declare module 'react-declarative/components/ActionIcon' {
    export * from 'react-declarative/components/ActionIcon/ActionIcon';
    export { default } from 'react-declarative/components/ActionIcon/ActionIcon';
}

declare module 'react-declarative/components/ActionToggle' {
    export * from 'react-declarative/components/ActionToggle/ActionToggle';
    export { default } from 'react-declarative/components/ActionToggle/ActionToggle';
}

declare module 'react-declarative/components/ActionModal' {
    export * from 'react-declarative/components/ActionModal/ActionModal';
    export * from 'react-declarative/components/ActionModal/useActionModal';
    export { default } from 'react-declarative/components/ActionModal/useActionModal';
}

declare module 'react-declarative/components/SearchModal' {
    export * from 'react-declarative/components/SearchModal/SearchModal';
    export * from 'react-declarative/components/SearchModal/useSearchModal';
    export { default } from 'react-declarative/components/SearchModal/useSearchModal';
}

declare module 'react-declarative/components/ConstraintView' {
    export * from 'react-declarative/components/ConstraintView/ConstraintView';
    export { default } from 'react-declarative/components/ConstraintView/ConstraintView';
}

declare module 'react-declarative/components/ScrollTopView' {
    export * from 'react-declarative/components/ScrollTopView/ScrollTopView';
    export { default } from 'react-declarative/components/ScrollTopView/ScrollTopView';
}

declare module 'react-declarative/components/OutletView' {
    export * from 'react-declarative/components/OutletView/OutletView';
    export * from 'react-declarative/components/OutletView/model/IOutlet';
    export * from 'react-declarative/components/OutletView/model/IOutletProps';
    export { default } from 'react-declarative/components/OutletView/OutletView';
}

declare module 'react-declarative/components/AlertView' {
    export * from 'react-declarative/components/AlertView/AlertView';
    export { default } from 'react-declarative/components/AlertView/AlertView';
}

declare module 'react-declarative/components/DragDropView' {
    export * from 'react-declarative/components/DragDropView/DragDropView';
    export { default } from 'react-declarative/components/DragDropView/DragDropView';
}

declare module 'react-declarative/components/FilesView' {
    export * from 'react-declarative/components/FilesView/FilesView';
    export * from 'react-declarative/components/FilesView/api/usePreventNavigate';
    export * from 'react-declarative/components/FilesView/useFilesView';
    export { default } from 'react-declarative/components/FilesView/FilesView';
}

declare module 'react-declarative/components/ScrollView' {
    export * from 'react-declarative/components/ScrollView/ScrollView';
    export { default } from 'react-declarative/components/ScrollView/ScrollView';
}

declare module 'react-declarative/components/ScaleView' {
    export * from 'react-declarative/components/ScaleView/ScaleView';
    export { default } from 'react-declarative/components/ScaleView/ScaleView';
}

declare module 'react-declarative/components/AutoSizer' {
    export * from 'react-declarative/components/AutoSizer/AutoSizer';
    export { default } from 'react-declarative/components/AutoSizer/AutoSizer';
}

declare module 'react-declarative/components/FadeView' {
    export * from 'react-declarative/components/FadeView/FadeView';
    export { default } from 'react-declarative/components/FadeView/FadeView';
}

declare module 'react-declarative/components/TabsView' {
    export * from 'react-declarative/components/TabsView/TabsView';
    export * from 'react-declarative/components/TabsView/api/useTabsHashstate';
    export { default } from 'react-declarative/components/TabsView/TabsView';
}

declare module 'react-declarative/components/FetchView' {
    export * from 'react-declarative/components/FetchView/FetchView';
    export { Reveal, IRevealProps } from 'react-declarative/components/FetchView/components/Reveal';
    export { default } from 'react-declarative/components/FetchView/FetchView';
}

declare module 'react-declarative/components/WaitView' {
    export * from 'react-declarative/components/WaitView/WaitView';
    export { default } from 'react-declarative/components/WaitView/WaitView';
}

declare module 'react-declarative/components/PingView' {
    export * from 'react-declarative/components/PingView/PingView';
    export { default } from 'react-declarative/components/PingView/PingView';
}

declare module 'react-declarative/components/HtmlView' {
    export * from 'react-declarative/components/HtmlView/HtmlView';
    export { default } from 'react-declarative/components/HtmlView/HtmlView';
}

declare module 'react-declarative/components/OfflineView' {
    export * from 'react-declarative/components/OfflineView/OfflineView';
    export { default } from 'react-declarative/components/OfflineView/OfflineView';
}

declare module 'react-declarative/components/RevealView' {
    export * from 'react-declarative/components/RevealView/RevealView';
    export { default } from 'react-declarative/components/RevealView/RevealView';
}

declare module 'react-declarative/components/SecretView' {
    export * from 'react-declarative/components/SecretView/SecretView';
    export { default } from 'react-declarative/components/SecretView/SecretView';
}

declare module 'react-declarative/components/PortalView' {
    export * from 'react-declarative/components/PortalView/PortalView';
    export { default } from 'react-declarative/components/PortalView/PortalView';
}

declare module 'react-declarative/components/ErrorView' {
    export * from 'react-declarative/components/ErrorView/ErrorView';
    export { default } from 'react-declarative/components/ErrorView/ErrorView';
}

declare module 'react-declarative/components/AuthView' {
    export * from 'react-declarative/components/AuthView/AuthView';
    export { default } from 'react-declarative/components/AuthView/AuthView';
}

declare module 'react-declarative/components/ReloadView' {
    export * from 'react-declarative/components/ReloadView/ReloadView';
    export { default } from 'react-declarative/components/ReloadView/ReloadView';
}

declare module 'react-declarative/components/InfiniteView' {
    export * from 'react-declarative/components/InfiniteView/InfiniteView';
    export { default } from 'react-declarative/components/InfiniteView/InfiniteView';
}

declare module 'react-declarative/components/VirtualView' {
    export * from 'react-declarative/components/VirtualView/VirtualView';
    export { CHILD_ELEMENT as VIRTUAL_VIEW_CHILD } from 'react-declarative/components/VirtualView/VirtualView';
    export { ROOT_ELEMENT as VIRTUAL_VIEW_ROOT } from 'react-declarative/components/VirtualView/VirtualView';
    export { default } from 'react-declarative/components/VirtualView/VirtualView';
}

declare module 'react-declarative/components/LoaderView' {
    export * from 'react-declarative/components/LoaderView/LoaderView';
    export { default } from 'react-declarative/components/LoaderView/LoaderView';
}

declare module 'react-declarative/components/DocumentView' {
    export * from 'react-declarative/components/DocumentView/DocumentView';
    export { default } from 'react-declarative/components/DocumentView/DocumentView';
}

declare module 'react-declarative/components/ImageView' {
    export * from 'react-declarative/components/ImageView/ImageView';
    export { default } from 'react-declarative/components/ImageView/ImageView';
}

declare module 'react-declarative/components/TreeView' {
    export * from 'react-declarative/components/TreeView/TreeView';
    export { INode as ITreeViewNode } from 'react-declarative/components/TreeView/model/INode';
    export { default } from 'react-declarative/components/TreeView/TreeView';
}

declare module 'react-declarative/components/Grid' {
    export * from 'react-declarative/components/Grid/Grid';
    export { IColumn as IGridColumn } from 'react-declarative/components/Grid/model/IColumn';
    export { IGridAction } from 'react-declarative/components/Grid/model/IGridAction';
    export { TSort as TGridSort } from 'react-declarative/components/Grid/model/TSort';
}

declare module 'react-declarative/components/Search' {
    export * from 'react-declarative/components/Search/Search';
    export { default } from 'react-declarative/components/Search/Search';
}

declare module 'react-declarative/components/Spinner' {
    export * from 'react-declarative/components/Spinner/Spinner';
    export { default } from 'react-declarative/components/Spinner/Spinner';
}

declare module 'react-declarative/components/Async' {
    export * from 'react-declarative/components/Async/Async';
    export { default } from 'react-declarative/components/Async/Async';
}

declare module 'react-declarative/components/Copy' {
    export * from 'react-declarative/components/Copy/Copy';
    export { default } from 'react-declarative/components/Copy/Copy';
}

declare module 'react-declarative/components/If' {
    export * from 'react-declarative/components/If/If';
    export { default } from 'react-declarative/components/If/If';
}

declare module 'react-declarative/components/Countdown' {
    export * from 'react-declarative/components/Countdown/Countdown';
    export { default } from 'react-declarative/components/Countdown/Countdown';
}

declare module 'react-declarative/components/Chip' {
    export * from 'react-declarative/components/Chip/Chip';
    export { default } from 'react-declarative/components/Chip/Chip';
}

declare module 'react-declarative/components/ScrollAdjust' {
    export * from 'react-declarative/components/ScrollAdjust/ScrollAdjust';
    export { default } from 'react-declarative/components/ScrollAdjust/ScrollAdjust';
}

declare module 'react-declarative/components/MasterDetail' {
    export * from 'react-declarative/components/MasterDetail/MasterDetail';
    export * from 'react-declarative/components/MasterDetail/config';
    export { IMasterDetailOption } from 'react-declarative/components/MasterDetail/model/IMasterDetailOption';
    export { MasterDetailMode } from 'react-declarative/components/MasterDetail/model/MasterDetailMode';
    export { default } from 'react-declarative/components/MasterDetail/MasterDetail';
}

declare module 'react-declarative/components/CardView/CardView' {
    import ICardViewProps from "react-declarative/components/CardView/model/ICardViewProps";
    import IItemData from "react-declarative/components/CardView/model/IItemData";
    export const CardView: <ItemData extends IItemData = any>(props: ICardViewProps<ItemData, any>) => JSX.Element;
    export default CardView;
}

declare module 'react-declarative/components/CardView/model/ICardViewAction' {
    import IOption from "react-declarative/model/IOption";
    import IItemData from "react-declarative/components/CardView/model/IItemData";
    export interface ICardViewAction<ItemData extends IItemData = any, Payload extends any = any> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (row: ItemData, payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (row: ItemData, payload: Payload) => Promise<boolean> | boolean;
    }
    export default ICardViewAction;
}

declare module 'react-declarative/components/CardView/model/ICardViewOperation' {
    import { IActionTrigger } from "react-declarative/components/ActionTrigger";
    import IItemData from "react-declarative/components/CardView/model/IItemData";
    export interface ICardViewOperation<ItemData extends IItemData = any, Payload extends any = any> extends Omit<IActionTrigger, keyof {
        isAvailable: never;
    }> {
        isAvailable?: (selectedItems: ItemData[], isAllSelected: boolean, payload: Payload) => (boolean | Promise<boolean>);
    }
    export default ICardViewOperation;
}

declare module 'react-declarative/components/CardView/model/IItemData' {
    export interface IItemData {
        id: string | number;
    }
    export default IItemData;
}

declare module 'react-declarative/components/FeatureView/FeatureView' {
    import IFeatureViewProps from "react-declarative/components/FeatureView/model/IFeatureViewProps";
    export const FeatureView: <Data extends unknown = any, Payload = any>({ features, ...oneProps }: IFeatureViewProps<Data, Payload>) => JSX.Element;
    export default FeatureView;
}

declare module 'react-declarative/components/FeatureView/model/IFeature' {
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IFeature<Data extends IAnything = IAnything, Payload = IAnything> {
        name: string;
        label?: string;
        description?: string;
        defaultValue?: boolean;
        isDisabled?: IField<Data, Payload>['isDisabled'];
    }
    export default IFeature;
}

declare module 'react-declarative/components/FeatureView/model/IFeatureGroup' {
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    import IFeature from "react-declarative/components/FeatureView/model/IFeature";
    export interface IFeatureGroup<Data extends IAnything = IAnything, Payload = IAnything> {
        title: string;
        expanded?: boolean;
        children: IFeature<Data, Payload>[];
        isVisible?: IField<Data, Payload>['isVisible'];
    }
    export default IFeatureGroup;
}

declare module 'react-declarative/components/RecordView/RecordView' {
    import IData from "react-declarative/components/RecordView/model/IData";
    import IRecordViewProps from "react-declarative/components/RecordView/model/IRecordViewProps";
    export const RecordView: {
        <Data extends unknown = IData, Payload = any>({ data: upperData, search, onSearchChanged, formatValue, formatKey, withExpandAll, withExpandRoot, withExpandLevel, expandList, keyWidth, valueWidth, totalWidth, background, BeforeSearch, AfterSearch, payload, ...otherProps }: IRecordViewProps<Data, Payload>): JSX.Element;
        excelExport: (data: IData, sheetName?: string) => void;
    };
    export default RecordView;
}

declare module 'react-declarative/components/RecordView/helpers/excelExport' {
    import IData from 'react-declarative/components/RecordView/model/IData';
    export const excelExport: (data: IData, sheetName?: string) => void;
    export default excelExport;
}

declare module 'react-declarative/components/Scaffold2/Scaffold2' {
    import IScaffold2Props from 'react-declarative/components/Scaffold2/model/IScaffold2Props';
    export const Scaffold2: <T extends unknown = any>(props: IScaffold2Props<T>) => JSX.Element;
    export default Scaffold2;
}

declare module 'react-declarative/components/Scaffold2/model/IScaffold2Action' {
    import IOption from "react-declarative/model/IOption";
    import Payload from "react-declarative/components/Scaffold2/model/Payload";
    export interface IScaffold2Action<T = Payload> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (payload: T) => Promise<boolean> | boolean;
        isDisabled?: (payload: T) => Promise<boolean> | boolean;
    }
    export default IScaffold2Action;
}

declare module 'react-declarative/components/Scaffold2/model/IScaffold2Group' {
    import React from 'react';
    import IScaffold2Option, { IScaffold2OptionInternal } from "react-declarative/components/Scaffold2/model/IScaffold2Option";
    import Payload from "react-declarative/components/Scaffold2/model/Payload";
    export interface IScaffold2Group<T = Payload> {
        id: string;
        label?: string;
        icon?: React.ComponentType;
        noHeader?: boolean;
        isVisible?: () => boolean | (Promise<boolean>);
        isDisabled?: () => boolean | (Promise<boolean>);
        children: IScaffold2Option<T>[];
    }
    export interface IScaffold2GroupInternal<T = Payload> extends Omit<IScaffold2Group<T>, keyof {
        isVisible: never;
        isDisabled: never;
        children: never;
    }> {
        path: string;
        visible: boolean;
        disabled: boolean;
        children: IScaffold2OptionInternal<T>[];
    }
    export default IScaffold2Group;
}

declare module 'react-declarative/components/Scaffold2/model/IScaffold2Option' {
    import { SxProps } from "@mui/system";
    import IScaffold2Tab, { IScaffold2TabInternal } from "react-declarative/components/Scaffold2/model/IScaffold2Tab";
    import Payload from "react-declarative/components/Scaffold2/model/Payload";
    export interface IScaffold2Option<T = Payload> {
        id: string;
        label?: string;
        lifted?: boolean;
        pin?: boolean;
        sx?: SxProps;
        icon?: React.ComponentType<any>;
        tabs?: IScaffold2Tab<T>[];
        options?: IScaffold2Option<T>[];
        isVisible?: (payload: T) => boolean | (Promise<boolean>);
        isDisabled?: (payload: T) => boolean | (Promise<boolean>);
    }
    export interface IScaffold2OptionInternal<T = Payload> extends Omit<IScaffold2Option<T>, keyof {
        isVisible: never;
        isDisabled: never;
        options: never;
        tabs: never;
    }> {
        path: string;
        visible: boolean;
        disabled: boolean;
        options?: IScaffold2OptionInternal<T>[];
        tabs?: IScaffold2TabInternal<T>[];
    }
    export default IScaffold2Option;
}

declare module 'react-declarative/components/Scaffold2/model/IScaffold2Tab' {
    import React from "react";
    import Payload from "react-declarative/components/Scaffold2/model/Payload";
    export interface IScaffold2Tab<T = Payload> {
        id: string;
        label?: string;
        icon?: React.ComponentType<any>;
        isVisible?: (payload: T) => (Promise<boolean> | boolean);
        isDisabled?: (payload: T) => (Promise<boolean> | boolean);
        isActive?: (payload: T) => (Promise<boolean> | boolean);
    }
    export interface IScaffold2TabInternal<T = Payload> extends Omit<IScaffold2Tab<T>, keyof {
        isVisible: never;
        isDisabled: never;
        isActive: never;
    }> {
        id: string;
        path: string;
        label?: string;
        icon?: React.ComponentType<any>;
        visible: boolean;
        disabled: boolean;
        active: boolean;
    }
    export default IScaffold2Tab;
}

declare module 'react-declarative/components/Breadcrumbs2/Breadcrumbs2' {
    import * as React from "react";
    import IBreadcrumbs2Action from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action";
    import IBreadcrumbs2Option from "react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option";
    import { SxProps } from "@mui/system";
    interface IBreadcrumbs2Props<T extends any = any> {
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        onAction?: (action: string) => void;
        actions?: IBreadcrumbs2Action<T>[];
        items: IBreadcrumbs2Option<T>[];
        payload?: T;
        BeforeMenuContent?: React.ComponentType<any>;
        AfterMenuContent?: React.ComponentType<any>;
    }
    export const Breadcrumbs2: <T extends unknown = any>({ className, style, sx, onAction, items, actions, payload, BeforeMenuContent, AfterMenuContent, }: IBreadcrumbs2Props<T>) => JSX.Element;
    export default Breadcrumbs2;
}

declare module 'react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type' {
    export enum Breadcrumbs2Type {
        Link = "breadcrumbs2-link",
        Button = "breadcrumbs2-button"
    }
    export default Breadcrumbs2Type;
}

declare module 'react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Action' {
    import IAnything from "react-declarative/model/IAnything";
    import IOption from "react-declarative/model/IOption";
    export interface IBreadcrumbs2Action<Data = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (payload: Data) => (Promise<boolean> | boolean);
        isDisabled?: (payload: Data) => (Promise<boolean> | boolean);
    }
    export default IBreadcrumbs2Action;
}

declare module 'react-declarative/components/Breadcrumbs2/model/IBreadcrumbs2Option' {
    import IAnything from "react-declarative/model/IAnything";
    import IOption from "react-declarative/model/IOption";
    import Breadcrumbs2Type from "react-declarative/components/Breadcrumbs2/model/Breadcrumbs2Type";
    export interface IBreadcrumbs2Option<Data = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        type: Breadcrumbs2Type;
        isVisible?: (payload: Data) => (Promise<boolean> | boolean);
        isDisabled?: (payload: Data) => (Promise<boolean> | boolean);
    }
    export default IBreadcrumbs2Option;
}

declare module 'react-declarative/components/common/Group' {
    export * from 'react-declarative/components/common/Group/Group';
    export { default } from 'react-declarative/components/common/Group/Group';
}

declare module 'react-declarative/components/common/Outline' {
    export * from 'react-declarative/components/common/Outline/Outline';
    export { default } from 'react-declarative/components/common/Outline/Outline';
}

declare module 'react-declarative/components/common/Paper' {
    export * from 'react-declarative/components/common/Paper/Paper';
    export { default } from 'react-declarative/components/common/Paper/Paper';
}

declare module 'react-declarative/components/common/Expansion' {
    export * from 'react-declarative/components/common/Expansion/Expansion';
    export { default } from 'react-declarative/components/common/Expansion/Expansion';
}

declare module 'react-declarative/components/List/components/SlotFactory/SlotFactory' {
    import * as React from 'react';
    import ISlotFactoryContext from 'react-declarative/components/List/components/SlotFactory/ISlotFactoryContext';
    interface ISlotFactoryProps extends Partial<ISlotFactoryContext> {
        children: React.ReactNode;
    }
    export const SlotFactory: ({ children, ...currentSlots }: Partial<ISlotFactoryProps>) => JSX.Element;
    export default SlotFactory;
}

declare module 'react-declarative/components/List/components/SlotFactory/SlotContext' {
    import ISlotFactoryContext from 'react-declarative/components/List/components/SlotFactory/ISlotFactoryContext';
    export const defaultSlots: {
        BodyRow: <RowData extends import("../../../..").IRowData = any>(props: import("../..").IBodyRowSlot<RowData>) => JSX.Element;
        CheckboxCell: <RowData_1 extends import("../../../..").IRowData = any>({ row, }: import("./components/CheckboxCell").ICheckboxCellProps<RowData_1>) => JSX.Element;
        CommonCell: <RowData_2 extends import("../../../..").IRowData = any>({ column, row, onMenuToggle, onAction, }: import("../..").ICommonCellSlot<RowData_2>) => any;
        HeadRow: (props: import("../..").IHeadRowSlot<any>) => JSX.Element;
        ActionAdd: ({ action, width, label, isVisible, isDisabled, }: import("../..").IActionAddSlot<any, any>) => JSX.Element;
        ActionMenu: ({ options, deps, }: import("../..").IActionMenuSlot) => JSX.Element;
        ActionFab: ({ action, label, width, icon: Icon, isVisible, isDisabled, }: import("../..").IActionFabSlot<any, any>) => JSX.Element;
        ChipListSlot: <RowData_3 extends import("../../../..").IRowData = any>({ listChips, loading, }: import("../..").IChipListSlot<RowData_3>) => JSX.Element;
        ActionListSlot: <FilterData extends {}>({ className, actions, style, title, height, width, deps, }: import("../..").IActionListSlot<FilterData>) => JSX.Element;
        FilterListSlot: <FilterData_1 extends {}>({ className, style, height, filterData, filters, change, ready, clean, label, loading, withSearch, withToggledFilters, search, onSearchChange, onFilterChange, onCollapsedChange, }: import("../..").IFilterListSlot<FilterData_1>) => JSX.Element;
        OperationListSlot: ({ className, style, operations, width, }: import("../..").IOperationListSlot) => JSX.Element;
        SearchSlot: ({ className, style, label, loading, clean, search, onSearchChange, }: import("../..").ISearchSlot) => JSX.Element;
    };
    export const SlotContext: import("react").Context<ISlotFactoryContext>;
    export default SlotContext;
}

declare module 'react-declarative/components/List/components/SlotFactory/ISlotFactoryContext' {
    import { ComponentType } from 'react';
    import { IBodyRowSlot } from 'react-declarative/components/List/slots/BodyRowSlot';
    import { ICheckboxCellSlot } from 'react-declarative/components/List/slots/CheckboxCellSlot';
    import { ICommonCellSlot } from 'react-declarative/components/List/slots/CommonCellSlot';
    import { IHeadRowSlot } from 'react-declarative/components/List/slots/HeadRowSlot';
    import { IActionAddSlot } from 'react-declarative/components/List/slots/ActionAddSlot';
    import { IActionMenuSlot } from 'react-declarative/components/List/slots/ActionMenuSlot';
    import { IActionFabSlot } from 'react-declarative/components/List/slots/ActionFabSlot';
    import { IActionListSlot } from 'react-declarative/components/List/slots/ActionListSlot';
    import { IChipListSlot } from 'react-declarative/components/List/slots/ChipListSlot';
    import { IFilterListSlot } from 'react-declarative/components/List/slots/FilterListSlot';
    import { IOperationListSlot } from 'react-declarative/components/List/slots/OperationListSlot';
    import { ISearchSlot } from 'react-declarative/components/List/slots/SearchSlot';
    export interface ISlotFactoryContext {
        BodyRow: ComponentType<IBodyRowSlot>;
        CheckboxCell: ComponentType<ICheckboxCellSlot>;
        CommonCell: ComponentType<ICommonCellSlot>;
        HeadRow: ComponentType<IHeadRowSlot>;
        ActionAdd: ComponentType<IActionAddSlot>;
        ActionFab: ComponentType<IActionFabSlot>;
        ActionMenu: ComponentType<IActionMenuSlot>;
        ActionListSlot: ComponentType<IActionListSlot>;
        FilterListSlot: ComponentType<IFilterListSlot>;
        ChipListSlot: ComponentType<IChipListSlot>;
        OperationListSlot: ComponentType<IOperationListSlot>;
        SearchSlot: ComponentType<ISearchSlot>;
    }
    export default ISlotFactoryContext;
}

declare module 'react-declarative/components/One/components/SlotFactory/SlotFactory' {
    import * as React from 'react';
    import ISlotFactoryContext from 'react-declarative/components/One/components/SlotFactory/ISlotFactoryContext';
    interface ISlotFactoryProps extends Partial<ISlotFactoryContext> {
        children: React.ReactNode;
    }
    export const SlotFactory: ({ children, ...currentSlots }: Partial<ISlotFactoryProps>) => JSX.Element;
    export default SlotFactory;
}

declare module 'react-declarative/components/One/components/SlotFactory/SlotContext' {
    import ISlotFactoryContext from 'react-declarative/components/One/components/SlotFactory/ISlotFactoryContext';
    export const defaultSlots: {
        CheckBox: ({ disabled, onChange, title, value, }: import("../..").ICheckBoxSlot) => JSX.Element;
        Combo: ({ value: upperValue, disabled, readonly, description, placeholder, outlined, itemList, virtualListBox, labelShrink, noDeselect, freeSolo, title, dirty, invalid, tr, shouldUpdateItemList: shouldUpdate, onChange, }: import("../..").IComboSlot) => JSX.Element;
        Items: ({ value: upperValue, disabled, readonly, description, placeholder, outlined, itemList, freeSolo, noDeselect, virtualListBox, labelShrink, dirty, invalid, title, tr, shouldUpdateItemList: shouldUpdate, onChange, }: import("../..").IItemsSlot) => JSX.Element;
        Line: ({ title, lineTransparent, }: import("../..").ILineSlot) => JSX.Element;
        Radio: ({ disabled, value, onChange, title, radioValue, name, }: import("../..").IRadioSlot) => JSX.Element;
        Rating: ({ value, disabled, readonly, name, onChange, }: import("../..").IRatingSlot) => JSX.Element;
        Progress: ({ maxPercent, showPercentLabel, value, }: import("../..").IProgressSlot) => JSX.Element;
        Typography: ({ value, placeholder, typoVariant, style, }: import("../..").ITypographySlot) => JSX.Element;
        Text: ({ invalid, value, disabled, readonly, inputType, inputMode, inputPattern, labelShrink, description, outlined, title, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, inputRows: rows, placeholder, inputAutocomplete: autoComplete, inputFormatterSymbol: symbol, inputFormatterAllowed: allowed, inputFormatterReplace: replace, inputFormatterTemplate: template, inputFormatter, dirty, loading, autoFocus, inputRef, onChange, name, }: import("../..").ITextSlot) => JSX.Element;
        Date: ({ invalid, value: upperValue, disabled, readonly, description, outlined, title, placeholder, labelShrink, dirty, autoFocus, inputRef, onChange, name, }: import("../..").IDateSlot) => JSX.Element;
        Time: ({ invalid, value: upperValue, disabled, readonly, description, outlined, title, labelShrink, placeholder, dirty, autoFocus, inputRef, onChange, name, }: import("../..").ITimeSlot) => JSX.Element;
        Switch: ({ disabled, value, onChange, title, }: import("../..").ISwitchSlot) => JSX.Element;
        Slider: ({ value, onChange, leadingIcon: li, trailingIcon: ti, leadingIconClick: lic, trailingIconClick: tic, labelFormatSlider, stepSlider, maxSlider, minSlider, }: import("../..").ISliderSlot) => JSX.Element;
        File: ({ invalid, value, disabled, readonly, description, outlined, labelShrink, title, placeholder, dirty, loading: upperLoading, inputRef, onChange, fileAccept, upload, view, name, }: import("../..").IFileSlot) => JSX.Element;
        Choose: ({ invalid, value, disabled, readonly, description, outlined, title, placeholder, labelShrink, dirty, loading: upperLoading, inputRef, onChange, choose, tr, name, }: import("../..").IChooseSlot) => JSX.Element;
        Complete: ({ invalid, value, disabled, readonly, inputType, inputMode, inputPattern, labelShrink, description, outlined, keepRaw, title, placeholder, inputAutocomplete: autoComplete, dirty, loading: upperLoading, tip, autoFocus, inputRef, onChange, name, }: import("../..").ICompleteSlot) => JSX.Element;
    };
    export const SlotContext: import("react").Context<ISlotFactoryContext>;
    export default SlotContext;
}

declare module 'react-declarative/components/One/components/SlotFactory/ISlotFactoryContext' {
    import { ComponentType } from 'react';
    import { IProgressSlot } from 'react-declarative/components/One/slots/ProgressSlot';
    import { ICheckBoxSlot } from 'react-declarative/components/One/slots/CheckBoxSlot';
    import { IItemsSlot } from 'react-declarative/components/One/slots/ItemsSlot';
    import { IComboSlot } from 'react-declarative/components/One/slots/ComboSlot';
    import { ILineSlot } from 'react-declarative/components/One/slots/LineSlot';
    import { IRadioSlot } from 'react-declarative/components/One/slots/RadioSlot';
    import { IRatingSlot } from 'react-declarative/components/One/slots/RatingSlot';
    import { ITypographySlot } from 'react-declarative/components/One/slots/TypographySlot';
    import { ITextSlot } from 'react-declarative/components/One/slots/TextSlot';
    import { IDateSlot } from 'react-declarative/components/One/slots/DateSlot';
    import { ITimeSlot } from 'react-declarative/components/One/slots/TimeSlot';
    import { ISwitchSlot } from 'react-declarative/components/One/slots/SwitchSlot';
    import { ISliderSlot } from 'react-declarative/components/One/slots/SliderSlot';
    import { IFileSlot } from 'react-declarative/components/One/slots/FileSlot/IFileSlot';
    import { IChooseSlot } from 'react-declarative/components/One/slots/ChooseSlot';
    import { ICompleteSlot } from 'react-declarative/components/One/slots/CompleteSlot';
    export interface ISlotFactoryContext {
        CheckBox: ComponentType<ICheckBoxSlot>;
        Combo: ComponentType<IComboSlot>;
        Items: ComponentType<IItemsSlot>;
        Line: ComponentType<ILineSlot>;
        Progress: ComponentType<IProgressSlot>;
        Radio: ComponentType<IRadioSlot>;
        Rating: ComponentType<IRatingSlot>;
        Typography: ComponentType<ITypographySlot>;
        Text: ComponentType<ITextSlot>;
        Date: ComponentType<IDateSlot>;
        Time: ComponentType<ITimeSlot>;
        Switch: ComponentType<ISwitchSlot>;
        Slider: ComponentType<ISliderSlot>;
        File: ComponentType<IFileSlot>;
        Choose: ComponentType<IChooseSlot>;
        Complete: ComponentType<ICompleteSlot>;
    }
    export default ISlotFactoryContext;
}

declare module 'react-declarative/components/common/ListPicker/ListPicker' {
    import IRowData, { RowId } from 'react-declarative/model/IRowData';
    import IListProps from 'react-declarative/model/IListProps';
    import IAnything from 'react-declarative/model/IAnything';
    import IColumn from 'react-declarative/model/IColumn';
    import SelectionMode from 'react-declarative/model/SelectionMode';
    import IListRowAction from 'react-declarative/model/IListRowAction';
    export interface IListPickerProps<RowData extends IRowData = IAnything> {
        onChange: (data: RowId[] | null) => void;
        handler: IListProps<RowData>['handler'];
        selectionMode: SelectionMode.Single | SelectionMode.Multiple;
        columns: Omit<IColumn<RowData>, keyof {
            headerName: never;
            width: never;
        }>[];
        selectedRows: NonNullable<IListProps<RowData>['selectedRows']> | null;
        minHeight: number;
        minWidth: number;
        title: string;
        open: boolean;
        rowActions?: IListRowAction[];
    }
    export const ListPicker: <RowData extends IRowData = any>({ onChange, handler, title, columns, open, selectionMode, selectedRows: selectedRowsDefault, minHeight, minWidth, rowActions, }: IListPickerProps<RowData>) => JSX.Element;
    export default ListPicker;
}

declare module 'react-declarative/components/One/One' {
    import IField from 'react-declarative/model/IField';
    import TypedField from "react-declarative/model/TypedField";
    import IOnePublicProps from "react-declarative/model/IOnePublicProps";
    export const One: {
        <Data extends unknown = any, Payload = any, Field = IField<Data, any>>(props: IOnePublicProps<Data, Payload, Field>): JSX.Element;
        displayName: string;
        /**
          * После написания формы можно включить строгую
          * проверку типов полей
          * <One.typed handler={...
          *     ^^^^^^
          */
        typed: {
            <Data_1 extends unknown = any, Payload_1 extends unknown = any, Field_1 = TypedField<Data_1, any>>(props: IOnePublicProps<Data_1, Payload_1, Field_1>): JSX.Element;
            displayName: string;
        };
    };
    export const OneTyped: {
        <Data extends unknown = any, Payload extends unknown = any, Field = TypedField<Data, any>>(props: IOnePublicProps<Data, Payload, Field>): JSX.Element;
        displayName: string;
    };
    export default One;
}

declare module 'react-declarative/components/One/slots' {
    export * from 'react-declarative/components/One/slots/CheckBoxSlot';
    export * from 'react-declarative/components/One/slots/ComboSlot';
    export * from 'react-declarative/components/One/slots/ItemsSlot';
    export * from 'react-declarative/components/One/slots/LineSlot';
    export * from 'react-declarative/components/One/slots/ProgressSlot';
    export * from 'react-declarative/components/One/slots/RadioSlot';
    export * from 'react-declarative/components/One/slots/RatingSlot';
    export * from 'react-declarative/components/One/slots/SliderSlot';
    export * from 'react-declarative/components/One/slots/SwitchSlot';
    export * from 'react-declarative/components/One/slots/TextSlot';
    export * from 'react-declarative/components/One/slots/TypographySlot';
    export * from 'react-declarative/components/One/slots/DateSlot';
    export * from 'react-declarative/components/One/slots/TimeSlot';
    export * from 'react-declarative/components/One/slots/FileSlot';
    export * from 'react-declarative/components/One/slots/ChooseSlot';
    export * from 'react-declarative/components/One/slots/CompleteSlot';
}

declare module 'react-declarative/components/One/components/OneConfig' {
    export * from 'react-declarative/components/One/components/OneConfig/OneConfig';
    export { default } from 'react-declarative/components/One/components/OneConfig/OneConfig';
}

declare module 'react-declarative/components/One/config/createField' {
    import IEntity from "react-declarative/model/IEntity";
    /**
      * Фабрика для создания полей
      */
    export const createField: <Data extends unknown = any>(entity: IEntity<Data, any>, currentPath?: string) => JSX.Element;
    export default createField;
}

declare module 'react-declarative/components/One/components/makeField' {
    export * from 'react-declarative/components/One/components/makeField/makeField';
    export { default } from 'react-declarative/components/One/components/makeField/makeField';
}

declare module 'react-declarative/components/One/config/createLayout' {
    import * as React from "react";
    import IEntity from "react-declarative/model/IEntity";
    /**
      * Фабрика для создания компоновок
      */
    export const createLayout: <Data extends unknown = any>(entity: IEntity<Data, any>, children: React.ReactNode, currentPath?: string) => JSX.Element;
    export default createLayout;
}

declare module 'react-declarative/components/One/components/makeLayout' {
    export * from 'react-declarative/components/One/components/makeLayout/makeLayout';
    export { default } from 'react-declarative/components/One/components/makeLayout/makeLayout';
}

declare module 'react-declarative/components/One/context/PropsProvider' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IOneProps from 'react-declarative/model/IOneProps';
    interface IPropsProviderProps<Data extends IAnything = IAnything, Field extends IField<Data> = IField<Data>> extends IOneProps<Data, Field> {
        children: React.ReactNode;
    }
    export const PropsProvider: <Data extends unknown = any, Field extends IField<Data, any> = IField<Data, any>>({ children, ...props }: IPropsProviderProps<Data, Field>) => JSX.Element;
    export const useOneProps: <Data extends unknown = any>() => IOneProps<Data, any, IField<Data, any>>;
    export default PropsProvider;
}

declare module 'react-declarative/components/One/context/StateProvider' {
    import * as React from 'react';
    import IField from 'react-declarative/model/IField';
    import IAnything from 'react-declarative/model/IAnything';
    import IOneProps from 'react-declarative/model/IOneProps';
    interface IStateProviderProps<Data = IAnything, Payload = IAnything, Field extends IField<Data, Payload> = IField<Data, Payload>> extends IOneProps<Data, Payload, Field> {
        payload: Payload;
        children: React.ReactElement;
    }
    interface IState<Data = IAnything> {
        object: Data | null;
        setObject: (data: Data, invalidMap: Record<string, boolean>) => void;
    }
    export const StateProvider: <Data extends unknown, Payload extends unknown, Field extends IField<Data, Payload> = IField<Data, Payload>>({ children, ...otherProps }: IStateProviderProps<Data, Payload, Field>) => JSX.Element;
    export const useOneState: <Data extends unknown>() => IState<Data>;
    export default StateProvider;
}

declare module 'react-declarative/components/One/context/PayloadProvider' {
    import * as React from 'react';
    import IOneProps from 'react-declarative/model/IOneProps';
    interface IPayloadProviderProps {
        children: React.ReactNode;
        payload?: IOneProps['payload'];
    }
    export const PayloadProvider: ({ children, payload, }: IPayloadProviderProps) => JSX.Element;
    export const useOnePayload: () => any;
    export default PayloadProvider;
}

declare module 'react-declarative/components/One/other/OtherComboSlot' {
    import { IComboSlot } from 'react-declarative/components/One/slots/ComboSlot';
    export const OtherComboSlot: ({ value, disabled, readonly, description, placeholder, outlined, itemList, title, dirty, invalid, tr, onChange, }: IComboSlot) => JSX.Element;
    export default OtherComboSlot;
}

declare module 'react-declarative/components/One/other/OtherItemsSlot' {
    import { IItemsSlot } from 'react-declarative/components/One/slots/ItemsSlot';
    export const OtherItemsSlot: ({ value, disabled, readonly, description, placeholder, outlined, itemList, dirty, invalid, title, tr, onChange, }: IItemsSlot) => JSX.Element;
    export default OtherItemsSlot;
}

declare module 'react-declarative/components/One/api/useLocalHandler' {
    import IOneProps, { OneHandler } from "react-declarative/model/IOneProps";
    import IAnything from "react-declarative/model/IAnything";
    export interface ILocalHandlerParams<Data extends IAnything = IAnything, Payload extends IAnything = IAnything> {
        payload?: Payload;
        resultMap?: (json: Record<string, any> | null) => Data | null;
        onLoadBegin?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
    }
    export interface ILocalHandlerResult<Data extends IAnything = IAnything> {
        data: Data | null;
        change: IOneProps<Data>['change'];
    }
    export const useLocalHandler: <Data extends unknown = any, Payload extends unknown = any>(handler: OneHandler<Data, Payload>, { resultMap, payload, onLoadBegin, onLoadEnd, fallback, }?: ILocalHandlerParams<Data, any>) => ILocalHandlerResult<Data>;
    export default useLocalHandler;
}

declare module 'react-declarative/components/One/api/useStaticHandler' {
    import { OneHandler } from "react-declarative/model/IOneProps";
    import IAnything from "react-declarative/model/IAnything";
    export interface IStaticHandlerParams<Data extends IAnything = IAnything> {
        resultMap?: (json: Record<string, any> | null) => Data | null;
        onLoadBegin?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
    }
    export const useStaticHandler: <Data extends unknown = any, Payload = any>(handler: OneHandler<Data, Payload>, { resultMap, onLoadBegin, onLoadEnd, fallback, }?: IStaticHandlerParams<Data>) => OneHandler<Data, Payload>;
    export default useStaticHandler;
}

declare module 'react-declarative/components/One/api/usePreventLeave' {
    import { BrowserHistory, MemoryHistory, HashHistory } from "history";
    import IOneProps from "react-declarative/model/IOneProps";
    import IAnything from "react-declarative/model/IAnything";
    import TSubject from 'react-declarative/model/TSubject';
    export interface IPreventLeaveParams<Data = IAnything, ID = string> {
        history?: BrowserHistory | MemoryHistory | HashHistory;
        waitForChangesDelay?: number;
        readonly?: boolean;
        updateSubject?: TSubject<[ID, Data]>;
        changeSubject?: TSubject<Data>;
        shouldAutoSave?: () => boolean;
        checkUpdate?: (id: ID, data: Data) => boolean;
        checkDirty?: (prevData: Data, currentData: Data) => boolean;
        onChange?: IOneProps<Data>['change'];
        onBlock?: () => (() => void) | void;
        onUpdate?: (id: ID, data: Data) => void;
        onSave?: (data: Data) => (boolean | Promise<boolean>);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
    }
    export interface IPreventLeaveReturn<Data = IAnything> {
        oneProps: {
            change: (data: Data, initial?: boolean) => void;
            invalidity: IOneProps<Data>['invalidity'];
            readonly: IOneProps<Data>['readonly'];
            changeSubject: IOneProps<Data>['changeSubject'];
            fallback?: (e: Error) => void;
        };
        data: Data | null;
        hasChanged: boolean;
        hasLoading: boolean;
        beginSave: () => Promise<boolean>;
        afterSave: () => void;
        dropChanges: () => void;
        waitForChanges: () => Promise<void>;
    }
    export const usePreventLeave: <Data = any, ID = string>({ history, waitForChangesDelay, readonly: upperReadonly, onChange, onLoadStart, onLoadEnd, onBlock, onSave, onUpdate, checkUpdate, checkDirty, shouldAutoSave, fallback, updateSubject: upperUpdateSubject, changeSubject: upperChangeSubject, }?: IPreventLeaveParams<Data, ID>) => IPreventLeaveReturn<Data>;
    export default usePreventLeave;
}

declare module 'react-declarative/components/Dot/Dot' {
    import { BoxProps } from '@mui/material/Box';
    interface IDotProps extends BoxProps {
        side: number;
        color: string;
    }
    export const Dot: ({ className, color: background, side, ...otherProps }: IDotProps) => JSX.Element;
    export default Dot;
}

declare module 'react-declarative/components/List/List' {
    import IRowData from "react-declarative/model/IRowData";
    import IField from "react-declarative/model/IField";
    import IListProps from "react-declarative/model/IListProps";
    import TypedField from "react-declarative/model/TypedField";
    export const List: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>(props: IListProps<FilterData, RowData, Payload, Field>) => JSX.Element;
    export const ListTyped: <FilterData extends {} = any, RowData extends IRowData = any>(props: IListProps<FilterData, RowData, TypedField<FilterData, any>, IField<FilterData, TypedField<FilterData, any>>>) => JSX.Element;
    export default List;
}

declare module 'react-declarative/components/List/slots' {
    export * from 'react-declarative/components/List/slots/ActionAddSlot';
    export * from 'react-declarative/components/List/slots/ActionFabSlot';
    export * from 'react-declarative/components/List/slots/ActionMenuSlot';
    export * from 'react-declarative/components/List/slots/BodyRowSlot';
    export * from 'react-declarative/components/List/slots/CheckboxCellSlot';
    export * from 'react-declarative/components/List/slots/CommonCellSlot';
    export * from 'react-declarative/components/List/slots/HeadRowSlot';
    export * from 'react-declarative/components/List/slots/ActionListSlot';
    export * from 'react-declarative/components/List/slots/ChipListSlot';
    export * from 'react-declarative/components/List/slots/FilterListSlot';
    export * from 'react-declarative/components/List/slots/OperationListSlot';
    export * from 'react-declarative/components/List/slots/SearchSlot';
}

declare module 'react-declarative/components/List/hooks/useProps' {
    import * as React from 'react';
    import IListProps, { IListCallbacks, IListState } from 'react-declarative/model/IListProps';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    import IRowData from 'react-declarative/model/IRowData';
    interface IPropContext<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> extends Omit<IListProps<FilterData, RowData, Payload, Field>, keyof {
        limit: never;
        chips: never;
        search: never;
        filterData: never;
        isChooser: never;
        payload: never;
    }>, IListState<FilterData, RowData>, IListCallbacks<FilterData, RowData> {
        children: React.ReactNode;
    }
    export const PropProvider: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>(props: IPropContext<FilterData, RowData, Payload, Field>) => JSX.Element;
    export const useProps: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>() => IPropContext<FilterData, RowData, Payload, Field>;
    export default useProps;
}

declare module 'react-declarative/components/List/hooks/useCachedRows' {
    import React from 'react';
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData, { RowId } from 'react-declarative/model/IRowData';
    export const useCachedRows: <RowData extends IRowData = any>() => IState<RowData>;
    interface ICachedRowsProviderProps {
        children: React.ReactNode;
    }
    interface IState<RowData extends IRowData = IAnything> {
        cachedRows: Map<RowId, RowData>;
        selectedRows: RowData[];
    }
    export const CachedRowsProvider: <RowData extends IRowData = any>({ children, }: ICachedRowsProviderProps) => JSX.Element;
    export default useCachedRows;
}

declare module 'react-declarative/components/List/api/useQueryPagination' {
    import IAnything from "react-declarative/model/IAnything";
    import IListProps from "react-declarative/model/IListProps";
    import IRowData from "react-declarative/model/IRowData";
    interface IQuery<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        filterData: IListProps<FilterData, RowData>['filterData'];
        sortModel: IListProps<FilterData, RowData>['sortModel'];
        chipData: IListProps<FilterData, RowData>['chipData'];
        limit: IListProps<FilterData, RowData>['limit'];
        page: IListProps<FilterData, RowData>['page'];
        search: IListProps<FilterData, RowData>['search'];
    }
    interface IParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        removeEmptyFilters: (data: FilterData) => Partial<FilterData>;
        onFilterChange: IListProps<FilterData, RowData>['onFilterChange'];
        onLimitChange: IListProps<FilterData, RowData>['onLimitChange'];
        onPageChange: IListProps<FilterData, RowData>['onPageChange'];
        onSortModelChange: IListProps<FilterData, RowData>['onSortModelChange'];
        onChipsChange: IListProps<FilterData, RowData>['onChipsChange'];
        onSearchChange: IListProps<FilterData, RowData>['onSearchChange'];
        onChange?: (pagination: string) => void;
        fallback?: (e: Error) => void;
    }
    type FilterDataT<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = Exclude<IQuery<FilterData, RowData>['filterData'], undefined>;
    type SortModelT<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = Exclude<IQuery<FilterData, RowData>['sortModel'], undefined>;
    type ChipDataT<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> = Exclude<IQuery<FilterData, RowData>['chipData'], undefined>;
    export const DEFAULT_QUERY: IQuery;
    export const useQueryPagination: <FilterData extends {} = any, RowData extends IRowData = any>(initialValue?: IQuery<FilterData, RowData>, { onFilterChange: handleFilterChange, onLimitChange: handleLimitChange, onPageChange: handlePageChange, onSortModelChange: handleSortModelChange, onChipsChange: handleChipsChange, onSearchChange: handleSeachChange, onChange: handleChange, removeEmptyFilters, fallback, }?: Partial<IParams<FilterData, RowData>>) => {
        setFilterData: (data: FilterData) => void;
        setSortModel: (sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>) => void;
        setChipData: (data: Partial<Record<keyof RowData, boolean>>) => void;
        setLimit: (limit: number) => void;
        setPage: (page: number) => void;
        setSearch: (search: string) => void;
        getFilterData: () => Exclude<Partial<FilterData>, undefined>;
        getSortModel: () => import("../../../model/IListProps").ListHandlerSortModel<RowData>;
        getChipData: () => Exclude<Partial<Record<keyof RowData, boolean>>, undefined>;
        getLimit: () => number;
        getPage: () => number;
        getSearch: () => string;
        listProps: {
            filterData: Partial<FilterData> | undefined;
            sortModel: import("../../../model/IListProps").ListHandlerSortModel<RowData> | undefined;
            chipData: Partial<Record<keyof RowData, boolean>> | undefined;
            limit: number | undefined;
            page: number | undefined;
            search: string | undefined;
            fallback?: ((e: Error) => void) | undefined;
            onFilterChange: (data: FilterData) => void;
            onLimitChange: (limit: number) => void;
            onPageChange: (page: number) => void;
            onSortModelChange: (sort: import("../../../model/IListProps").ListHandlerSortModel<RowData>) => void;
            onChipsChange: (data: Partial<Record<keyof RowData, boolean>>) => void;
            onSearchChange: (search: string) => void;
        };
    };
    export default useQueryPagination;
}

declare module 'react-declarative/components/List/api/useCachedPaginator' {
    import { ListHandler } from 'react-declarative/model/IListProps';
    import IAnything from 'react-declarative/model/IAnything';
    import IRowData from 'react-declarative/model/IRowData';
    import { IArrayPaginatorParams } from "react-declarative/components/List/api/useArrayPaginator";
    interface IResult<FilterData extends {} = IAnything, RowData extends IRowData = IAnything> {
        handler: ListHandler<FilterData, RowData>;
        clear: () => void;
    }
    export const useCachedPaginator: <FilterData extends {} = any, RowData extends IRowData = any>(handler: ListHandler<FilterData, RowData, any>, params: IArrayPaginatorParams<FilterData, RowData>) => IResult<FilterData, RowData>;
    export default useCachedPaginator;
}

declare module 'react-declarative/components/List/hooks/useFilterData' {
    import * as React from "react";
    import IListProps from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    import IRowData from "react-declarative/model/IRowData";
    type IContext<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> = Exclude<IListProps<FilterData, RowData, Payload, Field>["filterData"], undefined>;
    interface IProps<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> {
        value: IContext<FilterData, RowData, Payload, Field>;
        children: React.ReactNode;
    }
    export const FilterDataProvider: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>({ children, value, }: IProps<FilterData, RowData, Payload, Field>) => JSX.Element;
    export const useFilterData: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>() => Exclude<Partial<FilterData>, undefined>;
    export default useFilterData;
}

declare module 'react-declarative/components/List/hooks/usePagination' {
    import * as React from "react";
    import { ListHandlerPagination } from "react-declarative/model/IListProps";
    type IContext = ListHandlerPagination;
    interface IProps extends IContext {
        children: React.ReactNode;
    }
    export const PaginationProvider: ({ children, limit, offset }: IProps) => JSX.Element;
    export const usePagination: () => ListHandlerPagination;
    export default usePagination;
}

declare module 'react-declarative/components/List/hooks/useSortModel' {
    import React from 'react';
    import { IListSortItem, ListHandlerSortModel } from 'react-declarative/model/IListProps';
    export const useSortModel: () => IState;
    interface ISortModelProviderProps {
        children: React.ReactNode;
        sortModel: ListHandlerSortModel;
    }
    interface IState {
        sortModel: Map<IListSortItem['field'], IListSortItem>;
        setSortModel: (s: Map<IListSortItem['field'], IListSortItem>) => void;
    }
    export const SortModelProvider: ({ children, sortModel: upperSortModel, }: ISortModelProviderProps) => JSX.Element;
    export default useSortModel;
}

declare module 'react-declarative/components/List/hooks/useChips' {
    import React from 'react';
    import { IListChip, ListHandlerChips } from 'react-declarative/model/IListProps';
    export const useChips: () => IState;
    interface IChipsProviderProps {
        children: React.ReactNode;
        chips: IListChip[];
        chipData: ListHandlerChips;
    }
    interface IState {
        chips: Map<string, boolean>;
        setChips: (s: Map<string, boolean>) => void;
    }
    export const ChipsProvider: ({ children, chips: upperChips, chipData, }: IChipsProviderProps) => JSX.Element;
    export default useChips;
}

declare module 'react-declarative/components/List/hooks/useSearch' {
    import * as React from "react";
    type IContext = string;
    interface IProps {
        value: IContext;
        children: React.ReactNode;
    }
    export const SearchProvider: (props: IProps) => JSX.Element;
    export const useSearch: () => string;
    export default useSearch;
}

declare module 'react-declarative/components/List/hooks/usePayload' {
    import * as React from 'react';
    import IListProps from 'react-declarative/model/IListProps';
    interface IPayloadProviderProps {
        children: React.ReactNode;
        value: Exclude<IListProps['payload'], undefined>;
    }
    export const PayloadProvider: ({ children, value, }: IPayloadProviderProps) => JSX.Element;
    export const usePayload: () => any;
    export default usePayload;
}

declare module 'react-declarative/components/NoSsr/NoSsr' {
    import * as React from "react";
    interface INoSsrProps {
        ServerView?: React.ComponentType<any>;
        children?: React.ReactNode;
    }
    interface State {
        canRender: boolean;
    }
    export class NoSsr extends React.Component<INoSsrProps, State> {
        constructor(props: INoSsrProps);
        componentDidMount: () => void;
        render: () => JSX.Element;
    }
    export default NoSsr;
}

declare module 'react-declarative/components/Switch/Switch' {
    import * as React from "react";
    import { BrowserHistory, HashHistory, MemoryHistory } from "history";
    import { IFetchViewProps } from "react-declarative/components/FetchView";
    export interface ISwitchItem {
        path: string;
        element?: React.ComponentType<any>;
        guard?: () => boolean | Promise<boolean>;
        prefetch?: (params: Record<string, any>) => Record<string, any> | Promise<Record<string, any>>;
        unload?: (params: Record<string, any>) => Promise<void> | void;
        redirect?: string | ((params: Record<string, any>) => string | null);
    }
    export interface ISwitchProps {
        className?: string;
        style?: React.CSSProperties;
        items: ISwitchItem[];
        fallback?: (e: Error) => void;
        history?: BrowserHistory | MemoryHistory | HashHistory;
        Forbidden?: React.ComponentType<any>;
        NotFound?: React.ComponentType<any>;
        Loader?: React.ComponentType<any>;
        Error?: React.ComponentType<any>;
        animation?: IFetchViewProps["animation"];
        onLoadStart?: () => void;
        onLoadEnd?: (isOk?: boolean) => void;
        onInit?: () => void;
        onDispose?: () => void;
        throwError?: boolean;
        children?: (result: ISwitchResult) => React.ReactNode;
    }
    interface ISwitchResult {
        element: React.ComponentType<any>;
        key: string;
        path: string;
        params?: Record<string, any>;
    }
    export const Switch: ({ className, style, Loader, Forbidden, NotFound, Error, animation, history, children, fallback, items: upperItems, onLoadStart, onLoadEnd, onInit, onDispose, throwError, }: ISwitchProps) => JSX.Element;
    export default Switch;
}

declare module 'react-declarative/components/Center/Center' {
    import { BoxProps } from '@mui/material/Box';
    interface ICenterProps extends BoxProps {
    }
    export const Center: ({ className, ...otherProps }: ICenterProps) => JSX.Element;
    export default Center;
}

declare module 'react-declarative/components/Square/Square' {
    import * as React from 'react';
    import { BoxProps } from '@mui/material/Box';
    interface ISquareProps extends BoxProps {
        children: React.ReactNode;
    }
    export const Square: ({ className, children, ...otherProps }: ISquareProps) => JSX.Element;
    export default Square;
}

declare module 'react-declarative/components/Scaffold/Scaffold' {
    import IScaffoldProps from 'react-declarative/components/Scaffold/model/IScaffoldProps';
    export const Scaffold: <T extends unknown = any>({ roles, payload, throwError, fallback, options, loadingLine, loading, Loader, withPassthrough, onInit, ...props }: IScaffoldProps<T>) => JSX.Element;
    export default Scaffold;
}

declare module 'react-declarative/components/Scaffold/model/IScaffoldProps' {
    import IMenuGroup from "react-declarative/model/IMenuGroup";
    import IScaffoldOption from "react-declarative/components/Scaffold/model/IScaffoldOption";
    export interface IScaffoldProps<T extends any = any> {
        children: React.ReactNode;
        className?: string;
        dense?: boolean;
        withPassthrough?: boolean;
        style?: React.CSSProperties;
        title?: string;
        loadingLine?: boolean;
        loading?: number;
        colored?: boolean;
        selected?: string;
        options?: IMenuGroup[];
        actions?: IScaffoldOption<T>[];
        payload?: T;
        throwError?: boolean;
        fallback?: (e: Error) => void;
        BeforeSearch?: React.ComponentType<any>;
        AfterSearch?: React.ComponentType<any>;
        BeforeMenuContent?: React.ComponentType<any>;
        AfterMenuContent?: React.ComponentType<any>;
        Loader?: React.ComponentType<any>;
        roles?: string[] | ((payload: T) => string[]) | ((payload: T) => Promise<string[]>);
        onOptionClick?: (name: string) => void;
        onAction?: (name: string) => void;
        onInit?: () => (void | Promise<void>);
    }
    export default IScaffoldProps;
}

declare module 'react-declarative/components/Scaffold/model/IScaffoldOption' {
    import IOption from "react-declarative/model/IOption";
    export interface IScaffoldOption<T extends any = any> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (payload: T) => Promise<boolean> | boolean;
        isDisabled?: (payload: T) => Promise<boolean> | boolean;
    }
    export default IScaffoldOption;
}

declare module 'react-declarative/components/Translate/Translate' {
    import React from 'react';
    interface IAttributeCollection {
        [name: string]: unknown;
    }
    type Locale = Record<string, string>;
    export class Translate {
        readonly transform?: ((str: string) => string) | undefined;
        get skipList(): string[];
        constructor(locale?: Locale, transform?: ((str: string) => string) | undefined);
        createElement: (type: string, props: IAttributeCollection | null, ...children: any[]) => React.DOMElement<IAttributeCollection, Element>;
        jss: (type: string, props: IAttributeCollection | null) => React.DOMElement<IAttributeCollection, Element>;
        static install: (locale?: Locale | undefined, transform?: ((str: string) => string) | undefined) => Translate;
        clear: () => void;
    }
    global {
        interface Window {
            Translate: Translate;
        }
    }
    export default Translate;
}

declare module 'react-declarative/components/Breadcrumbs/Breadcrumbs' {
    import * as React from 'react';
    import IBreadcrumbsOption from 'react-declarative/model/IBreadcrumbsOption';
    interface IBreadcrumbsProps<T extends any = any> {
        onSave?: () => void;
        onBack?: () => void;
        onAction?: (action: string) => void;
        actions?: IBreadcrumbsOption<T>[];
        saveDisabled?: boolean;
        title?: string;
        subtitle?: string;
        withSave?: boolean;
        payload?: T;
        BeforeMenuContent?: React.ComponentType<any>;
        AfterMenuContent?: React.ComponentType<any>;
    }
    export const Breadcrumbs: <T extends unknown = any>({ onSave, onBack, onAction, actions, saveDisabled, payload, title, subtitle, withSave, BeforeMenuContent, AfterMenuContent, }: IBreadcrumbsProps<T>) => JSX.Element;
    export default Breadcrumbs;
}

declare module 'react-declarative/components/ErrorBoundary/ErrorBoundary' {
    import * as React from 'react';
    import { BrowserHistory, HashHistory, MemoryHistory } from 'history';
    interface IErrorBoundaryProps {
        onError?: (error: Error, errorInfo: any) => void;
        history: MemoryHistory | BrowserHistory | HashHistory;
        children?: React.ReactNode;
    }
    interface IErrorBoundaryState {
        hasError: boolean;
    }
    export class ErrorBoundary extends React.Component<IErrorBoundaryProps, IErrorBoundaryState> {
        static getDerivedStateFromError(): {
            hasError: boolean;
        };
        constructor(props: IErrorBoundaryProps);
        componentDidUpdate: () => void;
        componentDidCatch: (error: any, errorInfo: any) => void;
        render: () => React.ReactNode;
    }
    export default ErrorBoundary;
}

declare module 'react-declarative/components/ActionMenu/ActionMenu' {
    import * as React from "react";
    import { SxProps } from "@mui/material";
    import { IAsyncProps } from "react-declarative/components/Async";
    import IOption from "react-declarative/model/IOption";
    export interface IActionMenuProps<T extends any = object> {
        keepMounted?: boolean;
        options?: Partial<IOption>[];
        transparent?: boolean;
        disabled?: boolean;
        onAction?: (action: string) => void;
        onToggle?: (opened: boolean) => void;
        fallback?: (e: Error) => void;
        deps?: any[];
        throwError?: boolean;
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        payload?: IAsyncProps<T>["payload"];
        onLoadStart?: IAsyncProps<T>["onLoadStart"];
        onLoadEnd?: IAsyncProps<T>["onLoadEnd"];
        BeforeContent?: React.ComponentType<any>;
        AfterContent?: React.ComponentType<any>;
    }
    export const ActionMenu: <T extends unknown = object>({ options, transparent, disabled, throwError, fallback, onToggle, onAction, payload, className, style, sx, deps, onLoadStart, onLoadEnd, keepMounted, BeforeContent, AfterContent, }: IActionMenuProps<T>) => JSX.Element;
    export default ActionMenu;
}

declare module 'react-declarative/components/ActionButton/ActionButton' {
    import * as React from 'react';
    import { ButtonProps } from '@mui/material/Button';
    const ProgressDefault: ({ loading, children, }: {
        children: React.ReactNode;
        loading: boolean;
    }) => JSX.Element;
    interface IActionButtonProps extends Omit<ButtonProps, keyof {
        onClick: never;
    }> {
        Progress?: typeof ProgressDefault;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => (void | Promise<void>);
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const ActionButton: ({ Progress, onClick, onLoadStart, onLoadEnd, fallback, children, disabled, throwError, variant, ...otherProps }: IActionButtonProps) => JSX.Element;
    export default ActionButton;
}

declare module 'react-declarative/components/ActionStopIcon/ActionStopIcon' {
    import * as React from 'react';
    import { SxProps } from '@mui/material';
    import { IconButtonProps } from '@mui/material/IconButton';
    interface IActionStopIconProps extends Omit<IconButtonProps, keyof {
        className: never;
        style: never;
        sx: never;
        size: never;
        thickness: never;
        onClick: never;
    }> {
        children?: React.ReactNode;
        sx?: SxProps;
        className?: string;
        style?: React.CSSProperties;
        noProgress?: boolean;
        disabled?: boolean;
        size?: number;
        thickness?: number;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => (void | Promise<void>);
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const ActionStopIcon: ({ className, style, sx, size, thickness, noProgress, throwError, disabled, onLoadStart, onLoadEnd, fallback, onClick, children, ...otherProps }: IActionStopIconProps) => JSX.Element;
    export default ActionStopIcon;
}

declare module 'react-declarative/components/ActionFab/ActionFab' {
    import * as React from 'react';
    import { FabProps } from '@mui/material/Fab';
    interface IActionFabProps extends Omit<FabProps, keyof {
        onClick: never;
        size?: never;
    }> {
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => (void | Promise<void>);
        fallback?: (e: Error) => void;
        throwError?: boolean;
        thickness?: number;
        size?: number;
        noProgress?: boolean;
    }
    export const ActionFab: ({ className, style, sx, noProgress, throwError, disabled, size, thickness, color, onLoadStart, onLoadEnd, onClick, fallback, children, ...otherProps }: IActionFabProps) => JSX.Element;
    export default ActionFab;
}

declare module 'react-declarative/components/ActionFilter/ActionFilter' {
    import { BoxProps as MatBoxProps } from '@mui/material/Box';
    import IActionFilterProps from 'react-declarative/components/ActionFilter/model/IActionFilterProps';
    type BoxProps = Omit<MatBoxProps, keyof {
        onChange: never;
    }>;
    export const ActionFilter: ({ actions, label, addLabel, data: initialData, onChange, ...otherProps }: BoxProps & IActionFilterProps) => JSX.Element;
    export default ActionFilter;
}

declare module 'react-declarative/components/ActionFilter/model/IActionFilter' {
    export interface IActionFilter {
        action: string;
        label: string;
        items: {
            value: string;
            label: string;
        }[];
    }
    export default IActionFilter;
}

declare module 'react-declarative/components/ActionTrigger/ActionTrigger' {
    import IActionTriggerProps from 'react-declarative/components/ActionTrigger/model/IActionTriggerProps';
    export const ActionTrigger: <T extends unknown = object>({ actions, variant, size, onAction, fallback, onLoadStart, onLoadEnd, payload, deps, throwError, ...otherProps }: IActionTriggerProps<T>) => JSX.Element;
    export default ActionTrigger;
}

declare module 'react-declarative/components/ActionTrigger/model/IActionTrigger' {
    import IAnything from "react-declarative/model/IAnything";
    import IOption from "react-declarative/model/IOption";
    export interface IActionTrigger<Data extends any = IAnything> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isAvailable?: ((payload: Data) => boolean | Promise<boolean>) | boolean;
    }
    export default IActionTrigger;
}

declare module 'react-declarative/components/ActionIcon/ActionIcon' {
    import * as React from 'react';
    import { IconButtonProps } from '@mui/material/IconButton';
    interface IActionIconProps extends Omit<IconButtonProps, keyof {
        onClick: never;
        size: never;
    }> {
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => (void | Promise<void>);
        fallback?: (e: Error) => void;
        throwError?: boolean;
        size?: number;
        thickness?: number;
        noProgress?: boolean;
    }
    export const ActionIcon: ({ className, style, sx, noProgress, throwError, disabled, onLoadStart, onLoadEnd, onClick, fallback, children, size, thickness, ...otherProps }: IActionIconProps) => JSX.Element;
    export default ActionIcon;
}

declare module 'react-declarative/components/ActionToggle/ActionToggle' {
    import { SxProps } from "@mui/material";
    import { BoxProps } from '@mui/material/Box';
    interface IActionToggleProps extends Omit<BoxProps, keyof {
        onChange: never;
        onClick: never;
        sx?: never;
    }> {
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        onClick?: (value: boolean) => (void | Promise<void>);
        fallback?: (e: Error) => void;
        checked?: boolean;
        disabled?: boolean;
        defaultChecked?: boolean;
        throwError?: boolean;
        sx?: SxProps;
    }
    export const ActionToggle: ({ className, onClick, onLoadStart, onLoadEnd, fallback, disabled, throwError, checked: upperChecked, defaultChecked, ...otherProps }: IActionToggleProps) => JSX.Element;
    export default ActionToggle;
}

declare module 'react-declarative/components/ActionModal/ActionModal' {
    import * as React from "react";
    import IField from "react-declarative/model/IField";
    import IOneApi from "react-declarative/model/IOneApi";
    import IAnything from "react-declarative/model/IAnything";
    import IOneProps from "react-declarative/model/IOneProps";
    export interface IActionModalProps<Data extends IAnything = IAnything, Payload = IAnything, Field = IField<Data>, Param = any> {
        waitForChangesDelay?: number;
        fullScreen?: boolean;
        hidden?: boolean;
        readonly?: boolean;
        apiRef?: React.Ref<IOneApi>;
        fields: Field[];
        title?: string;
        dirty?: boolean;
        param?: Param;
        outlinePaper?: IOneProps<Data, Payload>['outlinePaper'];
        handler?: IOneProps<Data, Payload>['handler'];
        payload?: IOneProps<Data, Payload>['payload'];
        changeSubject?: IOneProps<Data, Payload>['changeSubject'];
        reloadSubject?: IOneProps<Data, Payload>['reloadSubject'];
        onSubmit?: (data: Data | null, param: Param) => Promise<boolean> | boolean;
        onChange?: (data: Data, initial: boolean) => void;
        onInvalid?: (name: string, msg: string) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
        open?: boolean;
        submitLabel?: string;
    }
    export const ActionModal: <Data extends unknown = any, Payload = any, Field = IField<Data, any>>({ waitForChangesDelay, onSubmit, onChange, onInvalid, onLoadStart, onLoadEnd, fallback, fields, param, handler, payload, title, apiRef, changeSubject, reloadSubject, fullScreen, outlinePaper, open, dirty, hidden, readonly, throwError, submitLabel, }: IActionModalProps<Data, Payload, Field, any>) => JSX.Element;
    export default ActionModal;
}

declare module 'react-declarative/components/ActionModal/useActionModal' {
    import { IActionModalProps } from "react-declarative/components/ActionModal/ActionModal";
    import TypedField from "react-declarative/model/TypedField";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    interface IParams<Data extends IAnything = IAnything, Payload extends IAnything = IAnything, Field = IField<Data>, Param = any> extends Omit<IActionModalProps<Data, Payload, Field, Param>, keyof {
        open: never;
    }> {
        waitForChangesDelay?: number;
        param?: Param;
    }
    export const useActionModal: <Data extends unknown = any, Payload extends unknown = any, Field = IField<Data, any>, Param = any>({ hidden, fields, waitForChangesDelay, param: upperParam, handler, fallback, apiRef, changeSubject, reloadSubject, payload, onChange, onSubmit, onLoadEnd, onLoadStart, onInvalid, outlinePaper, submitLabel, throwError, dirty, readonly, fullScreen, title, }: IParams<Data, Payload, Field, Param>) => {
        open: boolean;
        render: () => JSX.Element;
        pickData: (param?: Param | undefined) => void;
    };
    export const useActionModalTyped: <Data extends unknown = any>(params: IParams<Data, TypedField<Data, any>, IField<Data, any>, any>) => {
        open: boolean;
        render: () => JSX.Element;
        pickData: (param?: any) => void;
    };
    export default useActionModal;
}

declare module 'react-declarative/components/SearchModal/SearchModal' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import IField from "react-declarative/model/IField";
    import IListProps from "react-declarative/model/IListProps";
    export interface ISearchModalProps<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> extends Omit<IListProps<FilterData, RowData, Payload, Field>, keyof {
        selectedRows: never;
        heightRequest: never;
        widthRequest: never;
        onSelectedRows: never;
        onLoadStart: never;
        onLoadEnd: never;
    }> {
        title?: string;
        data?: IRowData['id'][];
        onSubmit?: (data: IRowData['id'][] | null) => Promise<boolean> | boolean;
        onChange?: (data: IRowData['id'][] | null, initial: boolean) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
        open?: boolean;
        hidden?: boolean;
        submitLabel?: string;
    }
    export const SearchModal: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>({ hidden, onSubmit, onChange, onLoadStart, onLoadEnd, fallback, title, withInitialLoader, selectionMode, data: upperData, open, throwError, submitLabel, ...listProps }: ISearchModalProps<FilterData, RowData, Payload, Field>) => JSX.Element;
    export default SearchModal;
}

declare module 'react-declarative/components/SearchModal/useSearchModal' {
    import { ISearchModalProps } from "react-declarative/components/SearchModal/SearchModal";
    import TypedField from "react-declarative/model/TypedField";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    import IRowData from "react-declarative/model/IRowData";
    type Param = IRowData['id'][];
    interface IParams<FilterData extends {} = IAnything, RowData extends IRowData = IAnything, Payload extends IAnything = IAnything, Field extends IField = IField<FilterData, Payload>> extends Omit<ISearchModalProps<FilterData, RowData, Payload, Field>, keyof {
        open: never;
        onSubmit: never;
        className: never;
        isChooser: never;
        style: never;
    }> {
        param?: Param;
        onSubmit?: (data: IRowData['id'][] | null, param: Param) => Promise<boolean> | boolean;
    }
    export const useSearchModal: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = IField<FilterData, Payload>>({ param: upperParam, handler, fallback, apiRef, reloadSubject, payload, onChange, onAction, onRowAction, onRowClick, onSubmit, onLoadEnd, onLoadStart, submitLabel, throwError, title, hidden, ...listProps }: IParams<FilterData, RowData, Payload, Field>) => {
        open: boolean;
        render: () => JSX.Element;
        pickData: (param?: Param) => void;
    };
    export const useSearchModalTyped: <FilterData extends {} = any, RowData extends IRowData = any, Payload extends unknown = any, Field extends IField<any, any> = TypedField<FilterData, Payload>>(params: IParams<FilterData, RowData, Payload, Field>) => {
        open: boolean;
        render: () => JSX.Element;
        pickData: (param?: Param) => void;
    };
    export default useSearchModal;
}

declare module 'react-declarative/components/ConstraintView/ConstraintView' {
    import * as React from 'react';
    import { IAutoSizerProps, IChildParams } from 'react-declarative/components/AutoSizer';
    import IAnything from 'react-declarative/model/IAnything';
    interface IConstraintViewProps<T extends IAnything = IAnything> extends Omit<IAutoSizerProps<T>, keyof {
        children: never;
    }> {
        phoneView?: React.ComponentType<any>;
        tabletView?: React.ComponentType<any>;
        desktopView?: React.ComponentType<any>;
        onViewChanged?: (name: string) => void;
        params?: IChildParams<T>;
    }
    export const ConstraintView: <T extends unknown = any>({ desktopView: Desktop, tabletView: Tablet, phoneView: Phone, onViewChanged, params, ...otherProps }: IConstraintViewProps<T>) => JSX.Element;
    export default ConstraintView;
}

declare module 'react-declarative/components/ScrollTopView/ScrollTopView' {
    import { FabProps } from "@mui/material/Fab";
    type IScrollTopViewProps = Omit<FabProps, keyof {
        onClick: never;
    }> & {
        scrollTarget?: HTMLElement;
    };
    export const ScrollTopView: ({ className, style, sx, color, size, scrollTarget, ...otherProps }: IScrollTopViewProps) => JSX.Element;
    export default ScrollTopView;
}

declare module 'react-declarative/components/OutletView/OutletView' {
    import IOutletViewProps from "react-declarative/components/OutletView/model/IOutletViewProps";
    export const OutletView: <Data extends {} = Record<string, any>, Payload = any, Params = any>({ className, waitForChangesDelay, initialData, animation, routes, params, payload: upperPayload, history, fallback, onChange, onSubmit, onLoadStart, onLoadEnd, changeSubject: upperChangeSubject, ...otherProps }: IOutletViewProps<Data, Payload, Params>) => JSX.Element;
    export default OutletView;
}

declare module 'react-declarative/components/OutletView/model/IOutlet' {
    import * as React from 'react';
    import IAnything from 'react-declarative/model/IAnything';
    import IOutletProps from 'react-declarative/components/OutletView/model/IOutletProps';
    export interface IOutlet<Data = IAnything, Payload = IAnything, Params = IAnything> {
        id: string;
        element: (props: IOutletProps<Data, Payload, Params>) => React.ReactElement;
        isAvailable?: (pathname: string) => boolean;
        isActive: (pathname: string) => boolean;
    }
    export default IOutlet;
}

declare module 'react-declarative/components/OutletView/model/IOutletProps' {
    import IAnything from "react-declarative/model/IAnything";
    export interface IOutletProps<Data = IAnything, Payload = IAnything, Params = IAnything> {
        onChange: (data: Data, initial?: boolean) => void;
        onInvalid: (name: string, msg: string) => void;
        beginSave: () => Promise<boolean>;
        afterSave: () => Promise<void>;
        dirty: boolean;
        formState: {
            change: (data: Record<string, Data>) => void;
            data: Record<string, Data>;
            hasChanged: boolean;
            hasLoading: boolean;
            hasInvalid: boolean;
            id: string;
        };
        activeOption: string;
        readonly: boolean;
        data: Data;
        hasChanged: boolean;
        hasLoading: boolean;
        hasInvalid: boolean;
        params: Params;
        payload: Payload;
    }
    export default IOutletProps;
}

declare module 'react-declarative/components/AlertView/AlertView' {
    import { StackProps } from '@mui/material/Stack';
    interface IAlert {
        color: 'success' | 'info' | 'warning' | 'error';
        content: string;
    }
    interface IAlertViewProps extends StackProps {
        items?: IAlert[];
        variant?: 'standard' | 'filled' | 'outlined';
    }
    export const AlertView: ({ className, items, variant, ...otherProps }: IAlertViewProps) => JSX.Element;
    export default AlertView;
}

declare module 'react-declarative/components/DragDropView/DragDropView' {
    import * as React from "react";
    import { SxProps } from "@mui/material/styles";
    interface IDragDropViewProps {
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        disabled?: boolean;
        multiple?: boolean;
        accept?: string;
        onData?: (files: File[]) => void;
        onReject?: (files: File[]) => void;
    }
    export const ACCEPT_DEFAULT = ".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel";
    export const DragDropView: ({ className, style, sx, disabled, multiple, accept, onData, onReject, }: IDragDropViewProps) => JSX.Element;
    export default DragDropView;
}

declare module 'react-declarative/components/FilesView/FilesView' {
    import * as React from "react";
    import { SxProps } from "@mui/system";
    export interface IFilesViewProps {
        items?: string[];
        disabled?: boolean;
        onUpload?: (file: File) => string | Promise<string>;
        onRemove?: (item: string) => void | Promise<void>;
        onChange?: (items: string[]) => void | Promise<void>;
        onClick?: (item: string) => void | Promise<void>;
        tr?: (item: string) => (string | Promise<string>);
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        accept?: string;
        multiple?: boolean;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const FilesView: ({ items, className, style, sx, disabled: upperDisabled, onUpload, onRemove, onChange, onClick, tr, accept, multiple, onLoadStart, onLoadEnd, fallback, throwError, }: IFilesViewProps) => JSX.Element;
    export default FilesView;
}

declare module 'react-declarative/components/FilesView/api/usePreventNavigate' {
    import { MemoryHistory, BrowserHistory, HashHistory } from 'history';
    interface IParams {
        history: MemoryHistory | BrowserHistory | HashHistory;
        withConfirm?: boolean;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
    }
    export const usePreventNavigate: ({ history, withConfirm, onLoadStart, onLoadEnd, }: IParams) => {
        handleLoadStart: () => void;
        handleLoadEnd: (isOk: boolean) => void;
        unblock: () => void;
        block: () => void;
        loading: boolean;
    };
    export default usePreventNavigate;
}

declare module 'react-declarative/components/FilesView/useFilesView' {
    import { IFilesViewProps } from 'react-declarative/components/FilesView/FilesView';
    interface IParams {
        data?: string[] | null;
        fullScreen?: boolean;
        submitLabel?: string;
        onSubmit?: (data: string[]) => void;
        onChange?: (data: string[]) => void;
        tr?: IFilesViewProps['tr'];
        fallback?: IFilesViewProps['fallback'];
        onLoadStart?: IFilesViewProps['onLoadStart'];
        onLoadEnd?: IFilesViewProps['onLoadEnd'];
        onClick?: IFilesViewProps['onClick'];
        onUpload?: IFilesViewProps['onUpload'];
    }
    export const useFilesView: ({ data, fullScreen, submitLabel, onChange, onSubmit, tr, fallback, onLoadStart, onLoadEnd, onClick, onUpload, }: IParams) => {
        render: () => JSX.Element;
        pickFiles: () => void;
    };
    export default useFilesView;
}

declare module 'react-declarative/components/ScrollView/ScrollView' {
    import * as React from "react";
    export const SCROLL_VIEW_TARGER = "react-declarative__scrollViewTarget";
    interface IScrollViewProps {
        withScrollbar?: boolean;
        hideOverflowX?: boolean;
        hideOverflowY?: boolean;
        children: React.ReactNode;
        className?: string;
        style?: React.CSSProperties;
        center?: boolean;
    }
    export const ScrollView: ({ children, className, style, center, withScrollbar, hideOverflowX, hideOverflowY, }: IScrollViewProps) => JSX.Element;
    export default ScrollView;
}

declare module 'react-declarative/components/ScaleView/ScaleView' {
    import * as React from 'react';
    interface IScaleViewProps {
        className?: string;
        style?: React.CSSProperties;
        children?: React.ReactNode;
        stretch?: boolean;
        center?: boolean;
    }
    export const ScaleView: ({ children, className, style, stretch, center, }: IScaleViewProps) => JSX.Element;
    export default ScaleView;
}

declare module 'react-declarative/components/AutoSizer/AutoSizer' {
    import * as React from "react";
    import ISize from "react-declarative/model/ISize";
    export interface IChildParams<T extends any = unknown> extends ISize {
        payload: T;
    }
    export interface IAutoSizerProps<T extends any = unknown> {
        children: (s: IChildParams<T>) => any;
        className?: string;
        defaultHeight?: number;
        defaultWidth?: number;
        withContainerHeight?: boolean;
        withContainerWidth?: boolean;
        heightRequest?: (h: number) => number;
        widthRequest?: (w: number) => number;
        onResize?: (s: ISize) => void;
        style?: React.CSSProperties;
        payload?: T;
        target?: HTMLElement;
        closest?: string;
        selector?: string;
    }
    type State = {
        height: number;
        width: number;
        childHeight: number;
        childWidth: number;
    };
    type ResizeHandler = (element: HTMLElement, onResize: () => void) => void;
    type DetectElementResize = {
        addResizeListener: ResizeHandler;
        removeResizeListener: ResizeHandler;
    };
    export class AutoSizer<T extends unknown = object> extends React.Component<IAutoSizerProps<T>, State> {
        static defaultProps: Partial<IAutoSizerProps<any>>;
        lastHeightRequest: (h: number) => number;
        lastWidthRequest: (w: number) => number;
        state: {
            height: number;
            width: number;
            childHeight: number;
            childWidth: number;
        };
        _parentNode?: HTMLElement;
        _autoSizer?: HTMLElement | null;
        _detectElementResize?: DetectElementResize;
        shouldComponentUpdate(nextProps: IAutoSizerProps<T>, nextState: State): boolean;
        componentDidMount(): void;
        componentWillUnmount(): void;
        render(): JSX.Element;
        _onResize: () => void;
        _setRef: (autoSizer: HTMLElement | null) => void;
    }
    export default AutoSizer;
}

declare module 'react-declarative/components/FadeView/FadeView' {
    import * as React from "react";
    import { IFadeContainerProps } from "react-declarative/components/FadeView/components/FadeContainer";
    type FadeContainerT = Pick<IFadeContainerProps, keyof {
        Fade: never;
        color: never;
        zIndex: never;
        disableBottom: never;
        disableRight: never;
    }>;
    interface IFadeViewProps extends FadeContainerT {
        className?: string;
        style?: React.CSSProperties;
        children: React.ReactNode;
    }
    export const FadeView: ({ className, style, children, Fade, color, zIndex, disableBottom, disableRight, }: IFadeViewProps) => JSX.Element;
    export default FadeView;
}

declare module 'react-declarative/components/TabsView/TabsView' {
    import * as React from 'react';
    import { TabsProps } from '@mui/material/Tabs';
    import { IAsyncProps } from 'react-declarative/components/Async';
    import ITab from 'react-declarative/model/ITab';
    export interface ITabsViewProps<T extends any = any> extends Omit<IAsyncProps<T>, keyof {
        children: never;
        Error: never;
    }> {
        className?: string;
        style?: React.CSSProperties;
        items: ITab<T>[];
        value?: string;
        children: (value: string) => React.ComponentType<any>;
        onChange?: (value: string) => void;
        centered?: TabsProps['centered'];
        variant?: TabsProps['variant'];
        noUnderline?: boolean;
    }
    export const TabsView: <T extends unknown = any>({ className, style, centered, variant, items, value: defaultValue, noUnderline, children, onChange, onLoadStart, onLoadEnd, Loader, ...otherProps }: ITabsViewProps<T>) => JSX.Element;
    export default TabsView;
}

declare module 'react-declarative/components/TabsView/api/useTabsHashstate' {
    import { BrowserHistory, HashHistory, MemoryHistory } from 'history';
    import { ITabsViewProps } from 'react-declarative/components/TabsView/TabsView';
    interface IResult<T extends any = any> {
        tabsProps: {
            value: ITabsViewProps<T>['value'];
            onChange: ITabsViewProps<T>['onChange'];
        };
        hashManager: {
            getValue: () => string;
            setValue: (hash: string) => void;
        };
    }
    interface IParams {
        history?: MemoryHistory | BrowserHistory | HashHistory;
        defaultValue?: string;
    }
    export const useTabsHashstate: <T extends unknown = any>({ history, defaultValue, }?: IParams) => IResult<T>;
    export default useTabsHashstate;
}

declare module 'react-declarative/components/FetchView/FetchView' {
    import * as React from 'react';
    import { IAsyncProps } from 'react-declarative/components/Async';
    import { IRevealProps } from 'react-declarative/components/FetchView/components/Reveal';
    type Result = React.ReactNode | void;
    type ObjectState<P extends any = object, A = any> = ((payload: P) => Promise<A>) | ((payload: P) => A);
    type TupleState<P extends any = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any> = ((payload: P) => readonly [Promise<A>?, Promise<B>?, Promise<C>?, Promise<D>?, Promise<E>?, Promise<F>?, Promise<G>?, Promise<H>?, Promise<I>?, Promise<J>?]) | ((payload: P) => readonly [A?, B?, C?, D?, E?, F?, G?, H?, I?, J?]) | ((payload: P) => [Promise<A>?, Promise<B>?, Promise<C>?, Promise<D>?, Promise<E>?, Promise<F>?, Promise<G>?, Promise<H>?, Promise<I>?, Promise<J>?]) | ((payload: P) => [A?, B?, C?, D?, E?, F?, G?, H?, I?, J?]);
    export interface IFetchViewBaseProps<P extends any = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any> extends Omit<IAsyncProps<P>, keyof {
        children: never;
    }> {
        animation?: IRevealProps['animation'];
        className?: string;
        style?: React.CSSProperties;
        children: (a: A, b: B, c: C, d: D, e: E, f: F, g: G, h: H, i: I, j: J) => Promise<Result> | Result;
    }
    export type IFetchViewObjectProps<P extends any = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any> = IFetchViewBaseProps<P, A, B, C, D, E, F, G, H, I, J> & {
        state: ObjectState<P, A>;
    };
    export type IFetchViewTupleProps<P extends any = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any> = IFetchViewBaseProps<P, A, B, C, D, E, F, G, H, I, J> & {
        state: TupleState<P, A, B, C, D, E, F, G, H, I, J>;
    };
    export type IFetchViewProps<P extends any = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any> = IFetchViewTupleProps<P, A, B, C, D, E, F, G, H, I, J> | IFetchViewObjectProps<P, A, B, C, D, E, F, G, H, I, J>;
    export const FetchView: <P extends unknown = object, A = any, B = any, C = any, D = any, E = any, F = any, G = any, H = any, I = any, J = any>({ animation, className, style, Loader, Error, onLoadEnd, onLoadStart, children, state, payload, ...otherProps }: IFetchViewProps<P, A, B, C, D, E, F, G, H, I, J>) => JSX.Element;
    export default FetchView;
}

declare module 'react-declarative/components/FetchView/components/Reveal' {
    import { BoxProps } from '@mui/material/Box';
    export interface IRevealProps extends BoxProps {
        animation?: 'slideDown' | 'fadeIn' | 'scale' | 'none';
        appear?: boolean;
    }
    export const Reveal: ({ children, className, animation, appear, ...otherProps }: IRevealProps) => JSX.Element;
    export default Reveal;
}

declare module 'react-declarative/components/WaitView/WaitView' {
    import * as React from 'react';
    import { IAsyncProps } from 'react-declarative/components/Async';
    interface IWaitViewProps<P extends any = object, T extends any = object> extends Omit<IAsyncProps<P>, keyof {
        children: never;
    }> {
        Content: React.ComponentType<any>;
        condition: () => (Promise<boolean> | boolean | Promise<T> | T | Promise<null> | null);
        conditionMap?: (result: T) => boolean;
        onDone?: (attempts: number) => void;
        totalAttempts?: number;
        delay?: number;
    }
    export const WaitView: <P extends unknown = object, T extends unknown = object>({ onDone, condition, Loader, Content, Error, delay, totalAttempts, conditionMap, payload, ...otherProps }: IWaitViewProps<P, T>) => JSX.Element | null;
    export default WaitView;
}

declare module 'react-declarative/components/PingView/PingView' {
    import * as React from 'react';
    interface IPingViewProps<P extends any = object> {
        children?: React.ReactNode;
        Offline?: React.ComponentType<any>;
        ping: (payload?: P) => (boolean | Promise<boolean>);
        fallback?: (e: Error) => void;
        throwError?: boolean;
        delay?: 5000;
        payload?: P;
        onOnline?: () => void;
        onOffline?: () => void;
    }
    export const PingView: <P extends unknown = object>({ ping, children, onOnline, onOffline, Offline, fallback, throwError, delay, payload, }: IPingViewProps<P>) => JSX.Element | null;
    export default PingView;
}

declare module 'react-declarative/components/HtmlView/HtmlView' {
    import * as React from 'react';
    import { BoxProps } from '@mui/material/Box';
    interface IHtmlViewProps<T extends any = object> extends BoxProps {
        children?: React.ReactNode;
        handler: (p: T) => (string | Promise<string>);
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        payload?: T;
        deps?: any[];
        throwError?: boolean;
    }
    export const HtmlView: ({ children, handler, fallback, onLoadStart, onLoadEnd, payload, deps, throwError, ...otherProps }: IHtmlViewProps) => JSX.Element;
    export default HtmlView;
}

declare module 'react-declarative/components/OfflineView/OfflineView' {
    import * as React from "react";
    interface IOfflineViewProps {
        children?: React.ReactNode;
        onOnline?: () => void;
        onOffline?: () => void;
        withPolling?: boolean;
        config?: IConfig;
        Offline?: React.ComponentType<any>;
    }
    interface IConfig {
        url: string;
        method?: string;
        interval?: number;
        timeout?: number;
    }
    export const OfflineView: ({ children, onOnline, onOffline, config, withPolling, Offline, }: IOfflineViewProps) => JSX.Element | null;
    export default OfflineView;
}

declare module 'react-declarative/components/RevealView/RevealView' {
    import * as React from 'react';
    import { IRevealProps } from 'react-declarative/components/FetchView/components/Reveal';
    interface IRevealViewProps {
        className?: string;
        style?: React.CSSProperties;
        animation?: IRevealProps['animation'];
        delay?: number;
        appear?: boolean;
        children: React.ReactNode;
    }
    export const RevealView: ({ children, className, style, animation, delay, appear: upperAppear, }: IRevealViewProps) => JSX.Element;
    export default RevealView;
}

declare module 'react-declarative/components/SecretView/SecretView' {
    import * as React from "react";
    import { SxProps } from "@mui/system";
    interface ISecretViewProps {
        children?: React.ReactNode;
        onCode?: (code: number) => void;
        enabled?: boolean;
        title?: string;
        description?: string;
        digits?: number;
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
    }
    export const SecretView: ({ className, style, sx, children, enabled, title, description, digits, onCode, }: ISecretViewProps) => JSX.Element;
    export default SecretView;
}

declare module 'react-declarative/components/PortalView/PortalView' {
    import * as React from "react";
    interface IPortalViewProps {
        children: React.ReactNode;
    }
    export class PortalView extends React.Component<IPortalViewProps> {
        element: HTMLDivElement | null;
        componentWillUnmount(): void;
        render(): React.ReactPortal;
    }
    export default PortalView;
}

declare module 'react-declarative/components/ErrorView/ErrorView' {
    import * as React from 'react';
    import { SxProps } from '@mui/material';
    interface IErrorViewProps {
        appName?: string;
        Logo?: React.ComponentType<any>;
        buttonLabel?: React.ReactNode;
        contentLabel?: React.ReactNode;
        onButtonClick?: () => void;
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
    }
    export const ErrorView: ({ appName, Logo, className, style, sx, buttonLabel, contentLabel, onButtonClick, }: IErrorViewProps) => JSX.Element;
    export default ErrorView;
}

declare module 'react-declarative/components/AuthView/AuthView' {
    import * as React from 'react';
    import { SxProps } from '@mui/material';
    import { OneHandler } from 'react-declarative/model/IOneProps';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    interface IAuthViewProps<Data extends IAnything = IAnything, Payload = IAnything, Field = IField<Data, Payload>> {
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        appName?: string;
        fields?: Field[];
        handler?: OneHandler<Data, Payload>;
        Logo?: React.ComponentType<any>;
        onAuth?: (data: Data) => (void | Promise<void>);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
        BeforeSubmit?: React.ComponentType<any>;
        AfterSubmit?: React.ComponentType<any>;
    }
    export const AuthView: <Data extends unknown = any, Payload = any, Field = IField<Data, Payload>>({ className, style, sx, appName, Logo, fields, onLoadStart, onLoadEnd, throwError, handler, fallback, onAuth, BeforeSubmit, AfterSubmit, }: IAuthViewProps<Data, Payload, Field>) => JSX.Element;
    export default AuthView;
}

declare module 'react-declarative/components/ReloadView/ReloadView' {
    import * as React from 'react';
    import TSubject from 'react-declarative/model/TSubject';
    interface IReloadViewProps {
        reloadTrigger: TSubject<any>;
        children?: React.ReactNode;
    }
    export class ReloadView extends React.Component<IReloadViewProps> {
        _disconnectListener: (() => void) | undefined;
        doSubscribe: () => void;
        componentDidMount: () => void;
        componentDidUpdate: () => void;
        componentWillUnmount: () => void;
        render: () => JSX.Element;
    }
    export default ReloadView;
}

declare module 'react-declarative/components/InfiniteView/InfiniteView' {
    import * as React from "react";
    import { BoxProps } from "@mui/material/Box";
    import { SxProps } from "@mui/system";
    import TSubject from "react-declarative/model/TSubject";
    interface IInfiniteViewProps extends BoxProps {
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        children?: React.ReactNode;
        hasMore?: boolean;
        loading?: boolean;
        scrollXSubject?: TSubject<number>;
        scrollYSubject?: TSubject<number>;
        onDataRequest?: (initial: boolean) => Promise<void> | void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const InfiniteView: ({ className, style, sx, loading: upperLoading, throwError, hasMore, children: upperChildren, scrollXSubject: upperScrollXSubject, scrollYSubject: upperScrollYSubject, onDataRequest, onLoadStart, onLoadEnd, fallback, ...otherProps }: IInfiniteViewProps) => JSX.Element;
    export default InfiniteView;
}

declare module 'react-declarative/components/VirtualView/VirtualView' {
    import * as React from "react";
    import { BoxProps } from "@mui/material/Box";
    import { TSubject } from "react-declarative/utils/rx/Subject";
    export const ROOT_ELEMENT = "virtual-view-root";
    export const CHILD_ELEMENT = "virtual-view-child";
    export interface IVirtualViewProps extends Omit<BoxProps, keyof {
        ref: never;
    }> {
        withScrollbar?: boolean;
        loading?: boolean;
        hasMore?: boolean;
        minRowHeight?: number;
        bufferSize?: number;
        children: React.ReactNode;
        scrollXSubject?: TSubject<number>;
        scrollYSubject?: TSubject<number>;
        onDataRequest?: (initial: boolean) => Promise<void> | void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const VirtualView: ({ className, sx, withScrollbar, minRowHeight, bufferSize: upperBufferSize, children: upperChildren, hasMore, loading: upperLoading, onDataRequest, onLoadStart, onLoadEnd, fallback, scrollXSubject: upperScrollXSubject, scrollYSubject: upperScrollYSubject, throwError, ...otherProps }: IVirtualViewProps) => JSX.Element;
    export default VirtualView;
}

declare module 'react-declarative/components/LoaderView/LoaderView' {
    import { BoxProps } from "@mui/material/Box";
    interface ILoaderViewProps extends Omit<BoxProps, keyof {
        children: never;
    }> {
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        handler?: () => (Promise<void> | void);
        fallback?: (e: Error) => void;
        throwError?: boolean;
        size?: number | string;
    }
    export const LoaderView: {
        ({ className, onLoadStart, onLoadEnd, handler, fallback, throwError, size, ...otherProps }: ILoaderViewProps): JSX.Element;
        createLoader(size: number): () => JSX.Element;
    };
    export default LoaderView;
}

declare module 'react-declarative/components/DocumentView/DocumentView' {
    import * as React from 'react';
    import { BoxProps } from '@mui/material/Box';
    import { IActionMenuProps } from 'react-declarative/components/ActionMenu';
    interface IDocumentViewProps<T extends any = object> extends BoxProps, Omit<IActionMenuProps<T>, keyof {
        className: never;
        style: never;
        sx: never;
        transparent: never;
        onToggle: never;
    }> {
        withFullScreen?: boolean;
        withDelete?: boolean;
        className?: string;
        style?: React.CSSProperties;
        src: string;
        onFullScreenClick?: () => (Promise<void> | void);
        onDeleteClick?: () => (Promise<void> | void);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const DocumentView: ({ withFullScreen, withDelete, className, style, src, onFullScreenClick, onDeleteClick, onLoadStart, onLoadEnd, fallback, throwError, disabled, options, onAction, payload, deps, keepMounted, BeforeContent, AfterContent, ...otherProps }: IDocumentViewProps) => JSX.Element;
    export default DocumentView;
}

declare module 'react-declarative/components/ImageView/ImageView' {
    import { BoxProps } from '@mui/material/Box';
    import { IActionMenuProps } from 'react-declarative/components/ActionMenu';
    interface IImageViewProps<T extends any = object> extends BoxProps, Omit<IActionMenuProps<T>, keyof {
        className: never;
        style: never;
        sx: never;
        transparent: never;
        onToggle: never;
    }> {
        withFullScreen?: boolean;
        withDelete?: boolean;
        src: string;
        onFullScreenClick?: () => (Promise<void> | void);
        onDeleteClick?: () => (Promise<void> | void);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export const ImageView: ({ withFullScreen, withDelete, className, src, onFullScreenClick, onDeleteClick, onLoadStart, onLoadEnd, fallback, throwError, disabled, options, onAction, payload, deps, keepMounted, BeforeContent, AfterContent, ...otherProps }: IImageViewProps) => JSX.Element;
    export default ImageView;
}

declare module 'react-declarative/components/TreeView/TreeView' {
    import { TextFieldProps } from "@mui/material/TextField";
    import INode from "react-declarative/components/TreeView/model/INode";
    type ITreeViewProps = {
        value?: string[] | null;
        items: INode[];
        onChange?: (value: string[] | null) => void;
    } & Omit<TextFieldProps, keyof {
        onChange: never;
    }>;
    export const TreeView: ({ className, style, sx, items: upperItems, value: upperValue, onChange, ...textFieldProps }: ITreeViewProps) => JSX.Element;
    export default TreeView;
}

declare module 'react-declarative/components/TreeView/model/INode' {
    export interface INode {
        label: string;
        value: string;
        child?: Omit<INode, "child">[];
    }
    export default INode;
}

declare module 'react-declarative/components/Grid/Grid' {
    import IGridProps from 'react-declarative/components/Grid/model/IGridProps';
    export const Grid: <T extends unknown>(props: IGridProps<T>) => JSX.Element;
    export default Grid;
}

declare module 'react-declarative/components/Grid/model/IColumn' {
    import Dimension from 'react-declarative/components/Grid/model/Dimension';
    import RowData from 'react-declarative/components/Grid/model/RowData';
    export interface IColumn<T = RowData> {
        field?: keyof T;
        label: string;
        align?: 'center' | 'left' | 'right' | 'stretch';
        format?: (row: T) => React.ReactElement | string;
        minWidth?: number;
        width?: Dimension | ((containerWidth: number) => Dimension);
    }
    export default IColumn;
}

declare module 'react-declarative/components/Grid/model/IGridAction' {
    import { IActionMenuProps } from "react-declarative/components/ActionMenu";
    import IOption from "react-declarative/model/IOption";
    export interface IGridAction<T> extends Omit<IOption, keyof {
        isVisible: never;
        isDisabled: never;
    }> {
        isVisible?: (row: T, payload: IActionMenuProps['payload']) => boolean;
        isDisabled?: (row: T, payload: IActionMenuProps['payload']) => boolean;
    }
    export default IGridAction;
}

declare module 'react-declarative/components/Grid/model/TSort' {
    import { IColumn } from 'react-declarative/components/Grid/model/IColumn';
    export type TSort<T> = {
        sortDirection: "ASC" | "DESC";
        value: IColumn<T>['field'];
    };
    export default TSort;
}

declare module 'react-declarative/components/Search/Search' {
    import * as React from "react";
    import { BoxProps } from "@mui/material/Box";
    interface IItem {
        value: string;
        label: string;
    }
    interface ISearchProps extends Omit<BoxProps, keyof {
        onChange: never;
    }> {
        handler: IItem[] | ((search: string, skip: number) => IItem[] | Promise<IItem[]>);
        value?: IItem | null;
        label?: React.ReactNode;
        skipStep?: number;
        onChange: (item: IItem | null) => void;
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        throwError?: boolean;
        noCleanIcon?: boolean;
    }
    export const Search: ({ className, handler, value: upperValue, label, onChange, onLoadStart, onLoadEnd, fallback, throwError, noCleanIcon, skipStep, sx, ...props }: ISearchProps) => JSX.Element;
    export default Search;
}

declare module 'react-declarative/components/Spinner/Spinner' {
    import { BoxProps } from "@mui/material/Box";
    interface ISpinnerProps extends Omit<BoxProps, keyof {
        children: never;
    }> {
    }
    export const Spinner: ({ className, ...otherProps }: ISpinnerProps) => JSX.Element;
    export default Spinner;
}

declare module 'react-declarative/components/Async/Async' {
    import * as React from 'react';
    export interface IAsyncProps<T extends any = object> {
        loading?: boolean;
        children: (p: T) => (Result | Promise<Result>);
        fallback?: (e: Error) => void;
        Loader?: React.ComponentType<any>;
        Error?: React.ComponentType<any>;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        payload?: T;
        deps?: any[];
        throwError?: boolean;
    }
    type Result = React.ReactNode | void;
    export const Async: <T extends unknown = object>({ loading: upperLoading, children, fallback, Loader, Error, onLoadStart, onLoadEnd, payload, deps, throwError, }: IAsyncProps<T>) => JSX.Element;
    export default Async;
}

declare module 'react-declarative/components/Copy/Copy' {
    import * as React from 'react';
    import { BoxProps } from '@mui/material/Box';
    interface ICopyProps extends BoxProps {
        content: React.ReactNode;
        onCopy?: () => void;
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        throwError?: boolean;
    }
    export const Copy: ({ className, content, onCopy, onLoadStart, onLoadEnd, fallback, throwError, ...otherProps }: ICopyProps) => JSX.Element;
    export default Copy;
}

declare module 'react-declarative/components/If/If' {
    import * as React from 'react';
    export interface IIfProps<T extends any = object> {
        condition: boolean | ((payload: T) => boolean | Promise<boolean>);
        children: React.ReactNode;
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        payload?: T;
        deps?: any[];
        throwError?: boolean;
    }
    export const If: <T extends unknown = object>({ children, condition, fallback, onLoadStart, onLoadEnd, payload, deps, throwError, }: IIfProps<T>) => JSX.Element | null;
    export default If;
}

declare module 'react-declarative/components/Countdown/Countdown' {
    import * as React from "react";
    import { BoxProps } from "@mui/material/Box";
    export interface ICountdownProps extends BoxProps {
        children?: React.ReactNode;
        expireAt: string | number | Date;
        onExpire?: () => void;
    }
    export const Countdown: ({ className, children, expireAt, onExpire, ...otherProps }: ICountdownProps) => JSX.Element;
    export default Countdown;
}

declare module 'react-declarative/components/Chip/Chip' {
    import { ChipProps } from '@mui/material/Chip';
    interface IChipProps extends Omit<ChipProps, keyof {
        color: never;
    }> {
        color?: string;
    }
    export const Chip: ({ color, ...otherProps }: IChipProps) => JSX.Element;
    export default Chip;
}

declare module 'react-declarative/components/ScrollAdjust/ScrollAdjust' {
    export const ScrollAdjust: () => JSX.Element;
    export default ScrollAdjust;
}

declare module 'react-declarative/components/MasterDetail/MasterDetail' {
    import IMasterDetailProps from 'react-declarative/components/MasterDetail/model/IMasterDetailProps';
    export const MasterDetail: <Payload extends unknown = any>({ mode, withMenuCollapse, withFixedPos, fixedPosHeaderAdjust, title, className, style, sx, activeOption: upperActiveOption, payload, deps, options, children, Loader, Error, onActiveOptionChange, fallback, onLoadStart, onLoadEnd, throwError, }: IMasterDetailProps<Payload>) => JSX.Element;
    export default MasterDetail;
}

declare module 'react-declarative/components/MasterDetail/config' {
    export const MASTER_DETAIL_ROOT = "react-declatative__master-detail-root";
    export const MASTER_DETAIL_HEADER = "react-declatative__master-detail-header";
}

declare module 'react-declarative/components/MasterDetail/model/IMasterDetailOption' {
    import React from "react";
    export interface IMasterDetailOption<Payload = any> {
        id: string;
        icon?: React.ComponentType<any>;
        label?: string;
        isVisible?: (payload: Payload) => (boolean | Promise<boolean>);
        isDisabled?: (payload: Payload) => (boolean | Promise<boolean>);
        isActive?: (payload: Payload) => (boolean | Promise<boolean>);
    }
    export interface IMasterDetailOptionInternal<Payload = any> extends Omit<IMasterDetailOption<Payload>, keyof {
        isVisible: never;
        isDisabled: never;
        isActive: never;
    }> {
        visible: boolean;
        disabled: boolean;
        active: boolean;
    }
    export default IMasterDetailOption;
}

declare module 'react-declarative/components/MasterDetail/model/MasterDetailMode' {
    export enum MasterDetailMode {
        Paper = "paper",
        Outline = "outline",
        Card = "card",
        Tabs = "tabs"
    }
    export default MasterDetailMode;
}

declare module 'react-declarative/components/CardView/model/ICardViewProps' {
    import React from "react";
    import { BoxProps } from "@mui/system";
    import TSubject from "react-declarative/model/TSubject";
    import ICardViewOperation from "react-declarative/components/CardView/model/ICardViewOperation";
    import ICardViewAction from "react-declarative/components/CardView/model/ICardViewAction";
    import IItemData from "react-declarative/components/CardView/model/IItemData";
    export interface ICardViewProps<ItemData extends IItemData = any, Payload extends any = any> extends BoxProps {
        handler: ItemData[] | ((search: string, skip: number) => (ItemData[] | Promise<ItemData[]>));
        scrollXSubject?: TSubject<number>;
        scrollYSubject?: TSubject<number>;
        reloadSubject?: TSubject<void>;
        cardActions?: ICardViewAction<ItemData, Payload>[];
        operations?: ICardViewOperation<ItemData, Payload>[];
        payload?: (() => Payload) | Payload;
        formatMedia?: (item: ItemData) => React.ReactNode;
        formatCardLabel?: (item: ItemData) => React.ReactNode;
        formatKey?: (key: keyof ItemData) => React.ReactNode;
        formatValue?: (key: keyof ItemData, value: ItemData[keyof ItemData]) => React.ReactNode;
        onOperation?: (operation: string, selectedItems: ItemData[], isAllSelected: boolean) => (void | Promise<void>);
        onAction?: (action: string, item: ItemData) => void;
        onCardClick?: (item: ItemData) => void;
        onLoadStart?: () => void;
        pickFields?: (keyof ItemData)[];
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        skipStep?: number;
        throwError?: boolean;
        noSearch?: boolean;
        noFooter?: boolean;
    }
    export default ICardViewProps;
}

declare module 'react-declarative/components/FeatureView/model/IFeatureViewProps' {
    import IAnything from "react-declarative/model/IAnything";
    import IOneProps from "react-declarative/model/IOneProps";
    import IFeatureGroup from "react-declarative/components/FeatureView/model/IFeatureGroup";
    export interface IFeatureViewProps<Data extends IAnything = IAnything, Payload = IAnything> extends Omit<IOneProps<Data, Payload>, keyof {
        fields: never;
        features: never;
    }> {
        features: IFeatureGroup<Data, Payload>[];
    }
    export default IFeatureViewProps;
}

declare module 'react-declarative/components/RecordView/model/IData' {
    export type Value = boolean | number | string;
    export interface IData {
        [key: string]: IData[] | Value[] | IData | Value;
    }
    export default IData;
}

declare module 'react-declarative/components/RecordView/model/IRecordViewProps' {
    import * as React from "react";
    import { GridSize, BoxProps } from "@mui/material";
    import IData from 'react-declarative/components/RecordView/model/IData';
    import IAnything from "react-declarative/model/IAnything";
    export interface IRecordViewProps<Data = IData, Payload = IAnything> extends BoxProps {
        background?: string;
        data: Data;
        search?: string;
        keyWidth?: GridSize;
        valueWidth?: GridSize;
        totalWidth?: number;
        withExpandAll?: boolean;
        withExpandRoot?: boolean;
        expandList?: Array<string>;
        withExpandLevel?: number;
        formatValue?: (key: string, value: boolean | number | string | null, path: string) => React.ReactNode;
        formatKey?: (key: string, path: string) => React.ReactNode;
        onSearchChanged?: (search: string) => void;
        BeforeSearch?: React.ComponentType<any>;
        AfterSearch?: React.ComponentType<any>;
        payload?: Payload;
    }
    export default IRecordViewProps;
}

declare module 'react-declarative/components/Scaffold2/model/IScaffold2Props' {
    import * as React from "react";
    import { SxProps } from "@mui/system";
    import IScaffold2Group, { IScaffold2GroupInternal } from "react-declarative/components/Scaffold2/model/IScaffold2Group";
    import IScaffold2Action from "react-declarative/components/Scaffold2/model/IScaffold2Action";
    import Payload from "react-declarative/components/Scaffold2/model/Payload";
    export interface IScaffold2Props<T = Payload> {
        noContent?: boolean;
        noAppName?: boolean;
        fixedHeader?: boolean;
        noSearch?: boolean;
        dense?: boolean;
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        appName?: string;
        options: IScaffold2Group<T>[];
        actions?: IScaffold2Action<T>[];
        loading?: boolean | number;
        payload?: T;
        deps?: any[];
        activeOptionPath: string;
        activeTabPath?: string;
        AfterAppName?: React.ComponentType<any>;
        BeforeActionMenu?: React.ComponentType<any>;
        BeforeSearch?: React.ComponentType<any>;
        AfterSearch?: React.ComponentType<any>;
        BeforeMenuContent?: React.ComponentType<any>;
        AfterMenuContent?: React.ComponentType<any>;
        Copyright?: React.ComponentType<any>;
        onAction?: (name: string) => void;
        onOptionClick?: (path: string, id: string) => void;
        onOptionGroupClick?: (path: string, id: string) => void;
        onTabChange?: (path: string, tab: string, id: string) => void;
        children: React.ReactNode;
        onInit?: () => (void | Promise<void>);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (e: Error) => void;
        throwError?: boolean;
    }
    export interface IScaffold2InternalProps<T = Payload> extends Omit<IScaffold2Props<T>, keyof {
        options: never;
    }> {
        options: IScaffold2GroupInternal<T>[];
    }
    export default IScaffold2Props;
}

declare module 'react-declarative/components/Scaffold2/model/Payload' {
    export type Payload = any;
    export default Payload;
}

declare module 'react-declarative/components/common/Group/Group' {
    import * as React from "react";
    import { IManagedLayout, PickProp } from "react-declarative/model/IManaged";
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IGroupProps<Data = IAnything, Payload = IAnything> extends IManagedLayout<Data, Payload> {
        style?: PickProp<IField<Data, Payload>, 'style'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
    }
    interface IGroupPrivate {
        children: React.ReactNode;
        isItem?: boolean;
        isBaselineAlign?: boolean;
        onFocus?: () => void;
    }
    export const Group: {
        ({ className, columns, phoneColumns, tabletColumns, desktopColumns, children, isItem, isBaselineAlign, style, columnsOverride, sx, fieldRightMargin, fieldBottomMargin, onFocus, ...otherProps }: IGroupProps & IGroupPrivate, ref: React.Ref<HTMLDivElement>): JSX.Element;
        displayName: string;
    };
    const _default: React.ForwardRefExoticComponent<IGroupProps<any, any> & IGroupPrivate & React.RefAttributes<HTMLDivElement>>;
    export default _default;
}

declare module 'react-declarative/components/common/Outline/Outline' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IOutlineProps<Data = IAnything, Payload = IAnything> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
    }
    interface IOutlinePrivate<Data = IAnything, Payload = IAnything> {
        children: React.ReactNode;
        columnsOverride?: PickProp<IField<Data, Payload>, 'columnsOverride'>;
        sx?: PickProp<IField<Data, Payload>, 'sx'>;
        isBaselineAlign: boolean;
    }
    export const Outline: {
        ({ className, columnsOverride, style, children, isBaselineAlign, sx, }: IOutlineProps & IOutlinePrivate): JSX.Element;
        displayName: string;
    };
    export default Outline;
}

declare module 'react-declarative/components/common/Paper/Paper' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IPaperProps<Data = IAnything, Payload = IAnything> {
        className?: PickProp<IField<Data, Payload>, 'className'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
    }
    interface IPaperPrivate<Data = IAnything, Payload = IAnything> {
        children: React.ReactNode;
        isBaselineAlign: boolean;
        columnsOverride?: PickProp<IField<Data, Payload>, 'columnsOverride'>;
        sx?: PickProp<IField<Data, Payload>, 'sx'>;
    }
    export const Paper: {
        ({ className, style, children, columnsOverride, isBaselineAlign, sx, }: IPaperProps & IPaperPrivate): JSX.Element;
        displayName: string;
    };
    export default Paper;
}

declare module 'react-declarative/components/common/Expansion/Expansion' {
    import * as React from 'react';
    import { PickProp } from 'react-declarative/model/IManaged';
    import IAnything from 'react-declarative/model/IAnything';
    import IField from 'react-declarative/model/IField';
    export interface IExpansionProps<Data = IAnything, Payload = IAnything> {
        title?: PickProp<IField<Data, Payload>, 'title'>;
        style?: PickProp<IField<Data, Payload>, 'style'>;
        description?: PickProp<IField<Data, Payload>, 'description'>;
        className?: PickProp<IField<Data, Payload>, 'className'>;
        expansionOpened?: PickProp<IField<Data, Payload>, 'expansionOpened'>;
    }
    interface IExpansionPrivate<Data = IAnything, Payload = IAnything> {
        children: React.ReactNode;
        columnsOverride?: PickProp<IField<Data, Payload>, 'columnsOverride'>;
        sx?: PickProp<IField<Data, Payload>, 'sx'>;
        isBaselineAlign: boolean;
    }
    export const Expansion: {
        ({ title, description, className, columnsOverride, isBaselineAlign, sx, style, children, expansionOpened, }: IExpansionProps & IExpansionPrivate): JSX.Element;
        displayName: string;
    };
    export default Expansion;
}

declare module 'react-declarative/components/List/slots/BodyRowSlot' {
    export * from 'react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot';
    export * from 'react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot';
    export { default } from 'react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot';
}

declare module 'react-declarative/components/List/slots/CheckboxCellSlot' {
    export * from 'react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot';
    export * from 'react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot';
    export { default } from 'react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot';
}

declare module 'react-declarative/components/List/slots/CommonCellSlot' {
    export * from 'react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot';
    export * from 'react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot';
    export { default } from 'react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot';
}

declare module 'react-declarative/components/List/slots/HeadRowSlot' {
    export * from 'react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot';
    export * from 'react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot';
    export { default } from 'react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot';
}

declare module 'react-declarative/components/List/slots/ActionAddSlot' {
    export * from 'react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot';
    export * from 'react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot';
    export { default } from 'react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot';
}

declare module 'react-declarative/components/List/slots/ActionMenuSlot' {
    export * from 'react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot';
    export * from 'react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot';
    export { default } from 'react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot';
}

declare module 'react-declarative/components/List/slots/ActionFabSlot' {
    export * from 'react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot';
    export * from 'react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot';
    export { default } from 'react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot';
}

declare module 'react-declarative/components/List/slots/ActionListSlot' {
    export * from 'react-declarative/components/List/slots/ActionListSlot/IActionListSlot';
    export * from 'react-declarative/components/List/slots/ActionListSlot/ActionListSlot';
    export { default } from 'react-declarative/components/List/slots/ActionListSlot/ActionListSlot';
}

declare module 'react-declarative/components/List/slots/ChipListSlot' {
    export * from 'react-declarative/components/List/slots/ChipListSlot/IChipListSlot';
    export * from 'react-declarative/components/List/slots/ChipListSlot/ChipListSlot';
    export { default } from 'react-declarative/components/List/slots/ChipListSlot/ChipListSlot';
}

declare module 'react-declarative/components/List/slots/FilterListSlot' {
    export * from 'react-declarative/components/List/slots/FilterListSlot/IFilterListSlot';
    export * from 'react-declarative/components/List/slots/FilterListSlot/FilterListSlot';
    export { default } from 'react-declarative/components/List/slots/FilterListSlot/FilterListSlot';
}

declare module 'react-declarative/components/List/slots/OperationListSlot' {
    export * from 'react-declarative/components/List/slots/OperationListSlot/IOperationListSlot';
    export * from 'react-declarative/components/List/slots/OperationListSlot/OperationListSlot';
    export { default } from 'react-declarative/components/List/slots/OperationListSlot/OperationListSlot';
}

declare module 'react-declarative/components/List/slots/SearchSlot' {
    export * from 'react-declarative/components/List/slots/SearchSlot/ISearchSlot';
    export * from 'react-declarative/components/List/slots/SearchSlot/SearchSlot';
    export { default } from 'react-declarative/components/List/slots/SearchSlot/SearchSlot';
}

declare module 'react-declarative/components/One/slots/ProgressSlot' {
    export * from 'react-declarative/components/One/slots/ProgressSlot/IProgressSlot';
    export * from 'react-declarative/components/One/slots/ProgressSlot/ProgressSlot';
    export { default } from 'react-declarative/components/One/slots/ProgressSlot/ProgressSlot';
}

declare module 'react-declarative/components/One/slots/CheckBoxSlot' {
    export * from 'react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot';
    export * from 'react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot';
    export { default } from 'react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot';
}

declare module 'react-declarative/components/One/slots/ItemsSlot' {
    export * from 'react-declarative/components/One/slots/ItemsSlot/IItemsSlot';
    export * from 'react-declarative/components/One/slots/ItemsSlot/ItemsSlot';
    export { default } from 'react-declarative/components/One/slots/ItemsSlot/ItemsSlot';
}

declare module 'react-declarative/components/One/slots/ComboSlot' {
    export * from 'react-declarative/components/One/slots/ComboSlot/IComboSlot';
    export * from 'react-declarative/components/One/slots/ComboSlot/ComboSlot';
    export { default } from 'react-declarative/components/One/slots/ComboSlot/ComboSlot';
}

declare module 'react-declarative/components/One/slots/LineSlot' {
    export * from 'react-declarative/components/One/slots/LineSlot/ILineSlot';
    export * from 'react-declarative/components/One/slots/LineSlot/LineSlot';
    export { default } from 'react-declarative/components/One/slots/LineSlot/LineSlot';
}

declare module 'react-declarative/components/One/slots/RadioSlot' {
    export * from 'react-declarative/components/One/slots/RadioSlot/IRadioSlot';
    export * from 'react-declarative/components/One/slots/RadioSlot/RadioSlot';
    export { default } from 'react-declarative/components/One/slots/RadioSlot/RadioSlot';
}

declare module 'react-declarative/components/One/slots/RatingSlot' {
    export * from 'react-declarative/components/One/slots/RatingSlot/IRatingSlot';
    export * from 'react-declarative/components/One/slots/RatingSlot/RatingSlot';
    export { default } from 'react-declarative/components/One/slots/RatingSlot/RatingSlot';
}

declare module 'react-declarative/components/One/slots/TypographySlot' {
    export * from 'react-declarative/components/One/slots/TypographySlot/ITypographySlot';
    export * from 'react-declarative/components/One/slots/TypographySlot/TypographySlot';
    export { default } from 'react-declarative/components/One/slots/TypographySlot/TypographySlot';
}

declare module 'react-declarative/components/One/slots/TextSlot' {
    export * from 'react-declarative/components/One/slots/TextSlot/ITextSlot';
    export * from 'react-declarative/components/One/slots/TextSlot/TextSlot';
    export { default } from 'react-declarative/components/One/slots/TextSlot/TextSlot';
}

declare module 'react-declarative/components/One/slots/DateSlot' {
    export * from 'react-declarative/components/One/slots/DateSlot/IDateSlot';
    export * from 'react-declarative/components/One/slots/DateSlot/DateSlot';
    export { default } from 'react-declarative/components/One/slots/DateSlot/DateSlot';
}

declare module 'react-declarative/components/One/slots/TimeSlot' {
    export * from 'react-declarative/components/One/slots/TimeSlot/ITimeSlot';
    export * from 'react-declarative/components/One/slots/TimeSlot/TimeSlot';
    export { default } from 'react-declarative/components/One/slots/TimeSlot/TimeSlot';
}

declare module 'react-declarative/components/One/slots/SwitchSlot' {
    export * from 'react-declarative/components/One/slots/SwitchSlot/ISwitchSlot';
    export * from 'react-declarative/components/One/slots/SwitchSlot/SwitchSlot';
    export { default } from 'react-declarative/components/One/slots/SwitchSlot/SwitchSlot';
}

declare module 'react-declarative/components/One/slots/SliderSlot' {
    export * from 'react-declarative/components/One/slots/SliderSlot/ISliderSlot';
    export * from 'react-declarative/components/One/slots/SliderSlot/SliderSlot';
    export { default } from 'react-declarative/components/One/slots/SliderSlot/SliderSlot';
}

declare module 'react-declarative/components/One/slots/FileSlot/IFileSlot' {
    import { IFileFieldProps, IFileFieldPrivate } from "react-declarative/components/One/fields/FileField";
    type IFileBase = IFileFieldProps & IFileFieldPrivate;
    export interface IFileSlot extends IFileBase {
    }
    export default IFileSlot;
}

declare module 'react-declarative/components/One/slots/ChooseSlot' {
    export * from 'react-declarative/components/One/slots/ChooseSlot/IChooseSlot';
    export * from 'react-declarative/components/One/slots/ChooseSlot/ChooseSlot';
    export { default } from 'react-declarative/components/One/slots/ChooseSlot/ChooseSlot';
}

declare module 'react-declarative/components/One/slots/CompleteSlot' {
    export * from 'react-declarative/components/One/slots/CompleteSlot/ICompleteSlot';
    export * from 'react-declarative/components/One/slots/CompleteSlot/CompleteSlot';
    export { default } from 'react-declarative/components/One/slots/CompleteSlot/CompleteSlot';
}

declare module 'react-declarative/components/One/slots/FileSlot' {
    export * from 'react-declarative/components/One/slots/FileSlot/IFileSlot';
    export * from 'react-declarative/components/One/slots/FileSlot/FileSlot';
    export { default } from 'react-declarative/components/One/slots/FileSlot/FileSlot';
}

declare module 'react-declarative/components/One/components/OneConfig/OneConfig' {
    export const GET_REF_SYMBOL: unique symbol;
    export class OneConfig {
        static [GET_REF_SYMBOL]: () => import("./OneConfigInstance").IConfig;
        static setValue: (config: import("./OneConfigInstance").IConfig) => void;
    }
    export default OneConfig;
}

declare module 'react-declarative/components/One/components/makeField/makeField' {
    import * as React from 'react';
    import IAnything from 'react-declarative/model/IAnything';
    import IManaged from 'react-declarative/model/IManaged';
    import IEntity from 'react-declarative/model/IEntity';
    import IField from 'react-declarative/model/IField';
    interface IConfig<Data = IAnything> {
        withApplyQueue?: boolean;
        skipDebounce?: boolean;
        skipDirtyClickListener?: boolean;
        skipFocusReadonly?: boolean;
        defaultProps?: Partial<Omit<IField<Data>, keyof {
            fields: never;
            child: never;
        }>>;
    }
    /**
      * - Оборачивает IEntity в удобную абстракцию IManaged, где сразу
      *   представлены invalid, disabled, visible и можно задваивать вызов onChange
      * - Управляет фокусировкой, мануально ожидая потерю фокуса, эмулируя onBlur
      */
    export function makeField(originalComponent: React.FC<IManaged>, fieldConfig?: IConfig): {
        <Data extends unknown = any>({ className, sx, columns, phoneColumns, tabletColumns, desktopColumns, isDisabled, isVisible, isInvalid, isReadonly, change, fallback, ready, compute, map, object: upperObject, name, title, focus, blur, invalidity, prefix, dirty: upperDirty, disabled: fieldDisabled, readonly: upperReadonly, autoFocus, style, groupRef: ref, fieldRightMargin, fieldBottomMargin, ...otherProps }: IEntity<Data, any>): JSX.Element | null;
        displayName: string;
    };
    export default makeField;
}

declare module 'react-declarative/components/One/components/makeLayout/makeLayout' {
    import * as React from 'react';
    import IAnything from 'react-declarative/model/IAnything';
    import IEntity from 'react-declarative/model/IEntity';
    export interface ILayout<Data extends IAnything = IAnything> extends IEntity<Data> {
        children: React.ReactNode;
    }
    export function makeLayout<T extends ILayout<any>>(originalComponent: React.FC<T>): React.FC<T>;
    export default makeLayout;
}

declare module 'react-declarative/components/ActionFilter/model/IActionFilterProps' {
    import React from "react";
    import IActionFilter from "react-declarative/components/ActionFilter/model/IActionFilter";
    export interface IActionFilterProps {
        actions: IActionFilter[];
        label?: React.ReactNode;
        addLabel?: React.ReactNode;
        data?: Record<string, string>;
        onChange?: (data: Record<string, string>) => void;
    }
    export default IActionFilterProps;
}

declare module 'react-declarative/components/ActionTrigger/model/IActionTriggerProps' {
    import IActionTrigger from "react-declarative/components/ActionTrigger/model/IActionTrigger";
    import { ButtonProps } from '@mui/material/Button';
    import { BoxProps } from '@mui/material/Box';
    import { IAsyncProps } from "react-declarative/components/Async";
    export interface IActionTriggerProps<T extends any = object> extends Omit<IAsyncProps<T>, keyof {
        Loader: never;
        Error: never;
        children: never;
    }>, Omit<BoxProps, keyof {
        onChange: never;
        onLoadStart: never;
        children: never;
    }> {
        actions: IActionTrigger[];
        onAction?: (action: string) => (void | Promise<void>);
        variant?: ButtonProps['variant'];
        size?: ButtonProps['size'];
    }
    export default IActionTriggerProps;
}

declare module 'react-declarative/components/OutletView/model/IOutletViewProps' {
    import { BrowserHistory, HashHistory, MemoryHistory } from "history";
    import { IRevealProps } from "react-declarative/components/FetchView";
    import { BoxProps } from "@mui/material";
    import IAnything from "react-declarative/model/IAnything";
    import IOutlet from "react-declarative/components/OutletView/model/IOutlet";
    import TSubject from "react-declarative/model/TSubject";
    export interface IOutletViewProps<Data extends {} = Record<string, any>, Payload = IAnything, Params = IAnything> extends Omit<BoxProps, keyof {
        onChange: never;
        onSubmit: never;
    }> {
        waitForChangesDelay?: number;
        history: BrowserHistory | MemoryHistory | HashHistory;
        animation?: IRevealProps['animation'];
        payload?: Payload | (() => Payload);
        params?: Params;
        routes: IOutlet<Data[keyof Data], Payload, Params>[];
        initialData?: Data | (() => Data);
        onChange?: (data: Data, initial: boolean) => void;
        onSubmit: (data: Data, config: {
            afterSave: () => Promise<void>;
        }) => (boolean | Promise<boolean>);
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        fallback?: (error: Error) => void;
        changeSubject?: TSubject<[keyof Data, Data]>;
    }
    export default IOutletViewProps;
}

declare module 'react-declarative/components/FadeView/components/FadeContainer' {
    import * as React from 'react';
    import DefaultFade from 'react-declarative/components/FadeView/components/DefaultFade';
    export const SCROLL_VIEW_TARGER = "react-declarative__scrollViewTarget";
    export interface IFadeContainerProps {
        className?: string;
        Fade?: typeof DefaultFade;
        style?: React.CSSProperties;
        children: React.ReactNode;
        color?: string;
        selector?: string;
        zIndex?: number;
        disableBottom?: boolean;
        disableRight?: boolean;
    }
    export const FadeContainer: ({ className, style, color, children, disableBottom, disableRight, zIndex, Fade, selector, }: IFadeContainerProps) => JSX.Element;
    export default FadeContainer;
}

declare module 'react-declarative/components/Grid/model/IGridProps' {
    import React from 'react';
    import { SxProps } from '@mui/system';
    import IColumn from 'react-declarative/components/Grid/model/IColumn';
    import RowData from 'react-declarative/components/Grid/model/RowData';
    import IGridAction from 'react-declarative/components/Grid/model/IGridAction';
    import TSort from 'react-declarative/components/Grid/model/TSort';
    import { IVirtualViewProps } from 'react-declarative/components/VirtualView';
    import { IActionMenuProps } from 'react-declarative/components/ActionMenu';
    import { TSubject } from 'react-declarative/utils/rx/Subject';
    export interface IGridProps<T = RowData> {
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        header?: React.ReactNode;
        data: Array<T>;
        columns: Array<IColumn<T>>;
        scrollXSubject?: TSubject<number>;
        scrollYSubject?: TSubject<number>;
        onTableRowClick?: (evt: React.MouseEvent, row: T) => void;
        rowActions?: Array<IGridAction<T>>;
        rowActionsPayload?: IActionMenuProps['payload'];
        onRowAction?: (row: T, action: string) => void;
        recomputeSubject?: TSubject<void>;
        loading?: boolean;
        hasMore?: boolean;
        onSkip?: () => void;
        onButtonSkip?: () => void;
        rowKey?: keyof T;
        sort?: TSort<T>;
        errorMessage?: string | null;
        onClickHeaderColumn?: (value: keyof T) => void;
        minRowHeight?: IVirtualViewProps['minRowHeight'];
        bufferSize?: IVirtualViewProps['bufferSize'];
        shortHeight?: boolean;
    }
    export default IGridProps;
}

declare module 'react-declarative/components/Grid/model/Dimension' {
    export type Dimension = number | string;
    export default Dimension;
}

declare module 'react-declarative/components/Grid/model/RowData' {
    export type RowData = any;
    export default RowData;
}

declare module 'react-declarative/components/MasterDetail/model/IMasterDetailProps' {
    import IMasterDetailOption from "react-declarative/components/MasterDetail/model/IMasterDetailOption";
    import MasterDetailMode from "react-declarative/components/MasterDetail/model/MasterDetailMode";
    import React from "react";
    import { SxProps } from "@mui/system";
    export interface IMasterDetailProps<Payload = any> {
        withMenuCollapse?: boolean;
        withFixedPos?: boolean;
        fixedPosHeaderAdjust?: number;
        mode?: MasterDetailMode;
        title?: string;
        children: React.ReactNode;
        Loader?: React.ComponentType<any>;
        Error?: React.ComponentType<any>;
        activeOption?: string;
        onActiveOptionChange?: (activeOption: string, initial: boolean) => void;
        className?: string;
        style?: React.CSSProperties;
        sx?: SxProps;
        payload?: Payload;
        deps?: any[];
        options: IMasterDetailOption<Payload>[];
        fallback?: (e: Error) => void;
        onLoadStart?: () => void;
        onLoadEnd?: (isOk: boolean) => void;
        throwError?: boolean;
    }
    export default IMasterDetailProps;
}

declare module 'react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import IColumn from "react-declarative/model/IColumn";
    import DisplayMode from "react-declarative/model/DisplayMode";
    export type BodyColumn<RowData extends IRowData = IAnything> = Omit<IColumn<RowData>, keyof {
        width: never;
    }> & {
        width: string;
    };
    export interface IBodyRowSlot<RowData extends IRowData = IAnything> {
        fullWidth: number;
        row: RowData;
        columns: BodyColumn<RowData>[];
        mode: DisplayMode;
    }
    export default IBodyRowSlot;
}

declare module 'react-declarative/components/List/slots/BodyRowSlot/BodyRowSlot' {
    import IBodyRowSlot from 'react-declarative/components/List/slots/BodyRowSlot/IBodyRowSlot';
    export const BodyRowSlot: (props: IBodyRowSlot) => JSX.Element;
    export default BodyRowSlot;
}

declare module 'react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import { ICheckboxCellProps } from "react-declarative/components/List/components/SlotFactory/components/CheckboxCell/CheckboxCell";
    export interface ICheckboxCellSlot<RowData extends IRowData = IAnything> extends ICheckboxCellProps<RowData> {
    }
    export default ICheckboxCellSlot;
}

declare module 'react-declarative/components/List/slots/CheckboxCellSlot/CheckboxCellSlot' {
    import ICheckboxCellSlot from 'react-declarative/components/List/slots/CheckboxCellSlot/ICheckboxCellSlot';
    export const CheckboxCellSlot: (props: ICheckboxCellSlot) => JSX.Element;
    export default CheckboxCellSlot;
}

declare module 'react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot' {
    import { IActionMenuProps } from "react-declarative/components/ActionMenu";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import IColumn from "react-declarative/model/IColumn";
    import DisplayMode from "react-declarative/model/DisplayMode";
    export type CommonCellColumn<RowData extends IRowData = IAnything> = Omit<IColumn<RowData>, keyof {
        width: never;
    }> & {
        width: string;
    };
    export interface ICommonCellSlot<RowData extends IRowData = IAnything> {
        column: CommonCellColumn<RowData>;
        row: RowData;
        idx: number;
        fullWidth: number;
        mode: DisplayMode;
        onMenuToggle: IActionMenuProps['onToggle'];
        onAction: IActionMenuProps['onAction'];
    }
    export default ICommonCellSlot;
}

declare module 'react-declarative/components/List/slots/CommonCellSlot/CommonCellSlot' {
    import ICommonCellSlot from 'react-declarative/components/List/slots/CommonCellSlot/ICommonCellSlot';
    export const CommonCellSlot: (props: ICommonCellSlot) => JSX.Element;
    export default CommonCellSlot;
}

declare module 'react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    import IColumn from "react-declarative/model/IColumn";
    import DisplayMode from "react-declarative/model/DisplayMode";
    export type HeadColumn<RowData extends IRowData = IAnything> = Omit<IColumn<RowData>, keyof {
        width: never;
    }> & {
        width: string;
    };
    export interface IHeadRowSlot<RowData extends IRowData = IAnything> {
        columns: HeadColumn<RowData>[];
        fullWidth: number;
        mode: DisplayMode;
    }
    export default IHeadRowSlot;
}

declare module 'react-declarative/components/List/slots/HeadRowSlot/HeadRowSlot' {
    import IHeadRowSlot from 'react-declarative/components/List/slots/HeadRowSlot/IHeadRowSlot';
    export const HeadRowSlot: (props: IHeadRowSlot) => JSX.Element;
    export default HeadRowSlot;
}

declare module 'react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    export interface IActionAddSlot<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> {
        action?: string;
        label?: string;
        height: number;
        width: number;
        isVisible?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
        isDisabled?: (selectedRows: RowData[], payload: Payload) => Promise<boolean> | boolean;
    }
    export default IActionAddSlot;
}

declare module 'react-declarative/components/List/slots/ActionAddSlot/ActionAddSlot' {
    import IActionAddSlot from 'react-declarative/components/List/slots/ActionAddSlot/IActionAddSlot';
    export const ActionAddSlot: (props: IActionAddSlot) => JSX.Element;
    export default ActionAddSlot;
}

declare module 'react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import { IListActionOption } from "react-declarative/model/IListProps";
    export interface IActionMenuSlot {
        options?: Partial<IListActionOption>[];
        deps?: IAnything[];
    }
    export default IActionMenuSlot;
}

declare module 'react-declarative/components/List/slots/ActionMenuSlot/ActionMenuSlot' {
    import IActionMenuSlot from 'react-declarative/components/List/slots/ActionMenuSlot/IActionMenuSlot';
    export const ActionMenuSlot: (props: IActionMenuSlot) => JSX.Element;
    export default ActionMenuSlot;
}

declare module 'react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot' {
    import React from "react";
    import IAnything from "react-declarative/model/IAnything";
    import IRowData from "react-declarative/model/IRowData";
    export interface IActionFabSlot<RowData extends IRowData = IAnything, Payload extends IAnything = IAnything> {
        action?: string;
        label?: string;
        icon?: React.ComponentType<any>;
        height: number;
        width: number;
        isVisible?: (selectedRows: RowData[], payload: Payload) => (Promise<boolean> | boolean);
        isDisabled?: (selectedRows: RowData[], payload: Payload) => (Promise<boolean> | boolean);
    }
    export default IActionFabSlot;
}

declare module 'react-declarative/components/List/slots/ActionFabSlot/ActionFabSlot' {
    import IActionFabSlot from 'react-declarative/components/List/slots/ActionFabSlot/IActionFabSlot';
    export const ActionFabSlot: (props: IActionFabSlot) => JSX.Element;
    export default ActionFabSlot;
}

declare module 'react-declarative/components/List/slots/ActionListSlot/IActionListSlot' {
    import { IListAction } from "react-declarative/model/IListProps";
    import IAnything from "react-declarative/model/IAnything";
    export interface IActionListSlot<FilterData extends {} = IAnything> {
        className?: string;
        style?: React.CSSProperties;
        filterData: FilterData;
        actions: IListAction[];
        deps?: any[];
        height: number;
        width: number;
        title?: string;
    }
    export default IActionListSlot;
}

declare module 'react-declarative/components/List/slots/ActionListSlot/ActionListSlot' {
    import IActionListSlot from 'react-declarative/components/List/slots/ActionListSlot/IActionListSlot';
    export const ActionListSlot: (props: IActionListSlot) => JSX.Element;
    export default ActionListSlot;
}

declare module 'react-declarative/components/List/slots/ChipListSlot/IChipListSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IListProps from "react-declarative/model/IListProps";
    import IRowData from "react-declarative/model/IRowData";
    export interface IChipListSlot<RowData extends IRowData = IAnything> {
        listChips: IListProps<RowData>['chips'];
        loading: boolean;
    }
    export default IChipListSlot;
}

declare module 'react-declarative/components/List/slots/ChipListSlot/ChipListSlot' {
    import IChipListSlot from 'react-declarative/components/List/slots/ChipListSlot/IChipListSlot';
    export const ChipListSlot: (props: IChipListSlot) => JSX.Element;
    export default ChipListSlot;
}

declare module 'react-declarative/components/List/slots/FilterListSlot/IFilterListSlot' {
    import IAnything from "react-declarative/model/IAnything";
    import IField from "react-declarative/model/IField";
    export interface IFilterListSlot<FilterData extends {} = IAnything> {
        className?: string;
        filterData: FilterData;
        style?: React.CSSProperties;
        filters: IField<FilterData>[];
        change: (data: FilterData) => void;
        onSearchChange?: (search: string) => void;
        onFilterChange?: (data: FilterData) => void;
        onCollapsedChange?: (collapsed: boolean) => void;
        withToggledFilters?: boolean;
        ready: () => void;
        clean: () => void;
        loading: boolean;
        label: string;
        search: string;
        withSearch: boolean;
        height: number;
        width: number;
    }
    export default IFilterListSlot;
}

declare module 'react-declarative/components/List/slots/FilterListSlot/FilterListSlot' {
    import IFilterListSlot from 'react-declarative/components/List/slots/FilterListSlot/IFilterListSlot';
    export const FilterListSlot: (props: IFilterListSlot) => JSX.Element;
    export default FilterListSlot;
}

declare module 'react-declarative/components/List/slots/OperationListSlot/IOperationListSlot' {
    import IListOperation from "react-declarative/model/IListOperation";
    export interface IOperationListSlot {
        className?: string;
        style?: React.CSSProperties;
        operations: IListOperation[];
        width: number;
    }
    export default IOperationListSlot;
}

declare module 'react-declarative/components/List/slots/OperationListSlot/OperationListSlot' {
    import IOperationListSlot from 'react-declarative/components/List/slots/OperationListSlot/IOperationListSlot';
    export const OperationListSlot: (props: IOperationListSlot) => JSX.Element;
    export default OperationListSlot;
}

declare module 'react-declarative/components/List/slots/SearchSlot/ISearchSlot' {
    export interface ISearchSlot {
        className?: string;
        style?: React.CSSProperties;
        onSearchChange?: (search: string) => void;
        clean: () => void;
        loading: boolean;
        label: string;
        search: string;
        height: number;
        width: number;
    }
    export default ISearchSlot;
}

declare module 'react-declarative/components/List/slots/SearchSlot/SearchSlot' {
    import ISearchSlot from 'react-declarative/components/List/slots/SearchSlot/ISearchSlot';
    export const SearchSlot: (props: ISearchSlot) => JSX.Element;
    export default SearchSlot;
}

declare module 'react-declarative/components/One/slots/ProgressSlot/IProgressSlot' {
    import { IProgressFieldProps, IProgressFieldPrivate } from "react-declarative/components/One/fields/ProgressField";
    export interface IProgressSlot extends IProgressFieldProps, IProgressFieldPrivate {
    }
    export default IProgressSlot;
}

declare module 'react-declarative/components/One/slots/ProgressSlot/ProgressSlot' {
    import IProgressSlot from 'react-declarative/components/One/slots/ProgressSlot/IProgressSlot';
    export const ProgressSlot: (props: IProgressSlot) => JSX.Element;
    export default ProgressSlot;
}

declare module 'react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot' {
    import { ICheckboxFieldPrivate, ICheckboxFieldProps } from "react-declarative/components/One/fields/CheckboxField";
    export interface ICheckBoxSlot extends ICheckboxFieldProps, ICheckboxFieldPrivate {
    }
    export default ICheckBoxSlot;
}

declare module 'react-declarative/components/One/slots/CheckBoxSlot/CheckBoxSlot' {
    import ICheckBoxSlot from 'react-declarative/components/One/slots/CheckBoxSlot/ICheckBoxSlot';
    export const CheckBoxSlot: (props: ICheckBoxSlot) => JSX.Element;
    export default CheckBoxSlot;
}

declare module 'react-declarative/components/One/slots/ItemsSlot/IItemsSlot' {
    import { IItemsFieldPrivate, IItemsFieldProps } from "react-declarative/components/One/fields/ItemsField";
    export interface IItemsSlot extends IItemsFieldProps, IItemsFieldPrivate {
    }
    export default IItemsSlot;
}

declare module 'react-declarative/components/One/slots/ItemsSlot/ItemsSlot' {
    import IItemsSlot from 'react-declarative/components/One/slots/ItemsSlot/IItemsSlot';
    export const ItemsSlot: (props: IItemsSlot) => JSX.Element;
    export default ItemsSlot;
}

declare module 'react-declarative/components/One/slots/ComboSlot/IComboSlot' {
    import { IComboFieldPrivate, IComboFieldProps } from "react-declarative/components/One/fields/ComboField";
    export interface IComboSlot extends Omit<IComboFieldProps, "readonly">, IComboFieldPrivate {
    }
    export default IComboSlot;
}

declare module 'react-declarative/components/One/slots/ComboSlot/ComboSlot' {
    import IComboSlot from 'react-declarative/components/One/slots/ComboSlot/IComboSlot';
    export const ComboSlot: (props: IComboSlot) => JSX.Element;
    export default ComboSlot;
}

declare module 'react-declarative/components/One/slots/LineSlot/ILineSlot' {
    import { ILineFieldProps } from "react-declarative/components/One/fields/LineField";
    export interface ILineSlot extends ILineFieldProps {
    }
    export default ILineSlot;
}

declare module 'react-declarative/components/One/slots/LineSlot/LineSlot' {
    import ILineSlot from 'react-declarative/components/One/slots/LineSlot/ILineSlot';
    export const LineSlot: (props: ILineSlot) => JSX.Element;
    export default LineSlot;
}

declare module 'react-declarative/components/One/slots/RadioSlot/IRadioSlot' {
    import { IRadioFieldPrivate, IRadioFieldProps } from "react-declarative/components/One/fields/RadioField";
    export interface IRadioSlot extends IRadioFieldProps, IRadioFieldPrivate {
    }
    export default IRadioSlot;
}

declare module 'react-declarative/components/One/slots/RadioSlot/RadioSlot' {
    import IRadioSlot from 'react-declarative/components/One/slots/RadioSlot/IRadioSlot';
    export const RadioSlot: (props: IRadioSlot) => JSX.Element;
    export default RadioSlot;
}

declare module 'react-declarative/components/One/slots/RatingSlot/IRatingSlot' {
    import { IRatingFieldProps, IRatingFieldPrivate } from "react-declarative/components/One/fields/RatingField";
    export interface IRatingSlot extends Omit<IRatingFieldProps, "readonly">, IRatingFieldPrivate {
    }
    export default IRatingSlot;
}

declare module 'react-declarative/components/One/slots/RatingSlot/RatingSlot' {
    import IRatingSlot from 'react-declarative/components/One/slots/RatingSlot/IRatingSlot';
    export const RatingSlot: (props: IRatingSlot) => JSX.Element;
    export default RatingSlot;
}

declare module 'react-declarative/components/One/slots/TypographySlot/ITypographySlot' {
    import { ITypographyFieldPrivate, ITypographyFieldProps } from "react-declarative/components/One/fields/TypographyField";
    export interface ITypographySlot extends ITypographyFieldProps, ITypographyFieldPrivate {
    }
    export default ITypographySlot;
}

declare module 'react-declarative/components/One/slots/TypographySlot/TypographySlot' {
    import ITypographySlot from 'react-declarative/components/One/slots/TypographySlot/ITypographySlot';
    export const TypographySlot: (props: ITypographySlot) => JSX.Element;
    export default TypographySlot;
}

declare module 'react-declarative/components/One/slots/TextSlot/ITextSlot' {
    import { ITextFieldProps, ITextFieldPrivate } from "react-declarative/components/One/fields/TextField";
    type ITextBase = ITextFieldProps & ITextFieldPrivate;
    export interface ITextSlot extends ITextBase {
    }
    export default ITextSlot;
}

declare module 'react-declarative/components/One/slots/TextSlot/TextSlot' {
    import ITextSlot from 'react-declarative/components/One/slots/TextSlot/ITextSlot';
    export const TextSlot: (props: ITextSlot) => JSX.Element;
    export default TextSlot;
}

declare module 'react-declarative/components/One/slots/DateSlot/IDateSlot' {
    import { IDateFieldProps, IDateFieldPrivate } from "react-declarative/components/One/fields/DateField";
    type IDateBase = IDateFieldProps & IDateFieldPrivate;
    export interface IDateSlot extends IDateBase {
    }
    export default IDateSlot;
}

declare module 'react-declarative/components/One/slots/DateSlot/DateSlot' {
    import IDateSlot from 'react-declarative/components/One/slots/DateSlot/IDateSlot';
    export const DateSlot: (props: IDateSlot) => JSX.Element;
    export default DateSlot;
}

declare module 'react-declarative/components/One/slots/TimeSlot/ITimeSlot' {
    import { ITimeFieldProps, ITimeFieldPrivate } from "react-declarative/components/One/fields/TimeField";
    type TTimeBase = ITimeFieldProps & ITimeFieldPrivate;
    export interface ITimeSlot extends TTimeBase {
    }
    export default ITimeSlot;
}

declare module 'react-declarative/components/One/slots/TimeSlot/TimeSlot' {
    import ITimeSlot from 'react-declarative/components/One/slots/TimeSlot/ITimeSlot';
    export const TimeSlot: (props: ITimeSlot) => JSX.Element;
    export default TimeSlot;
}

declare module 'react-declarative/components/One/slots/SwitchSlot/ISwitchSlot' {
    import { ISwitchFieldPrivate, ISwitchFieldProps } from "react-declarative/components/One/fields/SwitchField";
    export interface ISwitchSlot extends ISwitchFieldProps, ISwitchFieldPrivate {
    }
    export default ISwitchSlot;
}

declare module 'react-declarative/components/One/slots/SwitchSlot/SwitchSlot' {
    import ISwitchSlot from 'react-declarative/components/One/slots/SwitchSlot/ISwitchSlot';
    export const SwitchSlot: (props: ISwitchSlot) => JSX.Element;
    export default SwitchSlot;
}

declare module 'react-declarative/components/One/slots/SliderSlot/ISliderSlot' {
    import { ISliderFieldPrivate, ISliderFieldProps } from "react-declarative/components/One/fields/SliderField";
    export interface ISliderSlot extends ISliderFieldProps, ISliderFieldPrivate {
    }
    export default ISliderSlot;
}

declare module 'react-declarative/components/One/slots/SliderSlot/SliderSlot' {
    import ISliderSlot from 'react-declarative/components/One/slots/SliderSlot/ISliderSlot';
    export const SliderSlot: (props: ISliderSlot) => JSX.Element;
    export default SliderSlot;
}

declare module 'react-declarative/components/One/slots/ChooseSlot/IChooseSlot' {
    import { IChooseFieldProps, IChooseFieldPrivate } from "react-declarative/components/One/fields/ChooseField";
    type IChooseBase = IChooseFieldProps & IChooseFieldPrivate;
    export interface IChooseSlot extends IChooseBase {
    }
    export default IChooseSlot;
}

declare module 'react-declarative/components/One/slots/ChooseSlot/ChooseSlot' {
    import IChooseSlot from 'react-declarative/components/One/slots/ChooseSlot/IChooseSlot';
    export const ChooseSlot: (props: IChooseSlot) => JSX.Element;
    export default ChooseSlot;
}

declare module 'react-declarative/components/One/slots/CompleteSlot/ICompleteSlot' {
    import { ICompleteFieldProps, ICompleteFieldPrivate } from "react-declarative/components/One/fields/CompleteField";
    type ICompleteBase = ICompleteFieldProps & ICompleteFieldPrivate;
    export interface ICompleteSlot extends ICompleteBase {
    }
    export default ICompleteSlot;
}

declare module 'react-declarative/components/One/slots/CompleteSlot/CompleteSlot' {
    import ICompleteSlot from 'react-declarative/components/One/slots/CompleteSlot/ICompleteSlot';
    export const CompleteSlot: (props: ICompleteSlot) => JSX.Element;
    export default CompleteSlot;
}

declare module 'react-declarative/components/One/slots/FileSlot/FileSlot' {
    import IFileSlot from 'react-declarative/components/One/slots/FileSlot/IFileSlot';
    export const FileSlot: (props: IFileSlot) => JSX.Element;
    export default FileSlot;
}

declare module 'react-declarative/components/FadeView/components/DefaultFade' {
    interface IDefaultFadeProps {
        className: string;
        visible: boolean;
        zIndex: number;
        position: 'bottom' | 'right';
        color?: string;
        none: boolean;
    }
    export const DefaultFade: ({ className, visible, color, none, position, zIndex, }: IDefaultFadeProps) => JSX.Element;
    export default DefaultFade;
}

declare module 'react-declarative/model/DisplayMode' {
    export enum DisplayMode {
        Phone = "phone",
        Tablet = "tablet",
        Desktop = "desktop"
    }
    export default DisplayMode;
}

declare module 'react-declarative/components/List/components/SlotFactory/components/CheckboxCell/CheckboxCell' {
    import IRowData from 'react-declarative/model/IRowData';
    import IAnything from 'react-declarative/model/IAnything';
    export interface ICheckboxCellProps<RowData extends IRowData = IAnything> {
        row: RowData;
    }
    export const CheckboxCell: <RowData extends IRowData = any>({ row, }: ICheckboxCellProps<RowData>) => JSX.Element;
    export default CheckboxCell;
}

